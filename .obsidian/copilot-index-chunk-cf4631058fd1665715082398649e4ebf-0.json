{"internalDocumentIDStore":{"internalIdToId":["c4fb9e0e3e1f8ee8799447731015b17c","1a1a41b8dbfd0a7b6e89ade8a138e59b","1003e1be09f34801247d695575da890c","39d9abf539abd6d8bb2719ab7014adaa","87b57dad889cee2b2d25db78f963ca47","4f3e18994be94a3c0594cf9489994047","eb1d7b55e0857c89bc42e5dddf63331c","3bc28948358908d3d01d2ca76befd446","52eff318f614703c2abcf5e4b8fb3c48","ac19a4ed66ed03c73f16747b10244e60","6489cb180a9fae1ff890dde104965413","060790fafb1418088e58975fbf4492de","80c10db6700bc9a63f0edec519ed2d39","df4bf7fdff83911f964fbd71f6ea100e","571343ebc6212776d6c44ac53b00a89b","e0705a6359d1cde9c305ff71fbc392a0","1c20ad280d809d7369882132cf8e1b21","ec89b4f6b5d0639ad655376255f98693","7352ecacad7370213f0cbe18df0496af","47b52ef96a920ab33159b46456c1ee60","7afb3aa06c849214862fc3641959d7eb"]},"index":{"indexes":{"id":{"type":"Radix","node":{"w":"","s":"","c":{"0":{"w":"060790fafb1418088e58975fbf4492de","s":"060790fafb1418088e58975fbf4492de","c":{},"d":[12],"e":true},"1":{"w":"1","s":"1","c":{"0":{"w":"1003e1be09f34801247d695575da890c","s":"003e1be09f34801247d695575da890c","c":{},"d":[3],"e":true},"a":{"w":"1a1a41b8dbfd0a7b6e89ade8a138e59b","s":"a1a41b8dbfd0a7b6e89ade8a138e59b","c":{},"d":[2],"e":true},"c":{"w":"1c20ad280d809d7369882132cf8e1b21","s":"c20ad280d809d7369882132cf8e1b21","c":{},"d":[17],"e":true}},"d":[],"e":false},"3":{"w":"3","s":"3","c":{"9":{"w":"39d9abf539abd6d8bb2719ab7014adaa","s":"9d9abf539abd6d8bb2719ab7014adaa","c":{},"d":[4],"e":true},"b":{"w":"3bc28948358908d3d01d2ca76befd446","s":"bc28948358908d3d01d2ca76befd446","c":{},"d":[8],"e":true}},"d":[],"e":false},"4":{"w":"4","s":"4","c":{"7":{"w":"47b52ef96a920ab33159b46456c1ee60","s":"7b52ef96a920ab33159b46456c1ee60","c":{},"d":[20],"e":true},"f":{"w":"4f3e18994be94a3c0594cf9489994047","s":"f3e18994be94a3c0594cf9489994047","c":{},"d":[6],"e":true}},"d":[],"e":false},"5":{"w":"5","s":"5","c":{"2":{"w":"52eff318f614703c2abcf5e4b8fb3c48","s":"2eff318f614703c2abcf5e4b8fb3c48","c":{},"d":[9],"e":true},"7":{"w":"571343ebc6212776d6c44ac53b00a89b","s":"71343ebc6212776d6c44ac53b00a89b","c":{},"d":[15],"e":true}},"d":[],"e":false},"6":{"w":"6489cb180a9fae1ff890dde104965413","s":"6489cb180a9fae1ff890dde104965413","c":{},"d":[11],"e":true},"7":{"w":"7","s":"7","c":{"3":{"w":"7352ecacad7370213f0cbe18df0496af","s":"352ecacad7370213f0cbe18df0496af","c":{},"d":[19],"e":true},"a":{"w":"7afb3aa06c849214862fc3641959d7eb","s":"afb3aa06c849214862fc3641959d7eb","c":{},"d":[21],"e":true}},"d":[],"e":false},"8":{"w":"8","s":"8","c":{"0":{"w":"80c10db6700bc9a63f0edec519ed2d39","s":"0c10db6700bc9a63f0edec519ed2d39","c":{},"d":[13],"e":true},"7":{"w":"87b57dad889cee2b2d25db78f963ca47","s":"7b57dad889cee2b2d25db78f963ca47","c":{},"d":[5],"e":true}},"d":[],"e":false},"c":{"w":"c4fb9e0e3e1f8ee8799447731015b17c","s":"c4fb9e0e3e1f8ee8799447731015b17c","c":{},"d":[1],"e":true},"e":{"w":"e","s":"e","c":{"0":{"w":"e0705a6359d1cde9c305ff71fbc392a0","s":"0705a6359d1cde9c305ff71fbc392a0","c":{},"d":[16],"e":true},"b":{"w":"eb1d7b55e0857c89bc42e5dddf63331c","s":"b1d7b55e0857c89bc42e5dddf63331c","c":{},"d":[7],"e":true},"c":{"w":"ec89b4f6b5d0639ad655376255f98693","s":"c89b4f6b5d0639ad655376255f98693","c":{},"d":[18],"e":true}},"d":[],"e":false},"a":{"w":"ac19a4ed66ed03c73f16747b10244e60","s":"ac19a4ed66ed03c73f16747b10244e60","c":{},"d":[10],"e":true},"d":{"w":"df4bf7fdff83911f964fbd71f6ea100e","s":"df4bf7fdff83911f964fbd71f6ea100e","c":{},"d":[14],"e":true}},"d":[],"e":false},"isArray":false},"title":{"type":"Radix","node":{"w":"","s":"","c":{"k":{"w":"key","s":"key","c":{},"d":[3],"e":true},"r":{"w":"redis","s":"redis","c":{},"d":[6,7],"e":true},"m":{"w":"memcached","s":"memcached","c":{},"d":[6],"e":true},"c":{"w":"cache","s":"cache","c":{},"d":[17],"e":true},"a":{"w":"aside","s":"aside","c":{},"d":[17],"e":true}},"d":[],"e":false},"isArray":false},"path":{"type":"Radix","node":{"w":"","s":"","c":{"m":{"w":"m","s":"m","c":{"d":{"w":"md","s":"d","c":{},"d":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"e":true},"e":{"w":"memcached","s":"emcached","c":{},"d":[6],"e":true}},"d":[],"e":false},"r":{"w":"redis","s":"redis","c":{},"d":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"e":true},"k":{"w":"key","s":"key","c":{},"d":[3],"e":true},"c":{"w":"cache","s":"cache","c":{},"d":[17],"e":true},"a":{"w":"aside","s":"aside","c":{},"d":[17],"e":true}},"d":[],"e":false},"isArray":false},"content":{"type":"Radix","node":{"w":"","s":"","c":{"0":{"w":"0","s":"0","c":{"0":{"w":"00s","s":"0s","c":{},"d":[14],"e":true},"1":{"w":"01","s":"1","c":{},"d":[1,2,3,4,5,6,7,8,13],"e":true},"2":{"w":"02","s":"2","c":{},"d":[13],"e":true},"3":{"w":"03","s":"3","c":{"0":{"w":"030452","s":"0452","c":{},"d":[14],"e":true},"4":{"w":"034579","s":"4579","c":{},"d":[14],"e":true}},"d":[13],"e":true},"4":{"w":"04","s":"4","c":{},"d":[1,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"e":true},"5":{"w":"05","s":"5","c":{"4":{"w":"054579","s":"4579","c":{},"d":[14],"e":true}},"d":[1,2,3,4,5,6,7,8,20],"e":true},"9":{"w":"09","s":"9","c":{},"d":[9,10,11,12,13,14,15,16,17,18],"e":true},"x":{"w":"0xff","s":"xff","c":{},"d":[9],"e":true},"-":{"w":"0-1","s":"-1","c":{},"d":[9],"e":true}},"d":[3,4,5,7,8,9,11,12,13,14,18,19,20],"e":true},"1":{"w":"1","s":"1","c":{"0":{"w":"10","s":"0","c":{"0":{"w":"100","s":"0","c":{"0":{"w":"10000","s":"00","c":{},"d":[7,11,14,19],"e":true},"1":{"w":"1001","s":"1","c":{},"d":[11],"e":true},"8":{"w":"10086","s":"86","c":{},"d":[13],"e":true}},"d":[13],"e":true},"2":{"w":"10240","s":"240","c":{},"d":[3],"e":true},"s":{"w":"10s","s":"s","c":{},"d":[2,11],"e":true}},"d":[3,4,8,11,12,14,16,19],"e":true},"1":{"w":"11","s":"1","c":{"1":{"w":"111000102","s":"1000102","c":{},"d":[11],"e":true},"6":{"w":"116","s":"6","c":{},"d":[14],"e":true}},"d":[4,11,12,21],"e":true},"2":{"w":"12","s":"2","c":{"7":{"w":"127","s":"7","c":{},"d":[3],"e":true},"8":{"w":"128","s":"8","c":{},"d":[13],"e":true}},"d":[14,20],"e":true},"3":{"w":"13","s":"3","c":{"1":{"w":"131","s":"1","c":{"0":{"w":"13100111100","s":"00111100","c":{},"d":[13],"e":true},"1":{"w":"13110114300","s":"10114300","c":{},"d":[13],"e":true},"3":{"w":"13132110901","s":"32110901","c":{},"d":[13],"e":true}},"d":[],"e":false},"2":{"w":"132","s":"2","c":{"0":{"w":"13200111100","s":"00111100","c":{},"d":[13],"e":true},"1":{"w":"13210414300","s":"10414300","c":{},"d":[13],"e":true},"5":{"w":"13252110901","s":"52110901","c":{},"d":[13],"e":true}},"d":[13],"e":true},"3":{"w":"133","s":"3","c":{"0":{"w":"13300111100","s":"00111100","c":{},"d":[13],"e":true},"1":{"w":"13310414300","s":"10414300","c":{},"d":[13],"e":true},"5":{"w":"13352110901","s":"52110901","c":{},"d":[13],"e":true}},"d":[13],"e":true},"4":{"w":"134","s":"4","c":{},"d":[13],"e":true}},"d":[11,19,20,21],"e":true},"4":{"w":"14","s":"4","c":{},"d":[8,20],"e":true},"5":{"w":"15","s":"5","c":{"0":{"w":"150","s":"0","c":{},"d":[13],"e":true}},"d":[11,21],"e":true},"6":{"w":"16","s":"6","c":{"3":{"w":"1638","s":"38","c":{"3":{"w":"16383","s":"3","c":{},"d":[4],"e":true},"4":{"w":"16384","s":"4","c":{},"d":[4],"e":true}},"d":[],"e":false},"5":{"w":"165425","s":"5425","c":{"4":{"w":"1654254953808","s":"4953808","c":{"-":{"w":"1654254953808-0","s":"-0","c":{},"d":[14],"e":true}},"d":[14],"e":true},"6":{"w":"16542562","s":"62","c":{"6":{"w":"1654256265584-0","s":"65584-0","c":{},"d":[14],"e":true},"7":{"w":"1654256271337-0","s":"71337-0","c":{},"d":[14],"e":true}},"d":[],"e":false}},"d":[],"e":false},"8":{"w":"168","s":"8","c":{},"d":[4],"e":true}},"d":[1,4,5,8,10,19],"e":true},"7":{"w":"17","s":"7","c":{},"d":[8,18],"e":true},"8":{"w":"18","s":"8","c":{},"d":[11],"e":true},"9":{"w":"19","s":"9","c":{"2":{"w":"192","s":"2","c":{},"d":[4],"e":true}},"d":[2,3,4,5,6,7],"e":true},"m":{"w":"1mb","s":"mb","c":{},"d":[18],"e":true}},"d":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"e":true},"2":{"w":"2","s":"2","c":{"0":{"w":"20","s":"0","c":{"0":{"w":"200","s":"0","c":{},"d":[13],"e":true},"2":{"w":"202","s":"2","c":{"2":{"w":"2022","s":"2","c":{"0":{"w":"202206","s":"06","c":{},"d":[13],"e":true}},"d":[13],"e":true},"5":{"w":"2025","s":"5","c":{},"d":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"e":true}},"d":[],"e":false}},"d":[8,11],"e":true},"1":{"w":"21","s":"1","c":{},"d":[9,10,11,12,13,14,15,16,17,18],"e":true},"2":{"w":"22","s":"2","c":{},"d":[8],"e":true},"4":{"w":"24","s":"4","c":{},"d":[5],"e":true},"5":{"w":"25","s":"5","c":{"4":{"w":"254","s":"4","c":{},"d":[9],"e":true}},"d":[8,9],"e":true},"7":{"w":"27","s":"7","c":{},"d":[18,19,20,21],"e":true},"8":{"w":"28","s":"8","c":{},"d":[20],"e":true},"9":{"w":"29","s":"9","c":{},"d":[8,9,10,11,12,13,14,15,16,17,18],"e":true}},"d":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"e":true},"3":{"w":"3","s":"3","c":{"0":{"w":"300","s":"00","c":{},"d":[19],"e":true},"2":{"w":"32","s":"2","c":{},"d":[5,9,10,11,12,13,14,15,16,17,18],"e":true},"3":{"w":"33","s":"3","c":{},"d":[14,19],"e":true},"6":{"w":"36","s":"6","c":{},"d":[1,8],"e":true},"9":{"w":"39","s":"9","c":{},"d":[14],"e":true}},"d":[3,4,5,6,7,8,9,10,11,12,13,14,16,18,19,20,21],"e":true},"4":{"w":"4","s":"4","c":{"0":{"w":"40","s":"0","c":{},"d":[1,11,13],"e":true},"1":{"w":"410700","s":"10700","c":{},"d":[14],"e":true},"5":{"w":"45","s":"5","c":{},"d":[1],"e":true},"7":{"w":"47","s":"7","c":{},"d":[2,3,4,5,6,7],"e":true}},"d":[3,5,6,8,9,11,13,14,20,21],"e":true},"5":{"w":"5","s":"5","c":{"0":{"w":"50","s":"0","c":{"0":{"w":"5000","s":"00","c":{},"d":[3],"e":true}},"d":[13],"e":true},"1":{"w":"51","s":"1","c":{"2":{"w":"512","s":"2","c":{"m":{"w":"512m","s":"m","c":{},"d":[11],"e":true}},"d":[11,12],"e":true}},"d":[11,13],"e":true},"2":{"w":"52","s":"2","c":{},"d":[19],"e":true},"5":{"w":"55","s":"5","c":{},"d":[8,20],"e":true},"6":{"w":"56","s":"6","c":{},"d":[21],"e":true},"8":{"w":"58","s":"8","c":{},"d":[21],"e":true},"9":{"w":"59","s":"9","c":{},"d":[19],"e":true}},"d":[5,8,9,11,12,13,14,18],"e":true},"6":{"w":"6","s":"6","c":{"0":{"w":"60","s":"0","c":{},"d":[11,19],"e":true},"3":{"w":"6379","s":"379","c":{},"d":[3,4],"e":true},"4":{"w":"64","s":"4","c":{},"d":[5,9,11,13,14],"e":true}},"d":[9,12,13,20],"e":true},"7":{"w":"7","s":"7","c":{},"d":[9,11,12,13],"e":true},"8":{"w":"8","s":"8","c":{"1":{"w":"81","s":"1","c":{},"d":[14],"e":true}},"d":[5,9,12,13,14,16,18,20],"e":true},"9":{"w":"9","s":"9","c":{"0":{"w":"900","s":"00","c":{},"d":[19],"e":true},"9":{"w":"99","s":"9","c":{},"d":[11],"e":true}},"d":[12,13,14],"e":true},"n":{"w":"n","s":"n","c":{"o":{"w":"no","s":"o","c":{"t":{"w":"not","s":"t","c":{"e":{"w":"note","s":"e","c":{},"d":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"e":true}},"d":[2,11,13],"e":true},"e":{"w":"noeviction","s":"eviction","c":{},"d":[5],"e":true}},"d":[19],"e":true},"a":{"w":"name","s":"ame","c":{"s":{"w":"names","s":"s","c":{},"d":[13],"e":true}},"d":[2,11,14],"e":true},"x":{"w":"nx","s":"x","c":{},"d":[7,11],"e":true},"e":{"w":"next","s":"ext","c":{},"d":[9,10],"e":true},"u":{"w":"nu","s":"u","c":{"l":{"w":"null","s":"ll","c":{},"d":[9],"e":true},"m":{"w":"number","s":"mber","c":{"k":{"w":"numberkeys","s":"keys","c":{},"d":[13],"e":true}},"d":[11],"e":true}},"d":[],"e":false},"i":{"w":"nil","s":"il","c":{},"d":[14],"e":true}},"d":[3,7,8,9,11,13,17,20],"e":true},"t":{"w":"t","s":"t","c":{"1":{"w":"t1","s":"1","c":{},"d":[7],"e":true},"2":{"w":"t2","s":"2","c":{},"d":[7],"e":true},"i":{"w":"ti","s":"i","c":{"t":{"w":"title","s":"tle","c":{},"d":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"e":true},"m":{"w":"time","s":"me","c":{"o":{"w":"timeout","s":"out","c":{},"d":[11],"e":true}},"d":[5],"e":true}},"d":[],"e":false},"x":{"w":"tx","s":"x","c":{},"d":[2],"e":true},"y":{"w":"type","s":"ype","c":{"d":{"w":"typedef","s":"def","c":{},"d":[5,8,9,10],"e":true}},"d":[3],"e":true},"h":{"w":"th","s":"h","c":{"e":{"w":"then","s":"en","c":{},"d":[7,11],"e":true},"r":{"w":"thread","s":"read","c":{},"d":[17],"e":true}},"d":[],"e":false},"t":{"w":"ttl","s":"tl","c":{},"d":[8,11],"e":true},"a":{"w":"tail","s":"ail","c":{},"d":[9,10],"e":true},"o":{"w":"to","s":"o","c":{"m":{"w":"tom","s":"m","c":{},"d":[11,12],"e":true},"u":{"w":"toumas","s":"umas","c":{},"d":[13],"e":true}},"d":[],"e":false},"c":{"w":"tcp","s":"cp","c":{},"d":[18],"e":true}},"d":[],"e":false},"m":{"w":"m","s":"m","c":{"e":{"w":"me","s":"e","c":{"t":{"w":"metadata","s":"tadata","c":{},"d":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"e":true},"m":{"w":"mem","s":"m","c":{"o":{"w":"memory","s":"ory","c":{"u":{"w":"memoryusage","s":"usage","c":{},"d":[3],"e":true}},"d":[3],"e":true},"c":{"w":"memcached","s":"cached","c":{},"d":[6],"e":true},"b":{"w":"member","s":"ber","c":{"1":{"w":"member1","s":"1","c":{},"d":[14],"e":true},"2":{"w":"member2","s":"2","c":{},"d":[14],"e":true}},"d":[12,13,14],"e":true}},"d":[],"e":false},"e":{"w":"meet","s":"et","c":{},"d":[4],"e":true},"r":{"w":"merber","s":"rber","c":{},"d":[12],"e":true}},"d":[],"e":false},"o":{"w":"mo","s":"o","c":{"d":{"w":"modified","s":"dified","c":{},"d":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"e":true},"n":{"w":"monitor","s":"nitor","c":{},"d":[16],"e":true}},"d":[],"e":false},"u":{"w":"multi","s":"ulti","c":{},"d":[2],"e":true},"i":{"w":"mi","s":"i","c":{"n":{"w":"min","s":"n","c":{"-":{"w":"min-slaves-","s":"-slaves-","c":{"t":{"w":"min-slaves-to-write","s":"to-write","c":{},"d":[4],"e":true},"m":{"w":"min-slaves-max-lag","s":"max-lag","c":{},"d":[4],"e":true}},"d":[],"e":false}},"d":[13],"e":true}},"d":[14],"e":true},"a":{"w":"ma","s":"a","c":{"x":{"w":"max","s":"x","c":{"m":{"w":"maxmemory","s":"memory","c":{"-":{"w":"maxmemory-policy","s":"-policy","c":{},"d":[5],"e":true}},"d":[5],"e":true}},"d":[13],"e":true},"t":{"w":"match","s":"tch","c":{},"d":[9],"e":true},"r":{"w":"mar","s":"r","c":{"r":{"w":"marry","s":"ry","c":{},"d":[12],"e":true},"k":{"w":"mark","s":"k","c":{},"d":[12],"e":true}},"d":[],"e":false},"s":{"w":"master","s":"ster","c":{"-":{"w":"master-name","s":"-name","c":{},"d":[16],"e":true},"_":{"w":"master_repl_offset","s":"_repl_offset","c":{},"d":[18],"e":true}},"d":[16],"e":true}},"d":[],"e":false},"s":{"w":"ms","s":"s","c":{"e":{"w":"mset","s":"et","c":{},"d":[11],"e":true}},"d":[8],"e":true},"g":{"w":"mget","s":"get","c":{},"d":[11],"e":true},"q":{"w":"mq","s":"q","c":{},"d":[11],"e":true},"y":{"w":"my","s":"y","c":{"m":{"w":"mymq","s":"mq","c":{},"d":[14],"e":true},"s":{"w":"mysql","s":"sql","c":{},"d":[17],"e":true}},"d":[],"e":false}},"d":[14],"e":true},"c":{"w":"c","s":"c","c":{"r":{"w":"cr","s":"r","c":{"e":{"w":"create","s":"eate","c":{"d":{"w":"created","s":"d","c":{},"d":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"e":true}},"d":[4,14],"e":true},"c":{"w":"crc16","s":"c16","c":{},"d":[4],"e":true}},"d":[],"e":false},"o":{"w":"co","s":"o","c":{"n":{"w":"con","s":"n","c":{"t":{"w":"cont","s":"t","c":{"e":{"w":"content","s":"ent","c":{"s":{"w":"contents","s":"s","c":{},"d":[9],"e":true}},"d":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"e":true},"'":{"w":"cont'd","s":"'d","c":{},"d":[10,12,13,14],"e":true},"i":{"w":"continue","s":"inue","c":{},"d":[18],"e":true}},"d":[],"e":false},"f":{"w":"conf","s":"f","c":{"i":{"w":"config","s":"ig","c":{},"d":[5],"e":true}},"d":[5,8,19],"e":true},"s":{"w":"consumer","s":"sumer","c":{"1":{"w":"consumer1","s":"1","c":{},"d":[14],"e":true},"2":{"w":"consumer2","s":"2","c":{},"d":[14],"e":true},"3":{"w":"consumer3","s":"3","c":{},"d":[14],"e":true}},"d":[],"e":false}},"d":[],"e":false},"u":{"w":"count","s":"unt","c":{"e":{"w":"counter","s":"er","c":{},"d":[5],"e":true}},"d":[2,10,12,13,14],"e":true},"p":{"w":"copy","s":"py","c":{},"d":[19],"e":true}},"d":[],"e":false},"p":{"w":"cpu","s":"pu","c":{},"d":[1,8,19],"e":true},"s":{"w":"csv","s":"sv","c":{},"d":[3],"e":true},"l":{"w":"cluster","s":"luster","c":{},"d":[4],"e":true},"a":{"w":"ca","s":"a","c":{"l":{"w":"call","s":"ll","c":{},"d":[7,11],"e":true},"r":{"w":"car","s":"r","c":{"t":{"w":"cart","s":"t","c":{},"d":[11],"e":true},"s":{"w":"cars","s":"s","c":{},"d":[14],"e":true}},"d":[],"e":false},"c":{"w":"cache","s":"che","c":{},"d":[17,19],"e":true},"n":{"w":"canal","s":"nal","c":{},"d":[17],"e":true}},"d":[],"e":false},"h":{"w":"char","s":"har","c":{},"d":[10],"e":true}},"d":[5,8,9,10,13],"e":true},"b":{"w":"b","s":"b","c":{"l":{"w":"bl","s":"l","c":{"o":{"w":"block","s":"ock","c":{},"d":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"e":true},"p":{"w":"blpop","s":"pop","c":{},"d":[11],"e":true},"u":{"w":"bluetuo","s":"uetuo","c":{},"d":[13],"e":true}},"d":[],"e":false},"i":{"w":"bi","s":"i","c":{"g":{"w":"big","s":"g","c":{"k":{"w":"bigkey","s":"key","c":{},"d":[3],"e":true},"l":{"w":"biglog","s":"log","c":{},"d":[17],"e":true}},"d":[],"e":false},"t":{"w":"bit","s":"t","c":{"s":{"w":"bits","s":"s","c":{},"d":[5],"e":true},"m":{"w":"bitmap","s":"map","c":{},"d":[13],"e":true},"c":{"w":"bitcount","s":"count","c":{},"d":[13],"e":true},"o":{"w":"bitop","s":"op","c":{},"d":[13],"e":true},"p":{"w":"bitpos","s":"pos","c":{},"d":[13],"e":true}},"d":[4,5,13],"e":true},"n":{"w":"binlog","s":"nlog","c":{},"d":[17],"e":true}},"d":[],"e":false},"y":{"w":"bytes","s":"ytes","c":{},"d":[5],"e":true},"u":{"w":"buf","s":"uf","c":{"f":{"w":"buffer","s":"fer","c":{},"d":[18],"e":true}},"d":[9],"e":true},"g":{"w":"bg","s":"g","c":{"s":{"w":"bgsave","s":"save","c":{},"d":[9,18,19],"e":true},"r":{"w":"bgrewriteaof","s":"rewriteaof","c":{},"d":[9,19],"e":true}},"d":[],"e":false},"a":{"w":"backward","s":"ackward","c":{},"d":[9],"e":true},"r":{"w":"brpop","s":"rpop","c":{"l":{"w":"brpoplpush","s":"lpush","c":{},"d":[11],"e":true}},"d":[11,14],"e":true}},"d":[13,18],"e":true},"p":{"w":"p","s":"p","c":{"i":{"w":"pi","s":"i","c":{"p":{"w":"pipeline","s":"peline","c":{},"d":[2],"e":true},"n":{"w":"ping","s":"ng","c":{},"d":[16],"e":true}},"d":[],"e":false},"a":{"w":"pa","s":"a","c":{"s":{"w":"password","s":"ssword","c":{},"d":[3],"e":true},"c":{"w":"packed","s":"cked","c":{},"d":[9],"e":true},"g":{"w":"page","s":"ge","c":{"1":{"w":"page1","s":"1","c":{},"d":[14],"e":true}},"d":[19],"e":true}},"d":[],"e":false},"o":{"w":"pop","s":"op","c":{},"d":[3],"e":true},"x":{"w":"px","s":"x","c":{},"d":[7,8,11],"e":true},"e":{"w":"pe","s":"e","c":{"x":{"w":"pexpire","s":"xpire","c":{"a":{"w":"pexpireat","s":"at","c":{},"d":[8],"e":true}},"d":[8],"e":true},"r":{"w":"persist","s":"rsist","c":{},"d":[8],"e":true},"n":{"w":"pending","s":"nding","c":{},"d":[14],"e":true}},"d":[],"e":false},"r":{"w":"prev","s":"rev","c":{"l":{"w":"prevlen","s":"len","c":{},"d":[9],"e":true}},"d":[9,10],"e":true},"t":{"w":"ptr","s":"tr","c":{},"d":[9],"e":true},"h":{"w":"phone","s":"hone","c":{},"d":[13],"e":true},"f":{"w":"pf","s":"f","c":{"a":{"w":"pfadd","s":"add","c":{},"d":[14],"e":true},"c":{"w":"pfcount","s":"count","c":{},"d":[14],"e":true},"m":{"w":"pfmerge","s":"merge","c":{},"d":[14],"e":true}},"d":[],"e":false},"s":{"w":"psync","s":"sync","c":{},"d":[18],"e":true}},"d":[],"e":false},"r":{"w":"r","s":"r","c":{"e":{"w":"re","s":"e","c":{"d":{"w":"red","s":"d","c":{"i":{"w":"redis","s":"is","c":{"4":{"w":"redis4","s":"4","c":{},"d":[19],"e":true},"-":{"w":"redis-","s":"-","c":{"c":{"w":"redis-cli","s":"cli","c":{},"d":[3,4],"e":true},"p":{"w":"redis-port","s":"port","c":{},"d":[16],"e":true}},"d":[],"e":false},"o":{"w":"redisobject","s":"object","c":{},"d":[5],"e":true},"d":{"w":"redisdb","s":"db","c":{},"d":[8],"e":true}},"d":[2,3,4,5,6,7,8,9,11,12,13,14,16,17,18,19,21],"e":true},"l":{"w":"redlock","s":"lock","c":{},"d":[7],"e":true}},"d":[],"e":false},"c":{"w":"recently","s":"cently","c":{},"d":[5],"e":true},"t":{"w":"return","s":"turn","c":{},"d":[7,8,11],"e":true},"h":{"w":"rehash","s":"hash","c":{},"d":[9],"e":true},"a":{"w":"readcount","s":"adcount","c":{},"d":[11],"e":true},"s":{"w":"result","s":"sult","c":{},"d":[13],"e":true},"p":{"w":"repl","s":"pl","c":{"i":{"w":"replica","s":"ica","c":{"o":{"w":"replicaof","s":"of","c":{},"d":[18],"e":true},"t":{"w":"replication","s":"tion","c":{},"d":[18],"e":true}},"d":[],"e":false},"_":{"w":"repl_backlog_buffer","s":"_backlog_buffer","c":{},"d":[18],"e":true},"-":{"w":"repl-backlog-buffer","s":"-backlog-buffer","c":{},"d":[18],"e":true}},"d":[],"e":false}},"d":[],"e":false},"a":{"w":"ra","s":"a","c":{"n":{"w":"ran","s":"n","c":{"g":{"w":"range","s":"ge","c":{},"d":[2],"e":true},"k":{"w":"ranking","s":"king","c":{},"d":[13],"e":true}},"d":[],"e":false},"w":{"w":"raw","s":"w","c":{},"d":[11],"e":true},"d":{"w":"radius","s":"dius","c":{},"d":[14],"e":true},"b":{"w":"rabbitmq","s":"bbitmq","c":{},"d":[14],"e":true}},"d":[],"e":false},"d":{"w":"rdb","s":"db","c":{"t":{"w":"rdbtools","s":"tools","c":{},"d":[3],"e":true}},"d":[3,8,9,18,19],"e":true},"o":{"w":"robj","s":"obj","c":{},"d":[5,8],"e":true},"p":{"w":"rp","s":"p","c":{"u":{"w":"rpush","s":"ush","c":{},"d":[11],"e":true},"o":{"w":"rpop","s":"op","c":{},"d":[11],"e":true}},"d":[],"e":false},"u":{"w":"runid","s":"unid","c":{},"d":[18],"e":true}},"d":[],"e":false},"d":{"w":"d","s":"d","c":{"i":{"w":"di","s":"i","c":{"s":{"w":"discard","s":"scard","c":{},"d":[2],"e":true},"c":{"w":"dict","s":"ct","c":{},"d":[8],"e":true}},"d":[],"e":false},"e":{"w":"de","s":"e","c":{"c":{"w":"decr","s":"cr","c":{"e":{"w":"decrement","s":"ement","c":{},"d":[5],"e":true},"b":{"w":"decrby","s":"by","c":{},"d":[11],"e":true}},"d":[2,11],"e":true},"l":{"w":"del","s":"l","c":{"k":{"w":"delkey","s":"key","c":{},"d":[17],"e":true}},"d":[3,7,8,11],"e":true},"s":{"w":"des","s":"s","c":{"t":{"w":"dest","s":"t","c":{"i":{"w":"destination","s":"ination","c":{},"d":[12],"e":true},"k":{"w":"destkey","s":"key","c":{},"d":[13,14],"e":true},"m":{"w":"destmap","s":"map","c":{},"d":[13],"e":true}},"d":[],"e":false},"c":{"w":"desc","s":"c","c":{},"d":[14],"e":true}},"d":[],"e":false}},"d":[],"e":false},"u":{"w":"du","s":"u","c":{"m":{"w":"dump","s":"mp","c":{},"d":[3,17],"e":true},"p":{"w":"dup","s":"p","c":{},"d":[9],"e":true}},"d":[],"e":false},"b":{"w":"db","s":"b","c":{"a":{"w":"dbasyncdelete","s":"asyncdelete","c":{},"d":[8],"e":true},"s":{"w":"dbsyncdelete","s":"syncdelete","c":{},"d":[8],"e":true}},"d":[8,17],"e":true},"a":{"w":"data","s":"ata","c":{"b":{"w":"database","s":"base","c":{},"d":[8],"e":true}},"d":[9,10],"e":true},"o":{"w":"do","s":"o","c":{"u":{"w":"double","s":"uble","c":{},"d":[9],"e":true},"w":{"w":"down-after-milliseconds","s":"wn-after-milliseconds","c":{},"d":[16],"e":true}},"d":[],"e":false}},"d":[],"e":false},"s":{"w":"s","s":"s","c":{"h":{"w":"shell","s":"hell","c":{},"d":[2,3,4,5,7,11,12,13,14,16,17,18,19],"e":true},"e":{"w":"se","s":"e","c":{"t":{"w":"set","s":"t","c":{"e":{"w":"setex","s":"ex","c":{},"d":[8,11],"e":true},"n":{"w":"setnx","s":"nx","c":{},"d":[11],"e":true},"-":{"w":"set-maxinset-entries","s":"-maxinset-entries","c":{},"d":[12],"e":true},"b":{"w":"setbit","s":"bit","c":{},"d":[13],"e":true}},"d":[2,3,6,7,8,9,11,12,13],"e":true},"r":{"w":"server","s":"rver","c":{},"d":[8,19],"e":true},"a":{"w":"sean","s":"an","c":{},"d":[12],"e":true},"n":{"w":"sentinel","s":"ntinel","c":{},"d":[16],"e":true},"c":{"w":"second","s":"cond","c":{},"d":[18],"e":true}},"d":[],"e":false},"t":{"w":"st","s":"t","c":{"r":{"w":"str","s":"r","c":{"i":{"w":"string","s":"ing","c":{},"d":[3,6,9,11,13],"e":true},"l":{"w":"strlen","s":"len","c":{},"d":[3,11],"e":true},"u":{"w":"struct","s":"uct","c":{},"d":[5,8,9,10],"e":true},"e":{"w":"stream","s":"eam","c":{},"d":[11,14],"e":true}},"d":[],"e":false},"a":{"w":"start","s":"art","c":{},"d":[11,13],"e":true},"o":{"w":"sto","s":"o","c":{"p":{"w":"stop","s":"p","c":{},"d":[11,13],"e":true},"c":{"w":"stock","s":"ck","c":{},"d":[11],"e":true},"r":{"w":"store","s":"re","c":{"d":{"w":"storedist","s":"dist","c":{},"d":[14],"e":true}},"d":[14],"e":true}},"d":[],"e":false}},"d":[],"e":false},"c":{"w":"sc","s":"c","c":{"a":{"w":"sca","s":"a","c":{"n":{"w":"scan","s":"n","c":{},"d":[3],"e":true},"r":{"w":"scard","s":"rd","c":{},"d":[3,12],"e":true}},"d":[],"e":false},"o":{"w":"score","s":"ore","c":{},"d":[9,13],"e":true}},"d":[],"e":false},"r":{"w":"sr","s":"r","c":{"a":{"w":"srandmember","s":"andmember","c":{},"d":[3,12],"e":true},"e":{"w":"srem","s":"em","c":{},"d":[12],"e":true}},"d":[],"e":false},"l":{"w":"sl","s":"l","c":{"o":{"w":"slot","s":"ot","c":{},"d":[4],"e":true},"a":{"w":"slave","s":"ave","c":{"o":{"w":"slaveof","s":"of","c":{},"d":[18],"e":true},"_":{"w":"slave_repl_offset","s":"_repl_offset","c":{},"d":[18],"e":true}},"d":[16],"e":true},"e":{"w":"sleep","s":"eep","c":{},"d":[17],"e":true}},"d":[],"e":false},"d":{"w":"sd","s":"d","c":{"s":{"w":"sds","s":"s","c":{"h":{"w":"sdshdr","s":"hdr","c":{"1":{"w":"sdshdr16","s":"16","c":{},"d":[9],"e":true},"3":{"w":"sdshdr32","s":"32","c":{},"d":[9],"e":true},"5":{"w":"sdshdr5","s":"5","c":{},"d":[9],"e":true},"6":{"w":"sdshdr64","s":"64","c":{},"d":[9],"e":true},"8":{"w":"sdshdr8","s":"8","c":{},"d":[9],"e":true}},"d":[9],"e":true}},"d":[9,11],"e":true},"i":{"w":"sdiff","s":"iff","c":{"s":{"w":"sdiffstore","s":"store","c":{},"d":[12],"e":true}},"d":[12],"e":true}},"d":[],"e":false},"p":{"w":"sp","s":"p","c":{"a":{"w":"span","s":"an","c":{},"d":[9],"e":true},"o":{"w":"spop","s":"op","c":{},"d":[12],"e":true}},"d":[],"e":false},"z":{"w":"sz","s":"z","c":{},"d":[10],"e":true},"a":{"w":"sa","s":"a","c":{"d":{"w":"sadd","s":"dd","c":{},"d":[12],"e":true},"r":{"w":"sary","s":"ry","c":{},"d":[12],"e":true},"v":{"w":"save","s":"ve","c":{},"d":[19],"e":true}},"d":[],"e":false},"m":{"w":"smembers","s":"members","c":{},"d":[12],"e":true},"i":{"w":"si","s":"i","c":{"s":{"w":"sismember","s":"smember","c":{},"d":[12],"e":true},"n":{"w":"sinter","s":"nter","c":{"s":{"w":"sinterstore","s":"store","c":{},"d":[12],"e":true}},"d":[12],"e":true},"g":{"w":"sign","s":"gn","c":{},"d":[13],"e":true}},"d":[],"e":false},"u":{"w":"sunion","s":"union","c":{"s":{"w":"sunionstore","s":"store","c":{},"d":[12],"e":true}},"d":[12],"e":true},"o":{"w":"sourcekey","s":"ourcekey","c":{},"d":[14],"e":true}},"d":[],"e":false},"g":{"w":"g","s":"g","c":{"e":{"w":"ge","s":"e","c":{"t":{"w":"get","s":"t","c":{"b":{"w":"getbit","s":"bit","c":{},"d":[13],"e":true}},"d":[2,5,7,11],"e":true},"o":{"w":"geo","s":"o","c":{"h":{"w":"geohash","s":"hash","c":{},"d":[14],"e":true},"a":{"w":"geoadd","s":"add","c":{},"d":[14],"e":true},"p":{"w":"geopos","s":"pos","c":{},"d":[14],"e":true},"d":{"w":"geodist","s":"dist","c":{},"d":[14],"e":true},"r":{"w":"georadius","s":"radius","c":{},"d":[14],"e":true}},"d":[14],"e":true}},"d":[],"e":false},"b":{"w":"gb","s":"b","c":{},"d":[5],"e":true},"a":{"w":"gaodeng","s":"aodeng","c":{},"d":[13],"e":true},"r":{"w":"group","s":"roup","c":{"1":{"w":"group1","s":"1","c":{},"d":[14],"e":true},"2":{"w":"group2","s":"2","c":{},"d":[14],"e":true}},"d":[14],"e":true}},"d":[5],"e":true},"o":{"w":"o","s":"o","c":{"k":{"w":"ok","s":"k","c":{},"d":[2,11,14],"e":true},"r":{"w":"or","s":"r","c":{},"d":[2,13],"e":true},"u":{"w":"out","s":"ut","c":{},"d":[2],"e":true},"f":{"w":"of","s":"f","c":{"f":{"w":"offset","s":"fset","c":{},"d":[13,18],"e":true}},"d":[2],"e":true},"b":{"w":"obj","s":"bj","c":{},"d":[8],"e":true},"n":{"w":"on","s":"n","c":{"l":{"w":"only","s":"ly","c":{},"d":[8,19],"e":true}},"d":[19],"e":true},"p":{"w":"operations","s":"perations","c":{},"d":[13],"e":true},"o":{"w":"oom","s":"om","c":{},"d":[14],"e":true}},"d":[9],"e":true},"q":{"w":"qu","s":"qu","c":{"e":{"w":"queued","s":"eued","c":{},"d":[2],"e":true},"i":{"w":"quicklist","s":"icklist","c":{"n":{"w":"quicklistnode","s":"node","c":{},"d":[10],"e":true}},"d":[9,10,11],"e":true},"o":{"w":"quorum","s":"orum","c":{},"d":[16],"e":true}},"d":[],"e":false},"x":{"w":"x","s":"x","c":{"i":{"w":"xiao","s":"iao","c":{"l":{"w":"xiaolin","s":"lin","c":{"c":{"w":"xiaolincoding","s":"coding","c":{},"d":[2],"e":true}},"d":[2,11,13,14],"e":true},"m":{"w":"xiaomei","s":"mei","c":{},"d":[11],"e":true}},"d":[],"e":false},"o":{"w":"xor","s":"or","c":{},"d":[13],"e":true},"a":{"w":"xa","s":"a","c":{"d":{"w":"xadd","s":"dd","c":{},"d":[14],"e":true},"c":{"w":"xack","s":"ck","c":{},"d":[14],"e":true}},"d":[],"e":false},"r":{"w":"xread","s":"read","c":{"g":{"w":"xreadgroup","s":"group","c":{},"d":[14],"e":true}},"d":[14],"e":true},"p":{"w":"xpending","s":"pending","c":{},"d":[14],"e":true},"g":{"w":"xgroup","s":"group","c":{},"d":[14],"e":true}},"d":[4,17,20],"e":true},"e":{"w":"e","s":"e","c":{"x":{"w":"ex","s":"x","c":{"p":{"w":"expire","s":"pire","c":{"a":{"w":"expireat","s":"at","c":{},"d":[8],"e":true},"s":{"w":"expires","s":"s","c":{},"d":[8],"e":true},"i":{"w":"expireifneeded","s":"ifneeded","c":{},"d":[8],"e":true}},"d":[2,8,11],"e":true},"e":{"w":"exec","s":"ec","c":{},"d":[2],"e":true},"i":{"w":"exists","s":"ists","c":{},"d":[11],"e":true}},"d":[7,8,11],"e":true},"r":{"w":"err","s":"rr","c":{"o":{"w":"error","s":"or","c":{},"d":[2],"e":true}},"d":[2],"e":true},"l":{"w":"el","s":"l","c":{"s":{"w":"else","s":"se","c":{},"d":[7,11],"e":true},"e":{"w":"ele","s":"e","c":{"m":{"w":"element","s":"ment","c":{},"d":[14],"e":true}},"d":[9],"e":true}},"d":[],"e":false},"n":{"w":"en","s":"n","c":{"d":{"w":"end","s":"d","c":{},"d":[7,11,13],"e":true},"t":{"w":"entry","s":"try","c":{},"d":[9],"e":true},"c":{"w":"encoding","s":"coding","c":{},"d":[9,10],"e":true}},"d":[],"e":false},"m":{"w":"embstr","s":"mbstr","c":{},"d":[11],"e":true},"v":{"w":"everysec","s":"verysec","c":{},"d":[19],"e":true}},"d":[],"e":false},"v":{"w":"v","s":"v","c":{"a":{"w":"value","s":"alue","c":{"1":{"w":"value1","s":"1","c":{},"d":[11],"e":true},"2":{"w":"value2","s":"2","c":{},"d":[11],"e":true}},"d":[2,3,8,9,11,12,13],"e":true},"o":{"w":"vo","s":"o","c":{"l":{"w":"volatile-","s":"latile-","c":{"r":{"w":"volatile-random","s":"random","c":{},"d":[5],"e":true},"t":{"w":"volatile-ttl","s":"ttl","c":{},"d":[5],"e":true},"l":{"w":"volatile-l","s":"l","c":{"r":{"w":"volatile-lru","s":"ru","c":{},"d":[5],"e":true},"f":{"w":"volatile-lfu","s":"fu","c":{},"d":[5],"e":true}},"d":[],"e":false}},"d":[],"e":false},"i":{"w":"void","s":"id","c":{},"d":[9],"e":true}},"d":[],"e":false}},"d":[],"e":false},"i":{"w":"i","s":"i","c":{"s":{"w":"is","s":"s","c":{},"d":[2],"e":true},"n":{"w":"in","s":"n","c":{"t":{"w":"int","s":"t","c":{"1":{"w":"int16_t","s":"16_t","c":{},"d":[9],"e":true},"3":{"w":"int32_t","s":"32_t","c":{},"d":[9],"e":true},"6":{"w":"int64_t","s":"64_t","c":{},"d":[9],"e":true},"8":{"w":"int8_t","s":"8_t","c":{},"d":[9],"e":true},"e":{"w":"integer","s":"eger","c":{},"d":[2,11,12,13,14],"e":true},"s":{"w":"intset","s":"set","c":{"_":{"w":"intset_enc_int","s":"_enc_int","c":{"1":{"w":"intset_enc_int16","s":"16","c":{},"d":[9],"e":true},"3":{"w":"intset_enc_int32","s":"32","c":{},"d":[9],"e":true},"6":{"w":"intset_enc_int64","s":"64","c":{},"d":[9],"e":true}},"d":[],"e":false}},"d":[9],"e":true}},"d":[8,9,10,11],"e":true},"c":{"w":"incr","s":"cr","c":{"b":{"w":"incrby","s":"by","c":{},"d":[11],"e":true},"e":{"w":"increment","s":"ement","c":{},"d":[13],"e":true}},"d":[11],"e":true},"f":{"w":"info","s":"fo","c":{},"d":[16],"e":true}},"d":[],"e":false},"f":{"w":"if","s":"f","c":{},"d":[7,8,11],"e":true},"m":{"w":"im","s":"m","c":{"g":{"w":"img","s":"g","c":{},"d":[9,10,17,18,19,20,21],"e":true},"a":{"w":"images","s":"ages","c":{},"d":[9,10,17,18,19,20,21],"e":true}},"d":[],"e":false},"d":{"w":"id","s":"d","c":{},"d":[11,12,13,14,16,18],"e":true},"p":{"w":"ip","s":"p","c":{},"d":[16,18],"e":true}},"d":[],"e":false},"a":{"w":"a","s":"a","c":{"n":{"w":"an","s":"n","c":{"d":{"w":"and","s":"d","c":{},"d":[13],"e":true}},"d":[2],"e":true},"d":{"w":"addslots","s":"ddslots","c":{},"d":[4],"e":true},"l":{"w":"al","s":"l","c":{"l":{"w":"all","s":"l","c":{"k":{"w":"allkeys-","s":"keys-","c":{"r":{"w":"allkeys-random","s":"random","c":{},"d":[5],"e":true},"l":{"w":"allkeys-l","s":"l","c":{"r":{"w":"allkeys-lru","s":"ru","c":{},"d":[5],"e":true},"f":{"w":"allkeys-lfu","s":"fu","c":{},"d":[5],"e":true}},"d":[],"e":false}},"d":[],"e":false},"o":{"w":"alloc","s":"oc","c":{},"d":[9],"e":true}},"d":[],"e":false},"w":{"w":"always","s":"ways","c":{},"d":[19],"e":true}},"d":[],"e":false},"r":{"w":"ar","s":"r","c":{"g":{"w":"argv","s":"gv","c":{},"d":[7,11],"e":true},"t":{"w":"article","s":"ticle","c":{},"d":[11,12,13],"e":true}},"d":[],"e":false},"c":{"w":"active_expire_cycle_lookups_per_loop","s":"ctive_expire_cycle_lookups_per_loop","c":{},"d":[8],"e":true},"o":{"w":"aof","s":"of","c":{"_":{"w":"aof_buf","s":"_buf","c":{},"d":[19],"e":true},"-":{"w":"aof-use-rdb-preamble","s":"-use-rdb-preamble","c":{},"d":[19],"e":true}},"d":[8,9,14,19],"e":true},"p":{"w":"ap","s":"p","c":{"p":{"w":"append","s":"pend","c":{"o":{"w":"appendonly","s":"only","c":{},"d":[19],"e":true},"f":{"w":"appendf","s":"f","c":{"i":{"w":"appendfilename","s":"ilename","c":{},"d":[19],"e":true},"s":{"w":"appendfsync","s":"sync","c":{},"d":[19],"e":true}},"d":[],"e":false}},"d":[8,19],"e":true},"i":{"w":"api","s":"i","c":{},"d":[21],"e":true}},"d":[],"e":false},"s":{"w":"as","s":"s","c":{"c":{"w":"asc","s":"c","c":{"i":{"w":"ascii","s":"ii","c":{},"d":[9],"e":true}},"d":[14],"e":true},"i":{"w":"aside","s":"ide","c":{},"d":[17],"e":true}},"d":[],"e":false},"g":{"w":"age","s":"ge","c":{},"d":[11],"e":true},"i":{"w":"ai","s":"i","c":{"m":{"w":"aimini","s":"mini","c":{},"d":[13],"e":true},"d":{"w":"aidehua","s":"dehua","c":{},"d":[13],"e":true}},"d":[],"e":false}},"d":[13,18],"e":true},"k":{"w":"k","s":"k","c":{"e":{"w":"key","s":"ey","c":{"1":{"w":"key1","s":"1","c":{},"d":[11,13],"e":true},"2":{"w":"key2","s":"2","c":{},"d":[11],"e":true},"-":{"w":"key-value","s":"-value","c":{},"d":[6,9,11],"e":true},"s":{"w":"keys","s":"s","c":{},"d":[7,11],"e":true},"i":{"w":"keyisexpired","s":"isexpired","c":{},"d":[8],"e":true},"n":{"w":"keyn","s":"n","c":{},"d":[13],"e":true}},"d":[3,4,5,7,8,9,11,12,13,14,21],"e":true},"b":{"w":"kb","s":"b","c":{},"d":[3,14],"e":true},"m":{"w":"km","s":"m","c":{},"d":[14],"e":true},"a":{"w":"kafka","s":"afka","c":{},"d":[14],"e":true}},"d":[],"e":false},"h":{"w":"h","s":"h","c":{"a":{"w":"hash","s":"ash","c":{"-":{"w":"hash-max-ziplist-","s":"-max-ziplist-","c":{"e":{"w":"hash-max-ziplist-entries","s":"entries","c":{},"d":[11],"e":true},"v":{"w":"hash-max-ziplist-value","s":"value","c":{},"d":[11],"e":true}},"d":[],"e":false}},"d":[3,4,6,9,11],"e":true},"l":{"w":"hlen","s":"len","c":{},"d":[3,11],"e":true},"s":{"w":"hs","s":"s","c":{"c":{"w":"hscan","s":"can","c":{},"d":[3],"e":true},"e":{"w":"hset","s":"et","c":{},"d":[11],"e":true}},"d":[],"e":false},"z":{"w":"hz","s":"z","c":{},"d":[8],"e":true},"e":{"w":"he","s":"e","c":{"a":{"w":"head","s":"ad","c":{"e":{"w":"header","s":"er","c":{},"d":[9],"e":true}},"d":[9,10],"e":true},"l":{"w":"hello","s":"llo","c":{},"d":[16],"e":true}},"d":[],"e":false},"g":{"w":"hget","s":"get","c":{"a":{"w":"hgetall","s":"all","c":{},"d":[11],"e":true}},"d":[11],"e":true},"m":{"w":"hm","s":"m","c":{"s":{"w":"hmset","s":"set","c":{},"d":[11],"e":true},"g":{"w":"hmget","s":"get","c":{},"d":[11],"e":true}},"d":[],"e":false},"d":{"w":"hdel","s":"del","c":{},"d":[11],"e":true},"i":{"w":"hincrby","s":"incrby","c":{},"d":[11],"e":true},"y":{"w":"hyperloglog","s":"yperloglog","c":{},"d":[14],"e":true}},"d":[],"e":false},"l":{"w":"l","s":"l","c":{"i":{"w":"li","s":"i","c":{"s":{"w":"list","s":"st","c":{"p":{"w":"listpack","s":"pack","c":{"n":{"w":"listpacknode","s":"node","c":{},"d":[10],"e":true}},"d":[9,10,11,13],"e":true},"n":{"w":"listnode","s":"node","c":{},"d":[9],"e":true},"-":{"w":"list-max-ziplist-","s":"-max-ziplist-","c":{"e":{"w":"list-max-ziplist-entries","s":"entries","c":{},"d":[11],"e":true},"v":{"w":"list-max-ziplist-value","s":"value","c":{},"d":[11],"e":true}},"d":[],"e":false}},"d":[3,6,9,11,14],"e":true},"n":{"w":"lin","s":"n","c":{"d":{"w":"lindy","s":"dy","c":{},"d":[12],"e":true}},"d":[11],"e":true},"m":{"w":"limit","s":"mit","c":{},"d":[13],"e":true}},"d":[],"e":false},"l":{"w":"llen","s":"len","c":{},"d":[3],"e":true},"e":{"w":"le","s":"e","c":{"e":{"w":"leeder","s":"eder","c":{},"d":[4],"e":true},"a":{"w":"lea","s":"a","c":{"s":{"w":"least","s":"st","c":{},"d":[5],"e":true},"d":{"w":"leader","s":"der","c":{},"d":[16],"e":true}},"d":[],"e":false},"n":{"w":"len","s":"n","c":{"g":{"w":"length","s":"gth","c":{},"d":[9],"e":true}},"d":[9,10],"e":true},"v":{"w":"level","s":"vel","c":{},"d":[9],"e":true}},"d":[],"e":false},"r":{"w":"lr","s":"r","c":{"u":{"w":"lru","s":"u","c":{},"d":[5],"e":true},"a":{"w":"lrange","s":"ange","c":{},"d":[11],"e":true}},"d":[],"e":false},"f":{"w":"lfu","s":"fu","c":{"-":{"w":"lfu-","s":"-","c":{"d":{"w":"lfu-decay-time","s":"decay-time","c":{},"d":[5],"e":true},"l":{"w":"lfu-log-factor","s":"log-factor","c":{},"d":[5],"e":true}},"d":[],"e":false}},"d":[5],"e":true},"d":{"w":"ldt","s":"dt","c":{},"d":[5],"e":true},"a":{"w":"la","s":"a","c":{"s":{"w":"last","s":"st","c":{},"d":[5],"e":true},"z":{"w":"lazyfree_lazy_expire","s":"zyfree_lazy_expire","c":{},"d":[8],"e":true},"t":{"w":"latitude","s":"titude","c":{},"d":[14],"e":true}},"d":[],"e":false},"o":{"w":"lo","s":"o","c":{"g":{"w":"log","s":"g","c":{"c":{"w":"logc","s":"c","c":{},"d":[5],"e":true},"i":{"w":"logi","s":"i","c":{"s":{"w":"logistic","s":"stic","c":{},"d":[5],"e":true},"n":{"w":"login_status","s":"n_status","c":{},"d":[13],"e":true}},"d":[],"e":false}},"d":[9],"e":true},"c":{"w":"loc","s":"c","c":{"k":{"w":"lock_key","s":"k_key","c":{},"d":[7,11],"e":true},"a":{"w":"locations","s":"ations","c":{},"d":[14],"e":true}},"d":[],"e":false},"n":{"w":"long","s":"ng","c":{"i":{"w":"longitude","s":"itude","c":{},"d":[14],"e":true}},"d":[9,10],"e":true},"a":{"w":"load","s":"ad","c":{},"d":[9],"e":true}},"d":[],"e":false},"u":{"w":"lu","s":"u","c":{"a":{"w":"lua","s":"a","c":{},"d":[6,7,11],"e":true},"c":{"w":"lucky","s":"cky","c":{},"d":[12],"e":true}},"d":[],"e":false},"p":{"w":"lp","s":"p","c":{"u":{"w":"lpush","s":"ush","c":{},"d":[11],"e":true},"o":{"w":"lpop","s":"op","c":{},"d":[11],"e":true}},"d":[],"e":false}},"d":[],"e":false},"z":{"w":"z","s":"z","c":{"1":{"w":"z1","s":"1","c":{},"d":[10],"e":true},"s":{"w":"zs","s":"s","c":{"e":{"w":"zset","s":"et","c":{},"d":[3,6,9,13,14],"e":true},"k":{"w":"zskiplist","s":"kiplist","c":{"n":{"w":"zskiplistnode","s":"node","c":{},"d":[9],"e":true},"l":{"w":"zskiplistlevel","s":"level","c":{},"d":[9],"e":true}},"d":[9],"e":true},"c":{"w":"zscore","s":"core","c":{},"d":[13],"e":true}},"d":[],"e":false},"c":{"w":"zcard","s":"card","c":{},"d":[3,13],"e":true},"r":{"w":"zr","s":"r","c":{"e":{"w":"zre","s":"e","c":{"m":{"w":"zrem","s":"m","c":{"r":{"w":"zremrangebyrank","s":"rangebyrank","c":{},"d":[3],"e":true}},"d":[13],"e":true},"v":{"w":"zrevrange","s":"vrange","c":{"b":{"w":"zrevrangebylex","s":"bylex","c":{},"d":[13],"e":true}},"d":[13],"e":true}},"d":[],"e":false},"a":{"w":"zrange","s":"ange","c":{"b":{"w":"zrangeby","s":"by","c":{"s":{"w":"zrangebyscore","s":"score","c":{},"d":[13],"e":true},"l":{"w":"zrangebylex","s":"lex","c":{},"d":[13],"e":true}},"d":[],"e":false}},"d":[13],"e":true}},"d":[],"e":false},"l":{"w":"zl","s":"l","c":{"b":{"w":"zlbytes","s":"bytes","c":{},"d":[9],"e":true},"t":{"w":"zltail","s":"tail","c":{},"d":[9],"e":true},"l":{"w":"zllen","s":"len","c":{},"d":[9],"e":true},"e":{"w":"zlend","s":"end","c":{},"d":[9],"e":true}},"d":[],"e":false},"a":{"w":"zadd","s":"add","c":{},"d":[13],"e":true},"i":{"w":"zin","s":"in","c":{"c":{"w":"zincrby","s":"crby","c":{},"d":[13],"e":true},"t":{"w":"zinterstore","s":"terstore","c":{},"d":[13],"e":true}},"d":[],"e":false},"u":{"w":"zunionstore","s":"unionstore","c":{},"d":[13],"e":true}},"d":[13],"e":true},"-":{"w":"-","s":"-","c":{"1":{"w":"-1","s":"1","c":{},"d":[11,18],"e":true},"-":{"w":"--b","s":"-b","c":{"i":{"w":"--bigkeys","s":"igkeys","c":{},"d":[3],"e":true},"y":{"w":"--bytes","s":"ytes","c":{},"d":[3],"e":true}},"d":[],"e":false},"h":{"w":"-h","s":"h","c":{},"d":[3,4],"e":true},"p":{"w":"-p","s":"p","c":{},"d":[3,4],"e":true},"a":{"w":"-a","s":"a","c":{},"d":[3],"e":true},"i":{"w":"-i","s":"i","c":{},"d":[3],"e":true},"c":{"w":"-c","s":"c","c":{},"d":[3],"e":true},"f":{"w":"-f","s":"f","c":{},"d":[3],"e":true}},"d":[9,12,13,14],"e":true},"u":{"w":"u","s":"u","c":{"n":{"w":"un","s":"n","c":{"l":{"w":"unlink","s":"link","c":{},"d":[3],"e":true},"s":{"w":"unsigned","s":"signed","c":{},"d":[5,9,10],"e":true},"i":{"w":"unique_value","s":"ique_value","c":{},"d":[7,11],"e":true}},"d":[],"e":false},"s":{"w":"use","s":"se","c":{"d":{"w":"used","s":"d","c":{},"d":[5],"e":true},"r":{"w":"user","s":"r","c":{"1":{"w":"user1","s":"1","c":{},"d":[14],"e":true},"2":{"w":"user2","s":"2","c":{},"d":[14],"e":true},"3":{"w":"user3","s":"3","c":{},"d":[14],"e":true},"4":{"w":"user4","s":"4","c":{},"d":[14],"e":true},"5":{"w":"user5","s":"5","c":{},"d":[14],"e":true},"i":{"w":"userid","s":"id","c":{},"d":[13],"e":true}},"d":[11,13],"e":true}},"d":[],"e":false},"i":{"w":"ui","s":"i","c":{"n":{"w":"uint32_t","s":"nt32_t","c":{},"d":[9],"e":true},"d":{"w":"uid","s":"d","c":{},"d":[11,12,13],"e":true}},"d":[],"e":false},"v":{"w":"uv","s":"v","c":{},"d":[14],"e":true},"p":{"w":"update","s":"pdate","c":{},"d":[17],"e":true}},"d":[],"e":false},"f":{"w":"f","s":"f","c":{"r":{"w":"fre","s":"re","c":{"q":{"w":"frequently","s":"quently","c":{},"d":[5],"e":true},"e":{"w":"free","s":"e","c":{},"d":[9],"e":true}},"d":[],"e":false},"i":{"w":"fi","s":"i","c":{"l":{"w":"file","s":"le","c":{},"d":[8,19],"e":true},"e":{"w":"field","s":"eld","c":{},"d":[11],"e":true}},"d":[],"e":false},"l":{"w":"flags","s":"lags","c":{},"d":[9],"e":true},"a":{"w":"factor","s":"actor","c":{},"d":[9],"e":true},"o":{"w":"for","s":"or","c":{"w":{"w":"forward","s":"ward","c":{},"d":[9],"e":true},"k":{"w":"fork","s":"k","c":{},"d":[18,19],"e":true}},"d":[],"e":false},"t":{"w":"ft","s":"t","c":{},"d":[14],"e":true},"u":{"w":"fullresync","s":"ullresync","c":{},"d":[18],"e":true}},"d":[],"e":false},"w":{"w":"w","s":"w","c":{"e":{"w":"we","s":"e","c":{"b":{"w":"webp","s":"bp","c":{},"d":[9,10,17,18,19,20,21],"e":true},"i":{"w":"weights","s":"ights","c":{},"d":[13],"e":true}},"d":[],"e":false},"i":{"w":"with","s":"ith","c":{"s":{"w":"withscores","s":"scores","c":{},"d":[13],"e":true},"c":{"w":"withcoord","s":"coord","c":{},"d":[14],"e":true},"d":{"w":"withdist","s":"dist","c":{},"d":[14],"e":true},"h":{"w":"withhash","s":"hash","c":{},"d":[14],"e":true}},"d":[],"e":false},"r":{"w":"write","s":"rite","c":{"_":{"w":"write_size_per_second","s":"_size_per_second","c":{},"d":[18],"e":true}},"d":[19],"e":true}},"d":[],"e":false},"_":{"w":"_","s":"_","c":{"a":{"w":"_attribute","s":"attribute","c":{},"d":[9],"e":true},"s":{"w":"_sentinel","s":"sentinel","c":{},"d":[16],"e":true}},"d":[9,16],"e":true},"j":{"w":"j","s":"j","c":{"s":{"w":"json","s":"son","c":{},"d":[11],"e":true},"e":{"w":"jerry","s":"erry","c":{},"d":[11,12],"e":true},"o":{"w":"john","s":"ohn","c":{},"d":[12],"e":true},"a":{"w":"jake","s":"ake","c":{},"d":[13],"e":true}},"d":[],"e":false},"'":{"w":"'","s":"'","c":{},"d":[11],"e":true},"y":{"w":"y","s":"y","c":{"e":{"w":"yes","s":"es","c":{},"d":[19],"e":true}},"d":[20],"e":true}},"d":[],"e":false},"isArray":false},"embeddingModel":{"type":"Radix","node":{"w":"","s":"","c":{"b":{"w":"bge-m3","s":"bge-m3","c":{},"d":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"e":true}},"d":[],"e":false},"isArray":false},"created_at":{"type":"AVL","node":{"root":{"k":1746088925222,"v":[7],"l":{"k":1746088925210,"v":[3],"l":{"k":1746088925201,"v":[1],"l":{"k":0,"v":[],"l":null,"r":null,"h":0},"r":{"k":1746088925206,"v":[2],"l":null,"r":null,"h":0},"h":1},"r":{"k":1746088925217,"v":[5],"l":{"k":1746088925213,"v":[4],"l":null,"r":null,"h":0},"r":{"k":1746088925220,"v":[6],"l":null,"r":null,"h":0},"h":1},"h":2},"r":{"k":1746088925258,"v":[15],"l":{"k":1746088925240,"v":[11],"l":{"k":1746088925232,"v":[9],"l":{"k":1746088925226,"v":[8],"l":null,"r":null,"h":0},"r":{"k":1746088925236,"v":[10],"l":null,"r":null,"h":0},"h":1},"r":{"k":1746088925249,"v":[13],"l":{"k":1746088925245,"v":[12],"l":null,"r":null,"h":0},"r":{"k":1746088925255,"v":[14],"l":null,"r":null,"h":0},"h":1},"h":2},"r":{"k":1746088925267,"v":[19],"l":{"k":1746088925261,"v":[17],"l":{"k":1746088925259,"v":[16],"l":null,"r":null,"h":0},"r":{"k":1746088925264,"v":[18],"l":null,"r":null,"h":0},"h":1},"r":{"k":1746088925268,"v":[20],"l":null,"r":{"k":1746088925969,"v":[21],"l":null,"r":null,"h":0},"h":1},"h":2},"h":3},"h":4}},"isArray":false},"ctime":{"type":"AVL","node":{"root":{"k":1745938517337,"v":[8],"l":{"k":1745932172854,"v":[16],"l":{"k":1745729705916,"v":[20],"l":{"k":0,"v":[],"l":null,"r":{"k":1745723756064,"v":[21],"l":null,"r":null,"h":0},"h":1},"r":{"k":1745744649506,"v":[18],"l":{"k":1745731012764,"v":[19],"l":null,"r":null,"h":0},"r":{"k":1745932172820,"v":[17],"l":null,"r":null,"h":0},"h":1},"h":2},"r":{"k":1745932172879,"v":[11,12,13,14],"l":{"k":1745932172865,"v":[15],"l":null,"r":null,"h":0},"r":{"k":1745932172896,"v":[9,10],"l":null,"r":null,"h":0},"h":1},"h":3},"r":{"k":1746035239741,"v":[4],"l":{"k":1746035239710,"v":[6],"l":{"k":1746035239686,"v":[7],"l":null,"r":null,"h":0},"r":{"k":1746035239726,"v":[5],"l":null,"r":null,"h":0},"h":1},"r":{"k":1746035239768,"v":[2],"l":{"k":1746035239755,"v":[3],"l":null,"r":null,"h":0},"r":{"k":1746088605221,"v":[1],"l":null,"r":null,"h":0},"h":1},"h":2},"h":4}},"isArray":false},"mtime":{"type":"AVL","node":{"root":{"k":1746035239741,"v":[4],"l":{"k":1745932172855,"v":[16],"l":{"k":1745744373394,"v":[19],"l":{"k":1745730868647,"v":[20],"l":{"k":0,"v":[],"l":null,"r":null,"h":0},"r":{"k":1745730958792,"v":[21],"l":null,"r":null,"h":0},"h":1},"r":{"k":1745932172827,"v":[17],"l":null,"r":{"k":1745932172841,"v":[18],"l":null,"r":null,"h":0},"h":1},"h":2},"r":{"k":1745932172896,"v":[9,10],"l":{"k":1745932172865,"v":[15],"l":null,"r":{"k":1745932172880,"v":[11,12,13,14],"l":null,"r":null,"h":0},"h":1},"r":{"k":1746035239711,"v":[6],"l":{"k":1746035239686,"v":[7],"l":null,"r":null,"h":0},"r":{"k":1746035239727,"v":[5],"l":null,"r":null,"h":0},"h":1},"h":2},"h":3},"r":{"k":1746035239768,"v":[2],"l":{"k":1746035239756,"v":[3],"l":null,"r":null,"h":0},"r":{"k":1746088804966,"v":[1],"l":{"k":1746088574718,"v":[8],"l":null,"r":null,"h":0},"r":null,"h":1},"h":2},"h":4}},"isArray":false},"tags":{"type":"Radix","node":{"w":"","s":"","c":{},"d":[],"e":false},"isArray":true},"extension":{"type":"Radix","node":{"w":"","s":"","c":{"m":{"w":"md","s":"md","c":{},"d":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"e":true}},"d":[],"e":false},"isArray":false}},"vectorIndexes":{"embedding":{"size":1024,"vectors":{"4f3e18994be94a3c0594cf9489994047":[0.9999998233688269,[0.006855222396552563,0.012190808542072773,-0.04471081867814064,0.030355384573340416,-0.031040767207741737,-0.053928520530462265,0.00351100810803473,0.054057035595178604,0.03919726237654686,0.03142083063721657,-0.048255596309900284,-0.0349469892680645,0.010019710287451744,0.028538493439555168,0.008401181548833847,0.011536785401403904,0.0002447742153890431,-0.015944385901093483,-0.0028090770356357098,0.021281687542796135,0.02876429632306099,0.027369027957320213,0.03622109442949295,0.036045223474502563,0.010876658372581005,-0.004979135002940893,-0.02816607430577278,-0.0031103352084755898,0.04908353462815285,0.042018454521894455,0.033800747245550156,-0.013947774656116962,0.042978208512067795,-0.007214175071567297,-0.009295160882174969,-0.01555832289159298,-0.021232759580016136,-0.025097114965319633,-0.021275298669934273,-0.027407757937908173,0.02140313759446144,0.0023040540982037783,0.054493099451065063,0.009975734166800976,0.028833141550421715,-0.029585815966129303,0.029879126697778702,-0.03093002550303936,-0.0358690544962883,-0.026207691058516502,-0.04711069166660309,-0.022785883396863937,0.0693020448088646,-0.03293256461620331,-0.017010722309350967,0.05917535722255707,-0.02494373731315136,-0.03126683831214905,-0.0515315905213356,0.027725590392947197,0.007357541471719742,-0.0035102071706205606,-0.02488061413168907,-0.007610055152326822,-0.0015487950295209885,0.039070140570402145,-0.024293815717101097,-0.010611867532134056,-0.02003655396401882,-0.08613338321447372,-0.006784203927963972,0.02077910117805004,-0.009130535647273064,-0.028270890936255455,-0.015509303659200668,-0.016686949878931046,-0.0039093210361897945,-0.0058747571893036366,-0.04736002907156944,-0.03185151889920235,0.00778407696634531,-0.023050455376505852,0.01937166415154934,0.027418149635195732,-0.05600260943174362,-0.0020235960837453604,-0.03499544411897659,0.03856265917420387,0.06953218579292297,-0.02212243154644966,0.019170517101883888,-0.028226792812347412,-0.027628598734736443,-0.05688556656241417,0.04632502421736717,0.007089569233357906,0.01277720183134079,0.008562213741242886,0.1023295521736145,0.0016603405820205808,0.011232597753405571,-0.007348360028117895,0.000739956449251622,0.026535267010331154,0.07058051228523254,0.018231796100735664,0.05261937528848648,0.013323687016963959,-0.019209647551178932,0.00023288850206881762,0.03653107210993767,-0.01454759668558836,-0.02576555125415325,0.01077931560575962,0.005477442871779203,-0.049183908849954605,-0.008382690139114857,-0.02018391713500023,0.0054344795644283295,-0.00024536618730053306,0.020471520721912384,0.05416623502969742,0.06553883105516434,-0.006755711045116186,-0.028193393722176552,0.023522069677710533,-0.03162381798028946,-0.013548361137509346,0.0015031034126877785,0.012462424114346504,-0.0012523040641099215,0.06109923496842384,0.002156689530238509,-0.008750144392251968,-0.017497701570391655,0.004143389407545328,-0.006645687390118837,0.04935764893889427,0.030758647248148918,-0.04826240986585617,0.049393948167562485,0.006115793716162443,-0.018201926723122597,-0.03785121813416481,0.04477619752287865,-0.024097109213471413,0.05163406953215599,0.050355538725852966,-0.0009225557441823184,-0.036556024104356766,-0.014767449349164963,-0.013099726289510727,-0.007281516678631306,0.012218567542731762,-0.03349071368575096,-0.04262872785329819,0.009001745842397213,0.01391218975186348,0.03410296142101288,0.0264910776168108,-0.09362123906612396,-0.029011618345975876,-0.030579637736082077,0.02241285890340805,0.042637914419174194,-0.007479320280253887,0.013384896330535412,-0.008085913024842739,-0.0031006759963929653,-0.005155195016413927,-0.002961263293400407,-0.025531532242894173,0.03131301328539848,0.019287675619125366,0.04852990433573723,0.036704402416944504,0.08791162073612213,-0.0005904596764594316,0.044307224452495575,-0.04284906014800072,-0.06838367134332657,0.0013664142461493611,-0.03533816337585449,-0.030178505927324295,-0.031215719878673553,0.009970257058739662,0.004770957864820957,-0.005322521552443504,-0.005008277483284473,0.0251366775482893,-0.02592633105814457,-0.005749539937824011,0.023075444623827934,0.042650241404771805,0.0286041758954525,-0.0100327730178833,0.011065922677516937,0.01599554531276226,-0.0017716502770781517,-0.016107918694615364,-0.007854084484279156,0.01741897128522396,0.017467711120843887,0.003003834979608655,-0.02434658259153366,-0.007726900279521942,-0.05782683938741684,-0.0471126027405262,0.004532851744443178,-0.008894281461834908,0.030394969508051872,-0.026809023693203926,-0.04626532644033432,0.03387592360377312,-0.03988911956548691,0.015116159804165363,0.0021443560253828764,0.012494022957980633,0.035336509346961975,-0.031320538371801376,0.009252374060451984,0.04431544989347458,-0.03730236366391182,0.005144636612385511,0.025309106335043907,0.018117865547537804,0.012083684094250202,0.01629708521068096,-0.010772064328193665,0.005118673201650381,-0.019679974764585495,0.04692555591464043,0.031279630959033966,0.010581656359136105,0.048625439405441284,-0.054514337331056595,-0.05061541870236397,0.04936690255999565,0.013385562226176262,0.015392723493278027,-0.05069733038544655,-0.0389874242246151,-0.011978279799222946,0.014012935571372509,-0.03444639593362808,0.024280721321702003,-0.008975974284112453,-0.0016807399224489927,-0.006581998895853758,-0.027267785742878914,0.009635238908231258,-0.018296731635928154,-0.02882486581802368,-0.06217113509774208,0.016199737787246704,-0.026630092412233353,0.028363768011331558,-0.007975508458912373,0.011754455976188183,-0.009754717350006104,0.012700998224318027,0.03529883921146393,0.029013514518737793,0.026355305686593056,-0.0066217901185154915,-0.014239377342164516,0.020243719220161438,-0.05024893581867218,0.02491929568350315,0.005337533541023731,-0.023403596132993698,0.016425209119915962,0.004199282266199589,0.007495903875678778,0.0018237725598737597,-0.0038199438713490963,-0.016067326068878174,0.005165710113942623,0.08228601515293121,0.04331595450639725,-0.019163673743605614,0.03258503973484039,0.029951386153697968,0.01579451933503151,0.03198276460170746,-0.04068702459335327,0.00713385920971632,0.036932457238435745,-0.0129926186054945,-0.030354300513863564,0.02803962677717209,0.0006407950422726572,0.08368361741304398,0.002631607698276639,-0.03858359903097153,-0.036438874900341034,0.015288862399756908,-0.16360940039157867,0.0035137038212269545,-0.007225478067994118,-0.014416921883821487,-0.007732153870165348,-0.018985336646437645,-0.051428887993097305,0.02182832732796669,-0.03908541053533554,0.04682303965091705,0.00402772706001997,-0.03803422674536705,-0.015320527367293835,-0.041909653693437576,0.00906924158334732,0.004234448540955782,0.011835633777081966,0.01913522370159626,0.064993716776371,-0.04677291586995125,-0.04375527799129486,-0.04425544664263725,0.01953211799263954,-0.0042059593833982944,-0.013263324275612831,-0.006973509211093187,0.041937701404094696,0.008034336380660534,-0.022419890388846397,-0.013473156839609146,0.008209398947656155,0.021848157048225403,0.0002505593001842499,-0.0030735789332538843,-0.019388673827052116,-0.011321647092700005,0.0346207395195961,-0.058387964963912964,-0.008599952794611454,-0.032682694494724274,0.020550254732370377,0.0311431922018528,0.018315868452191353,0.005732446443289518,0.026349656283855438,0.054687049239873886,-0.019020259380340576,-0.035362813621759415,-0.0035137957893311977,-0.009019250981509686,0.03146892786026001,-0.021974174305796623,0.005702400114387274,-0.01981765776872635,-0.041829437017440796,-0.012808175757527351,0.037914060056209564,0.026037227362394333,0.020733144134283066,-0.03170595318078995,0.02583741582930088,0.010639555752277374,0.05693090707063675,0.020314764231443405,-0.007308391388505697,0.007067036349326372,0.02852402999997139,-0.021433254703879356,0.012525896541774273,-0.06745284795761108,0.02336973138153553,0.010320666246116161,0.01882125809788704,0.040993306785821915,-0.03427644819021225,0.009944120422005653,-0.03087485022842884,-0.030106021091341972,-0.01231700461357832,-0.09496726840734482,0.006867735646665096,0.004430994391441345,-0.016242757439613342,0.043080635368824005,0.013393716886639595,0.03643010929226875,0.0014903085539117455,0.020484361797571182,0.04481109604239464,0.22079314291477203,0.03914183750748634,-0.01849929802119732,-0.03871897980570793,0.048757124692201614,-0.008038016967475414,0.03613465651869774,0.03986796736717224,-0.0021278441417962313,-0.030264727771282196,-0.019219180569052696,-0.02503346838057041,-0.012902306392788887,0.010740965604782104,0.005897894501686096,0.01157342828810215,-0.02485836297273636,0.024385271593928337,0.031083758920431137,-0.010107799433171749,0.04322962090373039,-0.01958395354449749,0.01797136478126049,0.09290286153554916,-0.019315142184495926,-0.011704077944159508,-0.0064935279078781605,0.053540099412202835,-0.08612407743930817,0.028448225930333138,-0.015514781698584557,-0.0118704903870821,0.024331379681825638,-0.07281727343797684,-0.05585383251309395,0.021746063604950905,0.016018526628613472,0.00016227105516009033,0.0035836147144436836,0.045531731098890305,0.023886842653155327,-0.020072774961590767,0.029160045087337494,0.01708836294710636,-0.041221726685762405,-0.015567426569759846,-0.032163139432668686,0.01118681114166975,0.010513702407479286,0.011335591785609722,-0.07985569536685944,-0.004984539933502674,0.005280487239360809,-0.01613585278391838,-0.004462510347366333,-0.06905431300401688,-0.04368449002504349,-0.009694858454167843,0.01321058627218008,0.06034291908144951,-0.007725690025836229,-0.00290665659122169,-0.01780678704380989,0.04221345856785774,-0.01494649238884449,0.01304224319756031,0.023286810144782066,-0.016156423836946487,0.027001164853572845,0.06125223636627197,0.011217020452022552,0.03969601169228554,0.015008178539574146,-0.04667583107948303,0.03223120793700218,0.010346801951527596,0.03310174122452736,0.036282144486904144,-0.024091385304927826,0.040317434817552567,-0.003023456549271941,-0.011739293113350868,-0.002117250580340624,0.03540977090597153,0.01764320209622383,0.015260512009263039,-0.013619004748761654,0.059523772448301315,-0.025149747729301453,-0.07015538215637207,-0.0035734414122998714,0.0032627000473439693,-0.014685926027595997,0.017965108156204224,0.057196617126464844,0.014575597830116749,0.03198329731822014,-0.04272126033902168,-0.01742788404226303,0.00005590855289483443,-0.00009619634511182085,0.02236265316605568,-0.00454501761123538,-0.045644983649253845,-0.03730567544698715,-0.01279299147427082,0.00866179633885622,0.009981172159314156,-0.030980408191680908,0.020425070077180862,-0.039498891681432724,0.042697761207818985,-0.0008439132361672819,-0.024140801280736923,-0.05639907717704773,0.035477038472890854,0.020441565662622452,0.019786709919571877,0.018500210717320442,0.02173198014497757,-0.012009927071630955,-0.016723129898309708,-0.04226542264223099,-0.02492266520857811,0.01651841774582863,0.020289167761802673,-0.01612131856381893,-0.03575102612376213,0.00336214667186141,-0.007603570818901062,0.04402938112616539,-0.049492623656988144,-0.013151699677109718,0.020648956298828125,0.02813391014933586,-0.03809790685772896,-0.024672653526067734,-0.004821326117962599,-0.006670955568552017,-0.005750779528170824,-0.008409838192164898,0.024550292640924454,-0.022077878937125206,-0.01531456783413887,-0.009185529313981533,0.028321610763669014,0.027278952300548553,0.02315327152609825,-0.006737477146089077,0.015419933013617992,0.02280585840344429,0.04794382303953171,-0.00477943429723382,-0.029258988797664642,-0.054199568927288055,-0.018212279304862022,-0.013785095885396004,0.05412609875202179,0.00220704497769475,-0.007730723824352026,0.005346461199223995,-0.013251345604658127,0.062733955681324,0.04810967668890953,0.03908838704228401,0.02499563805758953,0.021151352673768997,0.006152658257633448,0.008210068568587303,-0.002758180256932974,0.01551426574587822,-0.025380872189998627,-0.017351021990180016,-0.0041819349862635136,0.01718990132212639,-0.025446174666285515,-0.05442170798778534,0.019363440573215485,-0.020103026181459427,0.01696079596877098,0.04585268348455429,-0.016727931797504425,-0.007451915182173252,-0.0013660271652042866,0.0279857087880373,0.01979866623878479,0.0027335381601005793,-0.007895293645560741,0.03924709931015968,-0.024199282750487328,-0.04142595827579498,0.11658574640750885,0.00822092592716217,-0.007947025820612907,0.02665107697248459,-0.016997534781694412,-0.0030496004037559032,0.022032633423805237,0.024163726717233658,-0.03586257994174957,0.006667742505669594,-0.028617095202207565,0.040697235614061356,-0.030608465895056725,-0.014735772274434566,0.01894794963300228,0.03688564896583557,0.02248784899711609,-0.018787402659654617,0.03398807346820831,-0.01161656528711319,-0.0007550384034402668,-0.03225265070796013,0.022334272041916847,-0.00913956854492426,-0.04371168836951256,0.038427576422691345,0.020300455391407013,0.009749826975166798,-0.02095743454992771,-0.012303700670599937,-0.03417612984776497,0.021085523068904877,-0.021523892879486084,-0.03524639084935188,-0.010862835682928562,0.04702823981642723,-0.010002370923757553,-0.02954607456922531,-0.00242116441950202,-0.012763608247041702,0.023971766233444214,0.015618858858942986,-0.017350289970636368,0.02449650689959526,-0.0014131601201370358,0.03311166912317276,0.01522150170058012,0.007381077390164137,0.011883468367159367,-0.006364515982568264,0.0069173043593764305,-0.02634095773100853,0.040160082280635834,0.0027716225013136864,0.004488839302212,-0.031922344118356705,0.02572477236390114,-0.009796311147511005,0.008063146844506264,0.011789625510573387,0.01001613400876522,-0.02818802185356617,-0.004934662953019142,0.027706841006875038,0.0875801295042038,0.03152608498930931,-0.03391178697347641,-0.026311475783586502,-0.06328155100345612,-0.048867497593164444,0.0076485732570290565,-0.01110647339373827,0.005124787334352732,-0.01045086607336998,-0.023250630125403404,-0.0004544039547909051,-0.07253871113061905,-0.015904970467090607,-0.06868363171815872,0.010619616135954857,0.00652471324428916,-0.03140534460544586,-0.012337733991444111,0.005309670697897673,-0.021365197375416756,-0.030972028151154518,-0.03280336782336235,-0.041782625019550323,0.013893109746277332,-0.04355480894446373,0.005252600647509098,0.03104168362915516,0.029651712626218796,-0.06206274777650833,-0.025647014379501343,0.05745992437005043,-0.0051127709448337555,0.011368518695235252,-0.029995135962963104,-0.014653844758868217,0.0013881874037906528,-0.029300479218363762,0.01403701864182949,-0.03873115032911301,-0.004862367175519466,0.007428443059325218,-0.003145048161968589,-0.014964484609663486,-0.006525746081024408,-0.03618200495839119,-0.005859570112079382,-0.01216727215796709,0.015275267884135246,-0.04118486866354942,0.02806716226041317,0.0023920482490211725,-0.044176846742630005,0.02700003981590271,-0.017099151387810707,0.002894133562222123,-0.016022613272070885,0.05548946186900139,-0.009977397508919239,0.016993694007396698,-0.032675791531801224,0.019862201064825058,-0.04230375960469246,-0.002695868257433176,-0.021532421931624413,-0.015031437389552593,0.03700774535536766,-0.010187680833041668,0.011660035699605942,-0.007703872397542,0.026315229013562202,-0.03582175821065903,-0.007583003956824541,-0.0010203171987086535,0.024425826966762543,-0.0032153192441910505,-0.023034729063510895,-0.04032662883400917,-0.03637067601084709,-0.00042972859228029847,0.0016110618598759174,0.03356771543622017,-0.006129626650363207,0.030921967700123787,-0.01878098025918007,0.002529898891225457,-0.05608157441020012,0.026288894936442375,-0.0378086157143116,-0.00618019700050354,0.0019771207589656115,0.005112036131322384,-0.002368822693824768,-0.04384962096810341,0.030367759987711906,0.07139977067708969,0.07186375558376312,-0.006291338708251715,-0.007710576057434082,0.02458059787750244,-0.06683354079723358,-0.016219044104218483,-0.01072024181485176,0.06776762008666992,0.050076838582754135,-0.012295980006456375,0.09080931544303894,-0.010675599798560143,-0.007399450987577438,-0.003001393284648657,0.02419838309288025,0.050918541848659515,-0.03790866211056709,-0.023121334612369537,0.01973537914454937,-0.017158176749944687,0.023882176727056503,0.007227862253785133,0.002198296831920743,-0.020348576828837395,0.050548896193504333,0.0067538111470639706,0.023284001275897026,0.0561009980738163,0.007699144538491964,-0.029836909845471382,-0.005156962666660547,-0.04049148038029671,0.017311643809080124,-0.005219676066190004,0.03138365596532822,-0.04596414417028427,0.017099572345614433,-0.039958324283361435,0.014457347802817822,-0.01802658662199974,-0.03629572317004204,-0.01404312439262867,0.012673596851527691,-0.11806923896074295,-0.009872818365693092,-0.0047662025317549706,0.04325290396809578,-0.026235198602080345,0.0014008600264787674,0.02599409408867359,-0.023928344249725342,-0.014903070405125618,-0.028109055012464523,-0.07696805894374847,0.023087989538908005,0.039736825972795486,-0.040608957409858704,-0.016145315021276474,-0.0154847027733922,-0.017326923087239265,-0.01591694913804531,0.0019858882296830416,0.023522889241576195,0.032891128212213516,-0.019207099452614784,-0.008467303588986397,-0.019303355365991592,-0.03137437254190445,-0.009640306234359741,-0.016021832823753357,0.017694341018795967,-0.014150777831673622,-0.014089888893067837,0.03846017271280289,-0.00003384732917766087,-0.016095934435725212,0.06754159927368164,0.024317696690559387,0.00759432977065444,-0.012092995457351208,-0.020984984934329987,-0.014675491489470005,0.002981234109029174,-0.004540062043815851,0.01914321817457676,-0.009683395735919476,0.024783700704574585,-0.0032552240882068872,0.05300666019320488,-0.013139470480382442,-0.019343741238117218,-0.037152260541915894,-0.01360812596976757,-0.01992054469883442,0.04236473888158798,-0.01206759549677372,-0.0068777636624872684,0.02405119687318802,0.020483598113059998,-0.06489397585391998,-0.037901621311903,0.053597018122673035,0.01553297322243452,-0.00496934587135911,0.021766331046819687,-0.009000958874821663,-0.03409956023097038,-0.010461363941431046,0.03383750468492508,-0.07131292670965195,0.03335670754313469,0.0015715013723820448,0.034385088831186295,0.01594533585011959,0.0015667674597352743,-0.01893628016114235,-0.03392796963453293,-0.008198819123208523,0.03049207665026188,0.04870399832725525,0.011815311387181282,0.031718749552965164,-0.02695372886955738,-0.011239231564104557,-0.0021772265899926424,0.0005939891561865807,0.010423781350255013,0.03277212008833885,0.010529047809541225,-0.03337576985359192,-0.040897518396377563,0.0020744474604725838,0.004708307329565287,-0.030119188129901886,-0.037225980311632156,-0.0019060808699578047,-0.002532371086999774,-0.05004989355802536,-0.011530297808349133,-0.000437626033090055,-0.010004241019487381,-0.018087828531861305,0.012715383432805538,0.002136641414836049,-0.027062010020017624,0.007818183861672878,-0.03151252120733261,-0.02348097413778305,-0.04418616369366646,-0.03177816420793533,0.015584751032292843,-0.043753232806921005,0.007527429610490799,-0.012665048241615295,-0.013708343729376793,-0.023454390466213226,0.022263597697019577,-0.041319042444229126,-0.001759626087732613,0.012863033451139927,-0.0013038752367720008,0.0012499552685767412,0.01680370420217514,-0.009803772903978825,-0.015255458652973175,0.000191939776414074,-0.03948092833161354,0.022814057767391205,0.025807185098528862,0.017433296889066696,-0.029547523707151413,-0.03571043536067009,-0.029221272096037865,0.024474669247865677,-0.06742527335882187,-0.0392896831035614,0.02287648618221283,0.0395255982875824,-0.0015195279847830534,-0.047296974807977676,0.018166495487093925,-0.045646682381629944,-0.016216807067394257,0.008648725226521492,-0.03551420196890831,0.01189942192286253,-0.00943813007324934,0.0037059898022562265,-0.06481801718473434,0.012072926387190819,0.003451079595834017,-0.014160525985062122,-0.014245614409446716,-0.01870703510940075,0.019729727879166603,0.01801641471683979,-0.004078176338225603,-0.02780993841588497,0.0244557186961174,0.031505804508924484,-0.01918727345764637,-0.012314585037529469,0.012996379286050797,0.026865532621741295,-0.03351377695798874,-0.03952237218618393,-0.06767714023590088,-0.06270378082990646,-0.02715444751083851,-0.011138861998915672,-0.04239501431584358,0.000741763913538307,-0.01816653087735176,-0.03104928880929947,0.06879206746816635,-0.001654716907069087,0.002747080521658063,0.02541458234190941,-0.024835407733917236,-0.004747642204165459,0.004937654361128807,0.023874923586845398,-0.014716492034494877,-0.007565766107290983,0.013383778743445873,0.038987841457128525,0.007905930280685425,0.014842408709228039,-0.006964624859392643,-0.03833633288741112,0.034087542444467545,-0.025826526805758476,0.02362927421927452,-0.020876444876194,-0.008246757090091705,-0.02001282013952732,-0.04502804949879646,0.019338535144925117,-0.003929514903575182,0.016479093581438065,0.04013744369149208,0.017387857660651207,-0.005318492650985718,-0.037155892699956894,-0.03849196434020996,-0.006724745500832796,0.016311777755618095,0.021769849583506584,0.0030084052123129368,-0.02273036167025566,-0.015139288268983364,-0.045995987951755524,0.016059856861829758,-0.028106482699513435,-0.02646479383111,-0.0012158295139670372,0.0019370613154023886,0.056517209857702255,-0.0557430237531662,0.025976086035370827,0.0015177350724115968,0.006996390409767628,-0.033393822610378265,0.009501432999968529,0.011169501580297947,-0.01974823884665966,-0.026458483189344406,-0.0803413838148117,0.01123056374490261,-0.017504485324025154,-0.01803234964609146,-0.004090830218046904,-0.010198894888162613,0.006257691420614719,-0.014765467494726181,-0.026348352432250977,0.017456570640206337,0.049190815538167953,-0.004665937274694443,-0.04233677312731743,0.06648644059896469,0.009728219360113144,0.002380323363468051,0.028546137735247612,-0.008985528722405434,0.028056267648935318,-0.0021853044163435698]],"eb1d7b55e0857c89bc42e5dddf63331c":[1.0000003475871782,[0.022889163345098495,0.027782293036580086,-0.021178577095270157,0.009309477172791958,-0.0011360261123627424,0.010027723386883736,0.05107138305902481,0.05188800394535065,-0.011654994450509548,0.010902917943894863,-0.033137015998363495,-0.00284895533695817,-0.008081783540546894,0.021274475380778313,0.008922312408685684,-0.027166657149791718,0.008120744489133358,-0.01905503310263157,-0.03141291067004204,-0.00904304813593626,0.0038102073594927788,0.02731798030436039,0.008961186744272709,-0.009232176467776299,-0.010613947175443172,0.06638951599597931,-0.00562804751098156,-0.009306038729846478,0.029206087812781334,-0.007683346047997475,0.013034080155193806,0.019138000905513763,-0.025778060778975487,-0.015039500780403614,-0.013155502267181873,-0.019736887887120247,0.010083147324621677,-0.007835407741367817,-0.10291051119565964,-0.0018670960562303662,0.012825032696127892,-0.027753181755542755,-0.02344336174428463,-0.0013622097903862596,0.02610922046005726,0.018805647268891335,0.006894783116877079,-0.07118761539459229,-0.008514126762747765,-0.0033220567274838686,-0.020307747647166252,-0.014140866696834564,-0.01620551012456417,-0.030894840136170387,0.008068971335887909,0.04731317237019539,0.01253435481339693,-0.02491179294884205,0.021742381155490875,0.007936600595712662,0.021630993112921715,-0.03519052267074585,-0.044644810259342194,-0.029701348394155502,-0.03156525269150734,0.002801635768264532,0.00011342965444782749,0.057426568120718,0.03314030542969704,-0.025841819122433662,0.017674045637249947,0.02942606247961521,0.0078055365011096,-0.05450821667909622,0.003692406928166747,-0.028333483263850212,0.031178241595625877,0.00297160935588181,0.0059207649901509285,-0.030866827815771103,0.09592472016811371,0.011911962181329727,-0.024815350770950317,-0.00840972550213337,-0.007862711325287819,0.029800452291965485,0.0067092194221913815,0.019903704524040222,-0.017133671790361404,-0.029455294832587242,-0.0008330898126587272,0.05923372879624367,-0.03779160603880882,-0.02963661402463913,0.020487939938902855,-0.016079576686024666,0.04218687117099762,-0.05630424618721008,0.031643595546483994,-0.0015268889255821705,-0.011519615538418293,-0.016697529703378677,-0.0152771370485425,0.009786723181605339,0.032017648220062256,-0.026443863287568092,0.0022055809386074543,0.03906421363353729,-0.009941458702087402,0.02283426560461521,-0.029147448018193245,-0.04688886180520058,-0.06260417401790619,0.03237057849764824,0.008153549395501614,-0.004362240433692932,-0.0027272633742541075,-0.004300592001527548,-0.008773772977292538,-0.005757697857916355,-0.001697245053946972,0.05524548888206482,0.04470362514257431,-0.00193260726518929,-0.000779188412707299,-0.02094564028084278,-0.06508555263280869,0.04281995818018913,-0.0273726936429739,-0.0006178292096592486,0.004766501951962709,0.026130517944693565,0.03047051467001438,-0.025648435577750206,-0.049594223499298096,-0.02195025235414505,0.01948092319071293,0.04091831296682358,0.024004213511943817,-0.008461381308734417,-0.003411984071135521,0.018652983009815216,-0.04012027382850647,0.005929251667112112,0.02774028666317463,-0.03743228316307068,0.009143347851932049,0.007451994810253382,0.02188222110271454,0.031631652265787125,-0.03302685543894768,-0.0289766825735569,-0.004114639945328236,0.010626173578202724,0.02519904635846615,-0.009262049570679665,-0.005610870197415352,-0.002063117688521743,0.036599334329366684,-0.021102268248796463,0.009079067967832088,-0.028928084298968315,0.010930878110229969,0.045002710074186325,0.020913902670145035,-0.005773285869508982,0.011327454820275307,0.012271485291421413,0.010190429165959358,0.017201220616698265,-0.052614450454711914,-0.06388763338327408,0.0448729433119297,-0.020567337051033974,-0.0016907451208680868,0.06450042873620987,0.06869544088840485,0.003664921037852764,0.02908722124993801,-0.038245175033807755,0.014304851181805134,0.008594759739935398,0.018278207629919052,-0.07020837813615799,0.0531812384724617,-0.030010201036930084,0.045052580535411835,-0.016345281153917313,0.007260045036673546,0.052418194711208344,-0.02716783434152603,-0.027377137914299965,0.017932208254933357,0.0034359849523752928,-0.024897821247577667,-0.014258505776524544,-0.02434152364730835,0.003913586027920246,0.06986209750175476,-0.0573202446103096,-0.025856273248791695,-0.002429962856695056,-0.016495684161782265,-0.00807108636945486,-0.03674731403589249,0.023375581949949265,-0.04073375090956688,-0.03446375951170921,0.04350893571972847,-0.0012296154163777828,0.04315320774912834,-0.008679475635290146,-0.0386967733502388,0.02830423042178154,0.04066077247262001,0.019018394872546196,-0.0019889743998646736,-0.031036581844091415,-0.00037860142765566707,0.00959289725869894,-0.023328950628638268,0.02168777398765087,-0.008894297294318676,-0.024483254179358482,0.017016028985381126,0.030653400346636772,0.01227159146219492,0.034367211163043976,0.006962848827242851,0.009848442859947681,-0.0485394112765789,0.09452280402183533,-0.045472413301467896,-0.06998968124389648,-0.02735631912946701,0.012790922075510025,-0.05646778270602226,0.002824692288413644,0.027255844324827194,0.016968179494142532,-0.00018320504750590771,-0.056401051580905914,-0.00011420783266657963,-0.011069074273109436,-0.036402005702257156,0.06006300821900368,-0.018241332843899727,-0.002414208836853504,-0.017756475135684013,-0.021760404109954834,-0.0479850247502327,-0.005688638426363468,0.0003640336508397013,-0.0000384039813070558,-0.035441555082798004,-0.04775644838809967,0.0033289059065282345,-0.03389795869588852,-0.021982911974191666,-0.012760329060256481,0.011333738453686237,0.02187725156545639,0.012534619309008121,0.035644229501485825,-0.008396151475608349,0.026618236675858498,0.03535182774066925,-0.042368583381175995,-0.020819218829274178,0.044772692024707794,-0.03526170179247856,-0.006820047739893198,-0.06512684375047684,-0.0035933800972998142,-0.004973090253770351,-0.037949636578559875,0.01403657253831625,-0.02851768396794796,0.04607098549604416,-0.027788637205958366,0.014855565503239632,0.0006287878495641053,-0.028096534311771393,-0.008333837613463402,0.0029773253481835127,0.03443652763962746,-0.018943030387163162,0.004097376950085163,0.007634071633219719,-0.015515769831836224,0.0002071783528663218,0.009728219360113144,0.1080559492111206,-0.019657524302601814,-0.008314751088619232,0.02711212821304798,-0.023590564727783203,-0.10075321048498154,-0.03587392717599869,0.010092177428305149,-0.008548432029783726,0.03559805452823639,-0.013158290646970272,-0.00773007282987237,-0.006167456042021513,-0.004253946710377932,-0.027338586747646332,0.008537360467016697,-0.1372438371181488,0.024473458528518677,-0.034902315586805344,0.02811569906771183,0.016550980508327484,0.01879381760954857,-0.011536368168890476,0.026121383532881737,-0.06232747435569763,-0.020637784153223038,0.06349320709705353,0.060944512486457825,0.027133584022521973,0.024642441421747208,-0.003579493844881654,0.032221972942352295,0.03628578037023544,-0.036423198878765106,-0.005194753408432007,-0.022020960226655006,0.006190772633999586,-0.03714601695537567,-0.04303170368075371,0.04232506453990936,0.02895543910562992,0.027891945093870163,0.0012917693238705397,0.0037997914478182793,-0.017021706327795982,0.039850011467933655,0.03202585503458977,-0.012204510159790516,-0.10679004341363907,0.021616626530885696,-0.009227203205227852,-0.003863027784973383,-0.035405803471803665,0.005352397914975882,0.044757258147001266,-0.03290393576025963,0.0020797960460186005,-0.03228296339511871,-0.033707547932863235,-0.021781327202916145,0.003357301000505686,-0.0033652381971478462,0.03486035019159317,0.017504902556538582,0.0236024409532547,-0.019986702129244804,-0.04278545454144478,-0.05843125283718109,-0.008315342478454113,0.013494212180376053,0.011557245627045631,-0.0447210967540741,-0.03265026956796646,0.009760687127709389,-0.03721924498677254,-0.0030565918423235416,-0.007861913181841373,-0.022176388651132584,-0.015643803402781487,-0.03642295300960541,-0.0055997734889388084,-0.035897623747587204,-0.02208111062645912,-0.020343801006674767,-0.046005845069885254,0.0036310977302491665,-0.013620764948427677,-0.031102586537599564,0.032790735363960266,-0.014147677458822727,0.013840139843523502,-0.04609628766775131,-0.03979996591806412,-0.032949578016996384,0.4050236940383911,0.008176413364708424,-0.0039385114796459675,-0.01030571199953556,0.016178416088223457,-0.006485061254352331,0.003227893030270934,-0.008953223936259747,0.04074142873287201,-0.007864958606660366,-0.001955875428393483,0.007802087813615799,0.023546960204839706,0.016297951340675354,0.021304495632648468,0.031137991696596146,-0.052880801260471344,0.03409920632839203,0.01354556530714035,-0.026062536984682083,0.007493066601455212,-0.008309575729072094,-0.010940906591713428,0.0028404751792550087,-0.04009665548801422,0.025204384699463844,0.009815170429646969,-0.002812157152220607,-0.056127533316612244,0.007280758582055569,0.014956401661038399,0.005776381120085716,0.004663445055484772,-0.030212553218007088,-0.025087790563702583,0.01340447273105383,-0.06025540456175804,-0.03073905222117901,0.021885404363274574,-0.017638668417930603,0.019545217975974083,0.000777719309553504,0.001785111497156322,-0.02402728796005249,-0.026354022324085236,-0.02516629919409752,-0.006314210593700409,0.004660097882151604,-0.013806737959384918,-0.01522164698690176,0.007075751665979624,0.025050215423107147,-0.01086660847067833,0.01296517625451088,-0.015408484265208244,-0.006138586439192295,-0.03274475783109665,-0.020856549963355064,-0.00701143080368638,0.005117469932883978,-0.014582264237105846,0.02517673186957836,-0.03331584110856056,0.022819634526968002,0.011875633150339127,0.006984455045312643,-0.0068073999136686325,-0.040815599262714386,-0.0165102556347847,0.03552410006523132,0.017665641382336617,0.047947246581315994,0.05481451749801636,-0.005178635939955711,-0.005863244645297527,-0.007360776886343956,0.0290061105042696,0.013390971347689629,-0.014641698449850082,0.045554593205451965,0.011325078085064888,-0.0060611325316131115,0.02999887987971306,-0.010112868621945381,0.030386634171009064,0.023500949144363403,-0.07085420191287994,0.03748766705393791,0.00827631913125515,-0.029932886362075806,-0.03465401381254196,-0.002874805126339197,-0.0036315249744802713,-0.013736575841903687,0.0301494263112545,0.013536405749619007,0.009462972171604633,-0.07999029010534286,-0.007695707958191633,-0.013796418905258179,0.04284704104065895,0.0023496870417147875,0.03917144238948822,0.012226296588778496,0.009494416415691376,0.0011870788875967264,-0.003532754024490714,-0.03280315920710564,-0.02600749582052231,-0.011399736627936363,0.001850655535236001,0.027497775852680206,0.010396103374660015,-0.011719818226993084,0.03539403900504112,0.021955834701657295,0.030017364770174026,0.06280835717916489,0.013386859558522701,0.018431562930345535,-0.0047538867220282555,-0.03769221529364586,0.015068902634084225,0.01007642038166523,-0.009054494090378284,-0.059242382645606995,0.007372918073087931,-0.047776397317647934,-0.025230592116713524,0.0011712092673406005,0.019056051969528198,0.03586617857217789,0.009032475762069225,-0.010787500068545341,-0.012054435908794403,-0.0005014195339754224,-0.014992534182965755,-0.025898391380906105,0.013705959543585777,0.056943129748106,0.007608438841998577,-0.0019828416407108307,-0.010554575361311436,-0.002990971552208066,0.013559025712311268,0.00665284926071763,0.008577228523790836,0.0007966167177073658,-0.04284844547510147,-0.002537315711379051,-0.005286907311528921,-0.002976897405460477,0.030419208109378815,-0.016922391951084137,0.020373543724417686,-0.020599612966179848,0.014800235629081726,0.0006736312643624842,-0.022605551406741142,-0.02419213019311428,-0.019720597192645073,0.006102713756263256,-0.006865121424198151,0.06541348993778229,0.01672273688018322,-0.018564455211162567,0.01829533837735653,0.0694274976849556,0.016047274693846703,0.044765349477529526,0.036204032599925995,-0.0745723694562912,0.014617687091231346,0.01670241355895996,0.03248943015933037,-0.04607675224542618,-0.014326844364404678,0.03390543907880783,0.017925817519426346,0.014866039156913757,0.04479743540287018,-0.001779065583832562,-0.020113471895456314,-0.014540201053023338,-0.02622157894074917,-0.007598064374178648,-0.02678447961807251,0.0314510315656662,0.031139809638261795,-0.037541020661592484,-0.011297281831502914,0.05920178070664406,0.0016089900163933635,-0.0021867963951081038,0.040732644498348236,-0.0452958345413208,-0.004542529117316008,-0.009620560333132744,-0.00529432762414217,-0.023080166429281235,0.04683113843202591,0.03749438002705574,0.03792087361216545,0.044663235545158386,0.0010945709655061364,-0.0013194342609494925,0.026337862014770508,0.0220367219299078,0.008387596346437931,-0.036316417157649994,0.005812443792819977,0.011748513206839561,0.013741924427449703,0.009633141569793224,-0.005080335773527622,-0.06303823739290237,0.03970357030630112,0.020962778478860855,0.05621815472841263,-0.026270251721143723,-0.01613129861652851,-0.01702279970049858,0.04425898566842079,-0.014361397363245487,-0.026290975511074066,0.02513704262673855,-0.025925520807504654,-0.03453674912452698,-0.006220603361725807,0.02687269076704979,-0.010528321377933025,-0.01013320591300726,0.027592113241553307,-0.008197396993637085,0.017242426052689552,-0.007507422473281622,0.03096647374331951,0.022349826991558075,0.000563361041713506,0.03878694400191307,-0.006811153143644333,-0.023804329335689545,0.019672632217407227,0.02238614112138748,0.011265286244452,0.025914497673511505,-0.02118668518960476,0.02410694770514965,0.0004215741064399481,-0.013639949262142181,0.0026749172247946262,-0.014650565572082996,-0.0014826408587396145,-0.03928927704691887,0.017760446295142174,0.03701019659638405,-0.0027534232940524817,-0.02692577987909317,-0.015309235081076622,0.007704068906605244,-0.008624326437711716,0.00765218073502183,-0.0005550232017412782,-0.007960369810461998,0.003986274357885122,0.027860676869750023,-0.03782455995678902,-0.02765904739499092,0.016011003404855728,-0.04284996911883354,-0.0036550345830619335,-0.01022733561694622,-0.006563074886798859,-0.03248002007603645,-0.018685325980186462,-0.007887035608291626,-0.011811801232397556,-0.02022642269730568,0.007948466576635838,0.02922295592725277,-0.09432124346494675,-0.02646004967391491,0.0027419712860137224,0.0179853904992342,-0.0101189399138093,-0.05630603805184364,-0.01761048287153244,-0.022292710840702057,-0.02229495160281658,0.002833420177921653,-0.0120591064915061,-0.015998920425772667,-0.028102539479732513,0.03332611173391342,0.00005855857671122067,0.0430745892226696,-0.03196468949317932,0.02322973683476448,0.019991695880889893,0.006194484420120716,0.01809043064713478,-0.015448563732206821,0.0024138756562024355,-0.0180892925709486,-0.00832092110067606,0.002104982966557145,0.008014094084501266,0.026318684220314026,-0.023602312430739403,0.0027760479133576155,0.03258615732192993,-0.02802392840385437,0.004882850218564272,-0.0033477675169706345,-0.03226994723081589,-0.034593578428030014,-0.01899583265185356,-0.0026792443823069334,0.007174656260758638,-0.01489882543683052,0.01171054132282734,0.011906236410140991,-0.015042285434901714,0.029648970812559128,-0.009748673066496849,-0.0037796352989971638,-0.02265515737235546,0.026466380804777145,-0.023481568321585655,-0.02396032214164734,-0.007906670682132244,-0.0029421618673950434,0.012201228179037571,0.02756047248840332,0.007425700780004263,-0.007336716633290052,0.05695999786257744,-0.027670783922076225,0.01749027520418167,-0.02532161772251129,-0.005946541670709848,-0.006070331204682589,-0.01756742037832737,-0.0007634385256096721,0.013899507001042366,-0.01374860666692257,0.013158576563000679,-0.023211540654301643,-0.04814592003822327,-0.00300235440954566,0.03468126431107521,0.0014378613559529185,-0.01904885843396187,-0.006331009790301323,-0.0009291556780226529,-0.027226848527789116,-0.006513997446745634,0.019375981763005257,0.03811262175440788,0.024537406861782074,0.028991058468818665,0.05536149442195892,0.031069854274392128,0.001865519443526864,-0.016864223405718803,-0.007940240204334259,0.049676164984703064,0.001639486406929791,0.005779190920293331,0.011146624572575092,0.02438717521727085,0.014689742587506771,0.005636582151055336,-0.012281532399356365,-0.021556789055466652,0.00039189026574604213,0.01332403626292944,0.029729170724749565,0.012945887632668018,-0.05427996814250946,-0.03488648310303688,0.0062211728654801846,0.017894672229886055,-0.03619827330112457,-0.001988247036933899,0.032483018934726715,-0.05588963255286217,-0.00866908673197031,-0.0028011135291308165,0.018953491002321243,0.008172975853085518,0.04326547682285309,0.009034525603055954,0.00982529204338789,-0.10533459484577179,0.017016137018799782,-0.03097783960402012,-0.0031876065768301487,0.026697639375925064,0.0039851125329732895,0.014133363962173462,-0.04749993979930878,-0.050129104405641556,-0.03610655665397644,0.059598956257104874,-0.03275757655501366,0.01715698093175888,-0.028376450762152672,0.022032756358385086,-0.0052225179970264435,-0.021674107760190964,0.034525588154792786,0.01757301390171051,0.01898796670138836,0.010038468986749649,-0.04098115861415863,-0.03883690387010574,-0.05653248727321625,0.0002220319875050336,0.013312571682035923,-0.006591514218598604,-0.017998259514570236,-0.003677362808957696,-0.000456458714324981,-0.01391654647886753,-0.03358890861272812,-0.02508540078997612,0.04775272309780121,0.029911428689956665,0.021222712472081184,-0.027142595499753952,-0.02543867751955986,0.007569385692477226,0.03408651426434517,0.0295338686555624,-0.023058855906128883,-0.03085710108280182,0.001511046546511352,-0.014230540953576565,0.006314043886959553,-0.013078550808131695,0.0025726547464728355,0.008710021153092384,-0.026291513815522194,-0.07169114798307419,0.009112355299293995,0.04581153392791748,0.013329053297638893,0.002251238562166691,0.05203964188694954,-0.022590599954128265,-0.024042736738920212,0.0007014931179583073,0.03151160851120949,-0.03327197954058647,-0.0013827712973579764,-0.021195009350776672,-0.003311430336907506,-0.004903985653072596,0.004356860648840666,-0.007520367857068777,-0.02507866360247135,-0.024870898574590683,-0.005730479024350643,-0.023613598197698593,-0.02261178195476532,0.02132483199238777,-0.028758134692907333,0.0273243747651577,-0.0352325364947319,0.013177488930523396,-0.02068047970533371,0.01447877287864685,-0.02704600617289543,0.007191967684775591,-0.0025199793744832277,0.018672987818717957,0.05097286030650139,0.04723731428384781,-0.011070082895457745,0.02722301334142685,0.026307713240385056,0.03375605493783951,-0.04540860652923584,-0.05714058130979538,0.032958414405584335,-0.012010427191853523,0.027206623926758766,0.009504454210400581,0.019418591633439064,-0.013039674609899521,-0.021538550034165382,0.008448663167655468,0.01232893392443657,0.023560311645269394,0.040959350764751434,-0.008765761740505695,-0.007830639369785786,0.004982818383723497,-0.006931048817932606,-0.03475487604737282,0.03361531347036362,-0.027363242581486702,-0.012896852567791939,-0.005598057992756367,-0.019330661743879318,-0.027194278314709663,0.008642023429274559,-0.04344654455780983,-0.01599871926009655,0.009673158638179302,0.024441519752144814,0.016188837587833405,-0.02087647281587124,0.0303927194327116,0.04081442207098007,-0.01052966807037592,-0.06502459943294525,0.018402492627501488,-0.021182997152209282,-0.011534917168319225,-0.030736634507775307,0.024837354198098183,-0.047312065958976746,0.03378443047404289,-0.017689768224954605,-0.03269397094845772,-0.01760120317339897,-0.02911137416958809,-0.042030736804008484,-0.001902413321658969,0.06478141993284225,0.03384411707520485,-0.039157040417194366,0.005767752882093191,0.025783011689782143,0.01271609403192997,-0.036217447370290756,-0.013843164779245853,-0.029675118625164032,0.016045399010181427,-0.025112485513091087,0.01608213223516941,-0.01925663836300373,0.007217359729111195,0.020746951922774315,0.031742364168167114,0.00561435567215085,-0.005744873080402613,-0.01126862969249487,0.0480780228972435,-0.025309214368462563,-0.009950388222932816,0.05463787913322449,0.026107948273420334,-0.02745123580098152,-0.02761724404990673,-0.039839014410972595,-0.02964554727077484,-0.0052255745977163315,-0.008194392547011375,-0.003699618624523282,0.03139686957001686,0.030497664585709572,-0.01190772745758295,0.059039123356342316,0.00980168953537941,0.019287608563899994,0.01623927615582943,-0.03728938102722168,0.008549158461391926,0.013829759322106838,0.03956761956214905,0.00767071358859539,-0.05703840032219887,-0.030357850715517998,0.03970698267221451,-0.039049867540597916,0.027480794116854668,-0.0086777713149786,0.005369674880057573,0.029215488582849503,-0.046297699213027954,0.027957964688539505,0.021156691014766693,0.013205147348344326,0.00496368994936347,0.01045764796435833,0.0036926891189068556,-0.055213894695043564,0.005609853658825159,-0.06113656610250473,0.014460766687989235,-0.019052743911743164,-0.02489027939736843,-0.033266473561525345,-0.017308447510004044,0.020164618268609047,-0.021089976653456688,-0.008462613448500633,-0.01569775678217411,-0.014758355915546417,-0.03413185477256775,0.00747906556352973,-0.050872091203927994,0.02598012052476406,0.01891445927321911,0.03896026685833931,0.037964992225170135,-0.008188460022211075,0.01709219068288803,0.030564680695533752,0.026638032868504524,0.022929199039936066,-0.025583824142813683,0.04892030358314514,-0.02472243458032608,-0.0115119069814682,0.002881815191358328,-0.013246468268334866,-0.009424143470823765,0.0039037312380969524,-0.03830820322036743,-0.0006470097578130662,-0.011072820983827114,0.023307831957936287,0.00671033700928092,0.029137875884771347,-0.014677094295620918,0.03885655850172043,-0.047736313194036484,0.06168035790324211,-0.006657278630882502,0.007071961183100939,-0.018246479332447052,-0.02475205436348915,0.031613945960998535,0.005098327994346619]],"7352ecacad7370213f0cbe18df0496af":[1.0000003833634856,[0.0050462097860872746,-0.0037762217689305544,-0.02198716811835766,0.012748993933200836,-0.01778709702193737,-0.009456333704292774,0.05624277889728546,0.0759703516960144,-0.008504851721227169,-0.006994548719376326,-0.016974765807390213,0.00400737626478076,-0.009555614553391933,0.017286842688918114,0.008138400502502918,-0.041724998503923416,-0.0237667728215456,0.0007252659415826201,-0.010487856343388557,-0.009335203096270561,-0.014042859897017479,-0.004410242661833763,0.028122395277023315,-0.0032957580406218767,-0.023437300696969032,0.07082347571849823,-0.022697163745760918,-0.024490756914019585,-0.013231842778623104,0.012423727661371231,0.020093152299523354,-0.0076106274500489235,0.005819293204694986,-0.012995759956538677,-0.0003338282404001802,-0.007827571593225002,-0.02772185392677784,-0.02675323747098446,-0.11572694033384323,-0.04059625044465065,0.01535553578287363,-0.01887029968202114,-0.055581409484148026,0.019448280334472656,0.015727821737527847,0.015377361327409744,-0.013866160996258259,-0.055597949773073196,-0.007339436560869217,-0.002945300657302141,-0.01714061014354229,-0.022145427763462067,-0.006173328962177038,-0.03486867994070053,0.021757960319519043,0.031176507472991943,0.022752730175852776,-0.01330810971558094,-0.006440936122089624,-0.020061932504177094,-0.01473528053611517,0.006116968579590321,-0.02798141911625862,-0.02361259050667286,-0.033766210079193115,0.011335290968418121,0.011545542627573013,0.038001637905836105,0.029309401288628578,-0.029775910079479218,-0.024056939408183098,-0.011573025025427341,-0.00835130549967289,-0.047940123826265335,-0.021392768248915672,-0.009993384592235088,0.028069231659173965,0.005102369002997875,0.013307925313711166,-0.049115367233753204,0.12952038645744324,-0.045274753123521805,0.016924330964684486,-0.026266617700457573,-0.030934691429138184,-0.017330778762698174,0.009062872268259525,0.05197373777627945,-0.0007946944097056985,0.01997191458940506,-0.011837732046842575,0.04555116593837738,0.004663296043872833,-0.06803017854690552,-0.0202108733355999,0.023541457951068878,0.03439535200595856,-0.03502919152379036,0.02246759459376335,0.003660384565591812,-0.04795574024319649,-0.01833304949104786,0.006538607180118561,0.04404350370168686,0.009320390410721302,0.023415885865688324,0.014014738611876965,0.006819705478847027,-0.03648807108402252,0.013036387972533703,-0.05101218447089195,-0.025649704039096832,-0.012842398136854172,0.007029217667877674,-0.0033924810122698545,-0.026302240788936615,-0.018789861351251602,-0.0210052989423275,0.019179796800017357,0.011796081438660622,-0.012644139118492603,0.04436035454273224,0.013640406541526318,-0.004904255736619234,0.012836029753088951,-0.005887988023459911,-0.004739217460155487,0.05127576366066933,-0.03855195641517639,0.01179288886487484,0.0381363183259964,0.05157310143113136,0.03306252136826515,-0.0354592502117157,-0.0519724041223526,0.00472824415192008,0.043702464550733566,0.06038125604391098,0.04685768857598305,-0.026238547638058662,0.02686699666082859,0.004888757597655058,-0.004457758739590645,-0.0033151679672300816,0.07352735847234726,-0.014866283163428307,0.0020704243797808886,0.010617179796099663,-0.03770339861512184,0.03829536959528923,-0.017746806144714355,-0.03870664909482002,-0.026677198708057404,0.00003533967537805438,-0.00459032878279686,0.016844062134623528,0.03767506033182144,-0.0023768136743456125,0.028810035437345505,-0.022253159433603287,0.011350337415933609,-0.011539919301867485,0.025356817990541458,0.049368441104888916,0.031858984380960464,0.013653954491019249,0.016835296526551247,0.016127467155456543,0.0037041010800749063,0.01635955460369587,0.002604352543130517,-0.07389724999666214,0.03156072646379471,0.009437299333512783,0.03591214865446091,0.057811956852674484,0.023837801069021225,0.04487843066453934,0.05005151033401489,-0.0440528467297554,0.00042074304656125605,0.024451153352856636,0.0328516885638237,-0.032864075154066086,0.04394972324371338,-0.008226539939641953,0.04615865275263786,0.01460133958607912,0.002252770122140646,0.04751034826040268,-0.005749101750552654,-0.018009305000305176,0.04467823728919029,0.02384340576827526,-0.007397914305329323,0.008763739839196205,-0.013145821169018745,0.006758035626262426,0.03502867370843887,-0.0426330640912056,-0.0455939918756485,0.03235909715294838,-0.01862604357302189,-0.007750831078737974,-0.00044330066884867847,-0.006460118107497692,-0.031151385977864265,-0.0606028214097023,0.0190141461789608,-0.0012318171793594956,0.04091394692659378,-0.02651425637304783,-0.00999043881893158,0.017724456265568733,0.005199650302529335,-0.021062912419438362,-0.00024994596606120467,-0.025357233360409737,-0.007044383790344,0.008650606498122215,-0.02541367895901203,-0.03597405180335045,0.005535476375371218,-0.030171029269695282,-0.02334640361368656,0.00955955870449543,-0.01664474606513977,0.02942538820207119,0.028056517243385315,0.006027079652994871,-0.044147901237010956,0.08161867409944534,-0.0074196928180754185,-0.0168750062584877,0.008550976403057575,0.014925901778042316,-0.04483892768621445,0.033266663551330566,0.003760740626603365,0.030913453549146652,0.01055113784968853,-0.0569319911301136,-0.012033002451062202,-0.02452341839671135,-0.054747749119997025,0.054097749292850494,-0.03810877352952957,0.03369278088212013,-0.03591172769665718,0.021842224523425102,-0.037958476692438126,-0.026007845997810364,-0.024875326082110405,-0.021442817524075508,0.007566570769995451,-0.04081851243972778,-0.02410017140209675,-0.027166662737727165,0.023911932483315468,0.018283650279045105,0.0064966632053256035,-0.025573240593075752,0.007240028586238623,0.037463992834091187,-0.008605183102190495,0.004334426950663328,0.005074633751064539,-0.02142498455941677,-0.003408595221117139,0.059942957013845444,0.003474976634606719,0.026637839153409004,-0.04257851839065552,0.004606075584888458,0.006544890347868204,-0.01585289090871811,0.01134108379483223,-0.04158594459295273,0.0451490618288517,-0.02702523209154606,-0.0011111056664958596,-0.021946460008621216,0.004196538124233484,-0.01611488126218319,-0.026884542778134346,0.03866678476333618,0.0032339587341994047,0.0067573366686701775,0.011337947100400925,-0.029515530914068222,-0.038915615528821945,-0.004350826144218445,0.07691919803619385,-0.029628125950694084,-0.0012607479002326727,0.012191380374133587,-0.02819978818297386,-0.15301060676574707,-0.05964126065373421,0.031918223947286606,0.0061223325319588184,0.004906601272523403,-0.004122073762118816,0.005436204839497805,-0.009440089575946331,-0.018752282485365868,-0.04433154687285423,-0.006743007805198431,-0.1466837227344513,-0.012383057735860348,-0.027678754180669785,0.04681602492928505,0.01766917295753956,0.04796932265162468,0.01492422167211771,-0.011104537174105644,-0.07470742613077164,0.005481991916894913,0.015383643098175526,0.052049390971660614,0.04281065985560417,0.008294230327010155,0.013356007635593414,0.04853818938136101,0.0718122273683548,-0.023131517693400383,0.0014070364413782954,-0.012823235243558884,0.037621498107910156,-0.026340607553720474,-0.04650832340121269,0.01383380126208067,0.029198406264185905,0.013031702488660812,-0.011351668275892735,0.0339602492749691,-0.002727617509663105,0.0240471288561821,0.050641629844903946,-0.009946887381374836,-0.062421008944511414,0.05333995074033737,-0.008981251157820225,0.015997139737010002,-0.022780925035476685,-0.007048809435218573,0.02525879442691803,0.02697215974330902,0.017240604385733604,0.039042890071868896,0.001985919428989291,-0.0013239249819889665,0.015331542119383812,0.010684391483664513,0.061914943158626556,0.005796142388135195,0.020540781319141388,-0.006707705557346344,-0.04867751523852348,-0.018411071971058846,-0.008564143441617489,-0.004382218234241009,0.0031367687042802572,-0.02171223796904087,-0.0019834893755614758,-0.028517911210656166,-0.056394804269075394,-0.0004160775861237198,-0.006927052978426218,-0.03694399073719978,-0.030704723671078682,-0.01622486114501953,-0.0022337455302476883,-0.01957952417433262,-0.022278474643826485,-0.01884705387055874,-0.09114016592502594,0.03296637535095215,-0.00040826518670655787,-0.02979116328060627,0.02215876244008541,-0.004278555512428284,0.021315893158316612,-0.049952492117881775,-0.031201567500829697,0.014916141517460346,0.3412790298461914,-0.022499052807688713,-0.03687857836484909,0.023561466485261917,0.03577987104654312,0.017937438562512398,0.015194892883300781,0.024414604529738426,0.023603081703186035,-0.016702132299542427,0.010591323487460613,-0.000638850498944521,0.008051390759646893,0.026645654812455177,0.047586455941200256,0.036762602627277374,-0.037541598081588745,0.011305266991257668,-0.0156386848539114,-0.029239589348435402,0.04895833507180214,-0.05018571764230728,0.03536096587777138,0.004172035492956638,-0.042147159576416016,0.004309288691729307,0.0040224757976830006,-0.0019849480595439672,-0.027811679989099503,0.003633645363152027,-0.0005628959042951465,-0.008782424964010715,-0.03472653776407242,-0.03488762676715851,-0.04277125746011734,0.02339024469256401,-0.07198925316333771,-0.05858505144715309,-0.004200609400868416,-0.0034997102338820696,-0.008864965289831161,-0.027771111577749252,-0.0051908669993281364,0.010077090933918953,-0.04926501587033272,-0.014291927218437195,0.009005175903439522,0.007911521010100842,-0.019869713112711906,-0.03799296170473099,0.009975304827094078,-0.009059922769665718,-0.035205524414777756,0.02249705232679844,-0.029451917856931686,-0.017707407474517822,-0.012529970146715641,0.028318602591753006,-0.0469295009970665,0.0140887051820755,0.011369257234036922,0.027730578556656837,-0.03429931029677391,0.024560274556279182,0.014738025143742561,0.0053796018473804,-0.026224886998534203,-0.02994314208626747,-0.02756437286734581,0.003331475891172886,0.04336555674672127,0.032920245081186295,0.031857267022132874,0.013662277720868587,-0.016218233853578568,0.0006981608457863331,-0.007292657624930143,0.033831097185611725,-0.02906167134642601,0.002799023175612092,-0.01814144104719162,0.018296238034963608,0.02028428390622139,0.03477702662348747,0.01288534514605999,0.011524777859449387,-0.04550842568278313,0.02722211740911007,0.0015851297648623586,-0.030357642099261284,0.011721888557076454,0.00021757266949862242,-0.0006683042738586664,0.011849869973957539,0.05986406281590462,-0.02130497246980667,0.015768785029649734,-0.0640057623386383,0.02514922432601452,-0.00691016623750329,-0.0025011347606778145,0.042451344430446625,0.011459928005933762,-0.00720324506983161,0.005730980075895786,-0.008536859415471554,-0.01599911041557789,-0.03550700470805168,-0.012121837586164474,-0.012692534364759922,-0.036774009466171265,0.001136980950832367,0.017320578917860985,-0.013907103799283504,0.05590685456991196,0.019014883786439896,0.023448921740055084,0.0019124257378280163,0.0045891194604337215,0.029759757220745087,-0.03583771362900734,-0.05214184150099754,0.0457921139895916,0.0199669748544693,-0.013156664557754993,-0.10527323186397552,0.0139544066041708,-0.03518551588058472,0.01139653567224741,-0.005818459205329418,0.013146397657692432,0.023602064698934555,-0.018418338149785995,0.018455464392900467,-0.027023226022720337,-0.01643400453031063,0.004532826133072376,-0.0069554769434034824,-0.007183455862104893,0.06769463419914246,0.030250325798988342,-0.031032344326376915,-0.013116366229951382,0.04234801605343819,-0.03128820285201073,0.0005576746189035475,0.006697210017591715,0.004670808557420969,-0.005839153192937374,-0.014064605347812176,0.01794843189418316,-0.004003229551017284,0.03136906027793884,-0.04354706406593323,-0.02436617761850357,-0.01768917217850685,0.012318727560341358,-0.011845524422824383,-0.012750026769936085,-0.03955056518316269,-0.007270388770848513,0.02214958891272545,0.02802271768450737,0.06716454774141312,0.02767260931432247,0.016073931008577347,0.025010831654071808,0.0407647080719471,-0.003657463937997818,0.009130445308983326,0.01229909248650074,-0.04037437215447426,0.030674368143081665,0.010654863901436329,0.03241798281669617,-0.023214779794216156,-0.027244994416832924,0.0296549741178751,0.012902773916721344,-0.014810064807534218,0.06248177960515022,0.02314274199306965,-0.019202128052711487,0.00003903248943970539,-0.051739007234573364,0.0007964386604726315,-0.011824146844446659,0.013000691309571266,0.010052558034658432,-0.04125610738992691,-0.004992051050066948,0.04678633436560631,0.010767124593257904,-0.0029232013039290905,0.035352922976017,0.009575833566486835,0.0010513300076127052,0.0011646449565887451,-0.011008993722498417,0.008717100135982037,0.04350564256310463,0.011960453353822231,0.009408526122570038,0.01910942606627941,0.028465189039707184,-0.0065286424942314625,0.024197930470108986,0.0281062014400959,0.020766064524650574,-0.0309445858001709,0.005402719136327505,0.007790603209286928,0.00018791772890836,-0.008625168353319168,-0.014364814385771751,-0.043016087263822556,0.03253781050443649,0.035174410790205,0.022783774882555008,-0.005460578482598066,-0.030451102182269096,-0.02868867665529251,-0.004190294072031975,-0.05032122880220413,-0.01566452719271183,0.02915232814848423,-0.0007689996855333447,-0.042021580040454865,-0.031328897923231125,-0.004842286929488182,-0.022447684779763222,-0.000195007145521231,0.012487299740314484,-0.03422364220023155,-0.008106437511742115,-0.0000952451373450458,0.011624145321547985,-0.004592383746057749,0.038963425904512405,0.02301511913537979,-0.0028998807538300753,0.02815334126353264,0.020137185230851173,0.00039823944098316133,0.007161313202232122,-0.0037101423367857933,-0.03841465339064598,0.03388816490769386,-0.004597480874508619,-0.0041225142776966095,0.002739641582593322,-0.006907196249812841,-0.0846286490559578,-0.04404620826244354,0.008939418010413647,0.06325547397136688,0.022885767742991447,-0.03079397790133953,-0.008447363041341305,0.02588626556098461,-0.004702883306890726,0.012964567169547081,0.004259572830051184,-0.00789269246160984,0.02468051388859749,0.008138562552630901,-0.04167572781443596,-0.02983795292675495,0.006886828225106001,-0.043796390295028687,-0.016143279150128365,-0.037536896765232086,-0.023876531049609184,-0.016104593873023987,0.00996129959821701,-0.028887875378131866,0.01073091197758913,-0.03176243603229523,-0.010271400213241577,-0.010396551340818405,-0.08129330724477768,-0.0036363580729812384,0.009464654140174389,0.028876962140202522,-0.04418019950389862,-0.04756893217563629,0.003293342422693968,0.02067604288458824,-0.022850770503282547,-0.0008501983829773962,0.014987282454967499,0.025812285020947456,-0.05425075814127922,-0.004688685294240713,-0.00498668197542429,0.031372833997011185,-0.01880032755434513,0.021168624982237816,0.007664823904633522,0.02668427862226963,0.013806326314806938,0.007959622889757156,-0.006182922516018152,-0.016238681972026825,-0.012314329855144024,0.020476963371038437,-0.010564402677118778,0.0008220948511734605,0.038812730461359024,0.019345153123140335,-0.01165053527802229,-0.039279207587242126,-0.02089558355510235,0.004835431929677725,-0.01720665581524372,-0.03169097751379013,-0.021793372929096222,0.0038694071117788553,-0.009541841223835945,-0.018265746533870697,0.015605065040290356,0.010327824391424656,-0.024713097140192986,-0.0072021568194031715,-0.01795487478375435,-0.01377396285533905,-0.016954774037003517,-0.002314496785402298,-0.017852161079645157,-0.016451233997941017,-0.016974329948425293,0.00568849453702569,0.01698787696659565,-0.008859720081090927,0.03460138663649559,-0.007455541752278805,0.04599737003445625,-0.0014793307054787874,-0.011299566365778446,0.004817059729248285,-0.027126885950565338,0.021834339946508408,-0.0037892418913543224,0.014591628685593605,0.014688102528452873,0.031237859278917313,0.01940116100013256,-0.021773168817162514,-0.026205217465758324,-0.005888870917260647,0.021291617304086685,0.022279420867562294,-0.0039827278815209866,0.002118655713275075,-0.008991541340947151,-0.026502208784222603,0.006645877379924059,0.02085052989423275,0.03867006674408913,0.03289439529180527,0.005730724893510342,0.04665850102901459,0.03525758534669876,-0.007484330330044031,0.016808053478598595,-0.011865917593240738,0.027172164991497993,0.010539306327700615,-0.0089487349614501,-0.02402586303651333,0.040510520339012146,0.027132967486977577,-0.026739323511719704,-0.042510587722063065,-0.028267575427889824,0.016125310212373734,0.04582810774445534,0.015095110982656479,0.018956514075398445,-0.0492231622338295,-0.012472046539187431,-0.012616791762411594,-0.0035449317656457424,-0.048023175448179245,0.011165805160999298,0.0161725003272295,-0.03132912144064903,-0.029155392199754715,-0.0008620615117251873,0.019484063610434532,-0.007027315907180309,0.024112019687891006,0.00432279147207737,0.021651020273566246,-0.11306316405534744,0.04640529677271843,-0.0280402060598135,-0.008175681345164776,0.02262619324028492,-0.004620200954377651,0.0012426349567249417,-0.04573218524456024,-0.025988956913352013,-0.03456931188702583,0.0014565333258360624,-0.033480990678071976,0.0051267025992274284,-0.0224468857049942,0.002427059458568692,-0.0018737156642600894,-0.042065784335136414,0.04258345440030098,0.023814937099814415,0.01990327052772045,-0.01291018445044756,-0.06063125655055046,-0.03769338130950928,-0.07458339631557465,0.022013694047927856,0.025371981784701347,0.011068681254982948,0.013264680281281471,0.008750531822443008,0.025847135111689568,0.008321292698383331,0.029541626572608948,-0.01673671416938305,0.06163135543465614,-0.022743312641978264,0.0205446258187294,-0.039805103093385696,-0.054851409047842026,-0.00019584140682127327,0.02562367543578148,0.014430085197091103,0.008363437838852406,-0.032747410237789154,0.0029446259140968323,0.005051490850746632,-0.016587644815444946,-0.053461626172065735,-0.018057391047477722,0.0017574180383235216,-0.020255696028470993,-0.10515980422496796,0.010834642685949802,0.028297295793890953,-0.0320957750082016,0.027178026735782623,0.002083448227494955,-0.0006055977428331971,-0.010798713192343712,0.005022915080189705,0.013282344676554203,0.03335754945874214,0.034023433923721313,-0.03113861382007599,-0.01822088472545147,0.006962313316762447,-0.0011108950711786747,-0.014106173068284988,-0.026337765157222748,-0.0143210981041193,-0.02700752764940262,-0.007888496853411198,-0.03791161626577377,0.023645887151360512,-0.033247243613004684,0.028374291956424713,-0.04049000144004822,0.03426893800497055,-0.033570297062397,-0.02285115234553814,-0.016229819506406784,-0.004224709235131741,0.0059221419505774975,-0.020540453493595123,0.05099983513355255,0.0670003667473793,-0.008611817844212055,0.001167984213680029,-0.003992682322859764,-0.005731820594519377,-0.040623415261507034,-0.050482314079999924,0.02983735501766205,0.008164731785655022,0.03261839970946312,-0.0017910860478878021,-0.010133900679647923,0.007244531996548176,-0.004349084571003914,0.02687392570078373,0.012069878168404102,0.0024290557485073805,0.047794874757528305,-0.01110672764480114,0.009095730260014534,0.020795777440071106,-0.013459758833050728,-0.04955742880702019,0.008094966411590576,-0.04922594875097275,-0.01257733441889286,0.023343097418546677,-0.04564351961016655,-0.05420701205730438,0.022892365232110023,-0.031971607357263565,0.010485107079148293,-0.0007456790772266686,0.01722341775894165,-0.015093855559825897,-0.022666214033961296,0.05253126472234726,0.06087696552276611,-0.006896815728396177,-0.04988084360957146,0.015529252588748932,-0.026002366095781326,0.015292203053832054,0.0026893874164670706,0.03331393748521805,-0.028223471716046333,0.027588078752160072,-0.03141411766409874,-0.023886000737547874,-0.03303253650665283,-0.018051855266094208,0.0018362582195550203,-0.015091217122972012,0.06780781596899033,-0.021600520238280296,-0.06042931601405144,-0.005537157412618399,0.022680062800645828,0.01527185458689928,-0.04477079212665558,-0.00016260585107374936,-0.015548952855169773,-0.012358170002698898,-0.01616673357784748,0.02329399064183235,-0.013003512285649776,-0.020058523863554,0.00528515363112092,0.02528766356408596,0.03361491113901138,0.01978769153356552,-0.016091691330075264,0.007080360781401396,-0.053457461297512054,-0.021468816325068474,0.054658547043800354,0.023458773270249367,0.013329165987670422,-0.022684931755065918,-0.04264269024133682,-0.0250596534460783,-0.006550959311425686,-0.03218996897339821,-0.04125464707612991,0.04672040417790413,0.011566206812858582,-0.00015890340728219599,0.042061399668455124,-0.000527026888448745,0.04016914591193199,0.03031199611723423,-0.037769898772239685,0.012084915302693844,0.01694878377020359,0.04685499146580696,0.030618254095315933,-0.020809916779398918,-0.04509655758738518,0.04809313267469406,-0.024044975638389587,0.02801992930471897,0.0028064176440238953,0.0227976031601429,0.017741216346621513,-0.016216618940234184,0.021157080307602882,-0.017885655164718628,0.01970064826309681,0.003779365448281169,0.01922314427793026,0.002325474051758647,-0.03644874691963196,0.027648339048027992,-0.03233892843127251,-0.022398555651307106,0.013777787797152996,-0.05072060972452164,-0.038854196667671204,-0.019065450876951218,-0.010071326978504658,-0.016617029905319214,0.02529529295861721,-0.029666902497410774,-0.0071236491203308105,0.004370039328932762,0.024619363248348236,0.0004415137809701264,0.016655363142490387,0.0208202563226223,0.053869787603616714,0.010442112572491169,0.0000711587636033073,0.01570144295692444,-0.009729753248393536,0.05023328959941864,0.017956621944904327,0.015857355669140816,0.04741624742746353,-0.01254494208842516,-0.016085950657725334,0.024367913603782654,-0.03952695056796074,0.006861272267997265,0.033378228545188904,-0.02630373276770115,-0.015721384435892105,-0.008418768644332886,0.005363226868212223,-0.0018659651977941394,0.049820877611637115,0.02498704381287098,0.025067197158932686,-0.00370806478895247,0.05902549996972084,-0.004024863243103027,0.023483650758862495,-0.01621074043214321,0.010321550071239471,0.0010913640726357698,0.0028722083661705256]]}}},"searchableProperties":["id","title","path","content","embedding","embeddingModel","created_at","ctime","mtime","tags","extension"],"searchablePropertiesWithTypes":{"id":"string","title":"string","path":"string","content":"string","embedding":"vector[1024]","embeddingModel":"string","created_at":"number","ctime":"number","mtime":"number","tags":"string[]","extension":"string"},"frequencies":{"id":{"1":{"c4fb9e0e3e1f8ee8799447731015b17c":1},"2":{"1a1a41b8dbfd0a7b6e89ade8a138e59b":1},"3":{"1003e1be09f34801247d695575da890c":1},"4":{"39d9abf539abd6d8bb2719ab7014adaa":1},"5":{"87b57dad889cee2b2d25db78f963ca47":1},"6":{"4f3e18994be94a3c0594cf9489994047":1},"7":{"eb1d7b55e0857c89bc42e5dddf63331c":1},"8":{"3bc28948358908d3d01d2ca76befd446":1},"9":{"52eff318f614703c2abcf5e4b8fb3c48":1},"10":{"ac19a4ed66ed03c73f16747b10244e60":1},"11":{"6489cb180a9fae1ff890dde104965413":1},"12":{"060790fafb1418088e58975fbf4492de":1},"13":{"80c10db6700bc9a63f0edec519ed2d39":1},"14":{"df4bf7fdff83911f964fbd71f6ea100e":1},"15":{"571343ebc6212776d6c44ac53b00a89b":1},"16":{"e0705a6359d1cde9c305ff71fbc392a0":1},"17":{"1c20ad280d809d7369882132cf8e1b21":1},"18":{"ec89b4f6b5d0639ad655376255f98693":1},"19":{"7352ecacad7370213f0cbe18df0496af":1},"20":{"47b52ef96a920ab33159b46456c1ee60":1},"21":{"7afb3aa06c849214862fc3641959d7eb":1}},"title":{"1":{},"2":{},"3":{"key":1},"4":{},"5":{},"6":{"redis":0.5,"memcached":0.5},"7":{"redis":1},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{"cache":0.5,"aside":0.5},"18":{},"19":{},"20":{},"21":{}},"path":{"1":{"md":1},"2":{"redis":0.5,"md":0.5},"3":{"redis":0.3333333333333333,"key":0.3333333333333333,"md":0.3333333333333333},"4":{"redis":0.5,"md":0.5},"5":{"redis":0.5,"md":0.5},"6":{"redis":0.3333333333333333,"memcached":0.3333333333333333,"md":0.3333333333333333},"7":{"redis":0.5,"md":0.5},"8":{"redis":0.5,"md":0.5},"9":{"redis":0.5,"md":0.5},"10":{"redis":0.5,"md":0.5},"11":{"redis":0.5,"md":0.5},"12":{"redis":0.5,"md":0.5},"13":{"redis":0.5,"md":0.5},"14":{"redis":0.5,"md":0.5},"15":{"redis":0.5,"md":0.5},"16":{"redis":0.5,"md":0.5},"17":{"redis":0.25,"cache":0.25,"aside":0.25,"md":0.25},"18":{"redis":0.5,"md":0.5},"19":{"redis":0.5,"md":0.5},"20":{"redis":0.5,"md":0.5},"21":{"redis":0.5,"md":0.5}},"content":{"1":{"16":0.0625,"36":0.0625,"40":0.0625,"45":0.0625,"2025":0.0625,"note":0.0625,"title":0.0625,"metadata":0.0625,"created":0.0625,"05":0.0625,"01":0.0625,"modified":0.0625,"04":0.0625,"block":0.0625,"content":0.0625,"cpu":0.0625},"2":{"1":0.023255813953488372,"2":0.023255813953488372,"19":0.023255813953488372,"47":0.023255813953488372,"2025":0.023255813953488372,"note":0.023255813953488372,"title":0.023255813953488372,"metadata":0.023255813953488372,"created":0.023255813953488372,"05":0.023255813953488372,"01":0.023255813953488372,"modified":0.023255813953488372,"block":0.023255813953488372,"content":0.023255813953488372,"pipeline":0.023255813953488372,"redis":0.023255813953488372,"discard":0.023255813953488372,"shell":0.023255813953488372,"count":0.023255813953488372,"get":0.023255813953488372,"multi":0.023255813953488372,"ok":0.023255813953488372,"decr":0.023255813953488372,"queued":0.023255813953488372,"name":0.023255813953488372,"xiaolin":0.023255813953488372,"tx":0.023255813953488372,"set":0.023255813953488372,"xiaolincoding":0.023255813953488372,"expire":0.023255813953488372,"10s":0.023255813953488372,"exec":0.023255813953488372,"error":0.023255813953488372,"err":0.023255813953488372,"value":0.023255813953488372,"is":0.023255813953488372,"not":0.023255813953488372,"an":0.023255813953488372,"integer":0.023255813953488372,"or":0.023255813953488372,"out":0.023255813953488372,"of":0.023255813953488372,"range":0.023255813953488372},"3":{"0":0.015873015873015872,"1":0.015873015873015872,"2":0.015873015873015872,"3":0.015873015873015872,"4":0.015873015873015872,"10":0.015873015873015872,"19":0.015873015873015872,"47":0.015873015873015872,"127":0.015873015873015872,"2025":0.015873015873015872,"5000":0.015873015873015872,"6379":0.015873015873015872,"10240":0.015873015873015872,"note":0.015873015873015872,"title":0.015873015873015872,"key":0.015873015873015872,"metadata":0.015873015873015872,"created":0.015873015873015872,"05":0.015873015873015872,"01":0.015873015873015872,"modified":0.015873015873015872,"block":0.015873015873015872,"content":0.015873015873015872,"value":0.015873015873015872,"string":0.015873015873015872,"kb":0.015873015873015872,"hash":0.015873015873015872,"list":0.015873015873015872,"set":0.015873015873015872,"zset":0.015873015873015872,"redis-cli":0.015873015873015872,"--bigkeys":0.015873015873015872,"shell":0.015873015873015872,"-h":0.015873015873015872,"-p":0.015873015873015872,"-a":0.015873015873015872,"password":0.015873015873015872,"redis":0.015873015873015872,"-i":0.015873015873015872,"bigkey":0.015873015873015872,"n":0.015873015873015872,"scan":0.015873015873015872,"type":0.015873015873015872,"strlen":0.015873015873015872,"llen":0.015873015873015872,"hlen":0.015873015873015872,"scard":0.015873015873015872,"zcard":0.015873015873015872,"memoryusage":0.015873015873015872,"rdbtools":0.015873015873015872,"rdb":0.015873015873015872,"dump":0.015873015873015872,"-c":0.015873015873015872,"memory":0.015873015873015872,"--bytes":0.015873015873015872,"-f":0.015873015873015872,"csv":0.015873015873015872,"hscan":0.015873015873015872,"srandmember":0.015873015873015872,"zremrangebyrank":0.015873015873015872,"pop":0.015873015873015872,"unlink":0.015873015873015872,"del":0.015873015873015872},"4":{"0":0.023809523809523808,"1":0.023809523809523808,"2":0.023809523809523808,"3":0.023809523809523808,"10":0.023809523809523808,"11":0.023809523809523808,"16":0.023809523809523808,"19":0.023809523809523808,"47":0.023809523809523808,"168":0.023809523809523808,"192":0.023809523809523808,"2025":0.023809523809523808,"6379":0.023809523809523808,"16383":0.023809523809523808,"16384":0.023809523809523808,"note":0.023809523809523808,"title":0.023809523809523808,"metadata":0.023809523809523808,"created":0.023809523809523808,"05":0.023809523809523808,"01":0.023809523809523808,"modified":0.023809523809523808,"block":0.023809523809523808,"content":0.023809523809523808,"redis":0.023809523809523808,"cluster":0.023809523809523808,"hash":0.023809523809523808,"slot":0.023809523809523808,"key":0.023809523809523808,"crc16":0.023809523809523808,"bit":0.023809523809523808,"create":0.023809523809523808,"meet":0.023809523809523808,"addslots":0.023809523809523808,"shell":0.023809523809523808,"redis-cli":0.023809523809523808,"-h":0.023809523809523808,"-p":0.023809523809523808,"leeder":0.023809523809523808,"min-slaves-to-write":0.023809523809523808,"x":0.023809523809523808,"min-slaves-max-lag":0.023809523809523808},"5":{"0":0.015384615384615385,"1":0.015384615384615385,"2":0.015384615384615385,"3":0.015384615384615385,"4":0.015384615384615385,"5":0.015384615384615385,"8":0.015384615384615385,"16":0.015384615384615385,"19":0.015384615384615385,"24":0.015384615384615385,"32":0.015384615384615385,"47":0.015384615384615385,"64":0.015384615384615385,"2025":0.015384615384615385,"note":0.015384615384615385,"title":0.015384615384615385,"metadata":0.015384615384615385,"created":0.015384615384615385,"05":0.015384615384615385,"01":0.015384615384615385,"modified":0.015384615384615385,"block":0.015384615384615385,"content":0.015384615384615385,"redis":0.015384615384615385,"key":0.015384615384615385,"conf":0.015384615384615385,"maxmemory":0.015384615384615385,"bytes":0.015384615384615385,"g":0.015384615384615385,"gb":0.015384615384615385,"noeviction":0.015384615384615385,"volatile-random":0.015384615384615385,"volatile-ttl":0.015384615384615385,"volatile-lru":0.015384615384615385,"volatile-lfu":0.015384615384615385,"allkeys-random":0.015384615384615385,"allkeys-lru":0.015384615384615385,"allkeys-lfu":0.015384615384615385,"shell":0.015384615384615385,"config":0.015384615384615385,"get":0.015384615384615385,"maxmemory-policy":0.015384615384615385,"lru":0.015384615384615385,"lfu":0.015384615384615385,"least":0.015384615384615385,"recently":0.015384615384615385,"used":0.015384615384615385,"frequently":0.015384615384615385,"c":0.015384615384615385,"typedef":0.015384615384615385,"struct":0.015384615384615385,"redisobject":0.015384615384615385,"bits":0.015384615384615385,"unsigned":0.015384615384615385,"robj":0.015384615384615385,"bit":0.015384615384615385,"ldt":0.015384615384615385,"last":0.015384615384615385,"decrement":0.015384615384615385,"time":0.015384615384615385,"logc":0.015384615384615385,"logistic":0.015384615384615385,"counter":0.015384615384615385,"lfu-decay-time":0.015384615384615385,"lfu-log-factor":0.015384615384615385},"6":{"1":0.04,"2":0.04,"3":0.04,"4":0.04,"19":0.04,"47":0.04,"2025":0.04,"note":0.04,"title":0.04,"redis":0.04,"memcached":0.04,"metadata":0.04,"created":0.04,"05":0.04,"01":0.04,"modified":0.04,"block":0.04,"content":0.04,"string":0.04,"hash":0.04,"list":0.04,"set":0.04,"zset":0.04,"key-value":0.04,"lua":0.04},"7":{"0":0.024390243902439025,"1":0.024390243902439025,"2":0.024390243902439025,"3":0.024390243902439025,"19":0.024390243902439025,"47":0.024390243902439025,"2025":0.024390243902439025,"10000":0.024390243902439025,"note":0.024390243902439025,"title":0.024390243902439025,"redis":0.024390243902439025,"metadata":0.024390243902439025,"created":0.024390243902439025,"05":0.024390243902439025,"01":0.024390243902439025,"modified":0.024390243902439025,"block":0.024390243902439025,"content":0.024390243902439025,"set":0.024390243902439025,"nx":0.024390243902439025,"key":0.024390243902439025,"ex":0.024390243902439025,"px":0.024390243902439025,"shell":0.024390243902439025,"lock_key":0.024390243902439025,"unique_value":0.024390243902439025,"del":0.024390243902439025,"lua":0.024390243902439025,"if":0.024390243902439025,"call":0.024390243902439025,"get":0.024390243902439025,"keys":0.024390243902439025,"argv":0.024390243902439025,"then":0.024390243902439025,"return":0.024390243902439025,"else":0.024390243902439025,"end":0.024390243902439025,"redlock":0.024390243902439025,"t1":0.024390243902439025,"n":0.024390243902439025,"t2":0.024390243902439025},"8":{"0":0.014084507042253521,"1":0.014084507042253521,"2":0.014084507042253521,"3":0.014084507042253521,"4":0.014084507042253521,"5":0.014084507042253521,"10":0.014084507042253521,"14":0.014084507042253521,"16":0.014084507042253521,"17":0.014084507042253521,"20":0.014084507042253521,"22":0.014084507042253521,"25":0.014084507042253521,"29":0.014084507042253521,"36":0.014084507042253521,"55":0.014084507042253521,"2025":0.014084507042253521,"note":0.014084507042253521,"title":0.014084507042253521,"metadata":0.014084507042253521,"created":0.014084507042253521,"04":0.014084507042253521,"modified":0.014084507042253521,"05":0.014084507042253521,"01":0.014084507042253521,"block":0.014084507042253521,"content":0.014084507042253521,"redis":0.014084507042253521,"key":0.014084507042253521,"expire":0.014084507042253521,"n":0.014084507042253521,"pexpire":0.014084507042253521,"expireat":0.014084507042253521,"pexpireat":0.014084507042253521,"set":0.014084507042253521,"value":0.014084507042253521,"ex":0.014084507042253521,"px":0.014084507042253521,"setex":0.014084507042253521,"ttl":0.014084507042253521,"persist":0.014084507042253521,"expires":0.014084507042253521,"dict":0.014084507042253521,"redisdb":0.014084507042253521,"c":0.014084507042253521,"typedef":0.014084507042253521,"struct":0.014084507042253521,"cpu":0.014084507042253521,"db":0.014084507042253521,"expireifneeded":0.014084507042253521,"int":0.014084507042253521,"robj":0.014084507042253521,"obj":0.014084507042253521,"if":0.014084507042253521,"keyisexpired":0.014084507042253521,"return":0.014084507042253521,"server":0.014084507042253521,"lazyfree_lazy_expire":0.014084507042253521,"dbasyncdelete":0.014084507042253521,"dbsyncdelete":0.014084507042253521,"conf":0.014084507042253521,"hz":0.014084507042253521,"active_expire_cycle_lookups_per_loop":0.014084507042253521,"ms":0.014084507042253521,"rdb":0.014084507042253521,"database":0.014084507042253521,"aof":0.014084507042253521,"append":0.014084507042253521,"only":0.014084507042253521,"file":0.014084507042253521,"del":0.014084507042253521},"9":{"0":0.008771929824561403,"1":0.008771929824561403,"2":0.008771929824561403,"3":0.008771929824561403,"4":0.008771929824561403,"5":0.008771929824561403,"6":0.008771929824561403,"7":0.008771929824561403,"8":0.008771929824561403,"21":0.008771929824561403,"25":0.008771929824561403,"29":0.008771929824561403,"32":0.008771929824561403,"64":0.008771929824561403,"254":0.008771929824561403,"2025":0.008771929824561403,"note":0.008771929824561403,"title":0.008771929824561403,"metadata":0.008771929824561403,"created":0.008771929824561403,"04":0.008771929824561403,"09":0.008771929824561403,"modified":0.008771929824561403,"block":0.008771929824561403,"content":0.008771929824561403,"redis":0.008771929824561403,"string":0.008771929824561403,"list":0.008771929824561403,"hash":0.008771929824561403,"set":0.008771929824561403,"zset":0.008771929824561403,"sds":0.008771929824561403,"quicklist":0.008771929824561403,"listpack":0.008771929824561403,"img":0.008771929824561403,"images":0.008771929824561403,"webp":0.008771929824561403,"c":0.008771929824561403,"o":0.008771929824561403,"n":0.008771929824561403,"ascii":0.008771929824561403,"len":0.008771929824561403,"alloc":0.008771929824561403,"-":0.008771929824561403,"flags":0.008771929824561403,"sdshdr5":0.008771929824561403,"sdshdr8":0.008771929824561403,"sdshdr16":0.008771929824561403,"sdshdr32":0.008771929824561403,"sdshdr64":0.008771929824561403,"buf":0.008771929824561403,"sdshdr":0.008771929824561403,"_":0.008771929824561403,"_attribute":0.008771929824561403,"packed":0.008771929824561403,"typedef":0.008771929824561403,"struct":0.008771929824561403,"listnode":0.008771929824561403,"prev":0.008771929824561403,"next":0.008771929824561403,"void":0.008771929824561403,"value":0.008771929824561403,"head":0.008771929824561403,"tail":0.008771929824561403,"dup":0.008771929824561403,"ptr":0.008771929824561403,"free":0.008771929824561403,"int":0.008771929824561403,"match":0.008771929824561403,"key":0.008771929824561403,"unsigned":0.008771929824561403,"long":0.008771929824561403,"null":0.008771929824561403,"zlbytes":0.008771929824561403,"zltail":0.008771929824561403,"zllen":0.008771929824561403,"zlend":0.008771929824561403,"0xff":0.008771929824561403,"entry":0.008771929824561403,"prevlen":0.008771929824561403,"encoding":0.008771929824561403,"data":0.008771929824561403,"rehash":0.008771929824561403,"key-value":0.008771929824561403,"load":0.008771929824561403,"factor":0.008771929824561403,"bgsave":0.008771929824561403,"bgrewriteaof":0.008771929824561403,"rdb":0.008771929824561403,"aof":0.008771929824561403,"intset":0.008771929824561403,"uint32_t":0.008771929824561403,"length":0.008771929824561403,"int8_t":0.008771929824561403,"contents":0.008771929824561403,"intset_enc_int16":0.008771929824561403,"int16_t":0.008771929824561403,"intset_enc_int32":0.008771929824561403,"int32_t":0.008771929824561403,"intset_enc_int64":0.008771929824561403,"int64_t":0.008771929824561403,"zskiplistnode":0.008771929824561403,"ele":0.008771929824561403,"double":0.008771929824561403,"score":0.008771929824561403,"backward":0.008771929824561403,"level":0.008771929824561403,"zskiplistlevel":0.008771929824561403,"forward":0.008771929824561403,"span":0.008771929824561403,"zskiplist":0.008771929824561403,"header":0.008771929824561403,"log":0.008771929824561403,"0-1":0.008771929824561403},"10":{"1":0.023809523809523808,"2":0.023809523809523808,"3":0.023809523809523808,"16":0.023809523809523808,"21":0.023809523809523808,"29":0.023809523809523808,"32":0.023809523809523808,"2025":0.023809523809523808,"note":0.023809523809523808,"title":0.023809523809523808,"metadata":0.023809523809523808,"created":0.023809523809523808,"04":0.023809523809523808,"09":0.023809523809523808,"modified":0.023809523809523808,"block":0.023809523809523808,"content":0.023809523809523808,"cont'd":0.023809523809523808,"quicklist":0.023809523809523808,"c":0.023809523809523808,"typedef":0.023809523809523808,"struct":0.023809523809523808,"quicklistnode":0.023809523809523808,"head":0.023809523809523808,"tail":0.023809523809523808,"unsigned":0.023809523809523808,"long":0.023809523809523808,"count":0.023809523809523808,"len":0.023809523809523808,"prev":0.023809523809523808,"next":0.023809523809523808,"char":0.023809523809523808,"z1":0.023809523809523808,"int":0.023809523809523808,"sz":0.023809523809523808,"listpack":0.023809523809523808,"img":0.023809523809523808,"images":0.023809523809523808,"webp":0.023809523809523808,"listpacknode":0.023809523809523808,"encoding":0.023809523809523808,"data":0.023809523809523808},"11":{"0":0.007575757575757576,"1":0.007575757575757576,"2":0.007575757575757576,"3":0.007575757575757576,"4":0.007575757575757576,"5":0.007575757575757576,"7":0.007575757575757576,"10":0.007575757575757576,"11":0.007575757575757576,"13":0.007575757575757576,"15":0.007575757575757576,"18":0.007575757575757576,"20":0.007575757575757576,"21":0.007575757575757576,"29":0.007575757575757576,"32":0.007575757575757576,"40":0.007575757575757576,"51":0.007575757575757576,"60":0.007575757575757576,"64":0.007575757575757576,"99":0.007575757575757576,"512":0.007575757575757576,"1001":0.007575757575757576,"2025":0.007575757575757576,"10000":0.007575757575757576,"111000102":0.007575757575757576,"note":0.007575757575757576,"title":0.007575757575757576,"metadata":0.007575757575757576,"created":0.007575757575757576,"04":0.007575757575757576,"09":0.007575757575757576,"modified":0.007575757575757576,"block":0.007575757575757576,"content":0.007575757575757576,"string":0.007575757575757576,"int":0.007575757575757576,"sds":0.007575757575757576,"value":0.007575757575757576,"512m":0.007575757575757576,"raw":0.007575757575757576,"embstr":0.007575757575757576,"shell":0.007575757575757576,"key-value":0.007575757575757576,"set":0.007575757575757576,"name":0.007575757575757576,"lin":0.007575757575757576,"ok":0.007575757575757576,"key":0.007575757575757576,"get":0.007575757575757576,"exists":0.007575757575757576,"integer":0.007575757575757576,"strlen":0.007575757575757576,"del":0.007575757575757576,"mset":0.007575757575757576,"key1":0.007575757575757576,"value1":0.007575757575757576,"key2":0.007575757575757576,"value2":0.007575757575757576,"mget":0.007575757575757576,"number":0.007575757575757576,"incr":0.007575757575757576,"incrby":0.007575757575757576,"decr":0.007575757575757576,"decrby":0.007575757575757576,"expire":0.007575757575757576,"ttl":0.007575757575757576,"ex":0.007575757575757576,"setex":0.007575757575757576,"not":0.007575757575757576,"setnx":0.007575757575757576,"json":0.007575757575757576,"user":0.007575757575757576,"'":0.007575757575757576,"xiaolin":0.007575757575757576,"age":0.007575757575757576,"id":0.007575757575757576,"xiaomei":0.007575757575757576,"redis":0.007575757575757576,"article":0.007575757575757576,"readcount":0.007575757575757576,"nx":0.007575757575757576,"lock_key":0.007575757575757576,"unique_value":0.007575757575757576,"px":0.007575757575757576,"10s":0.007575757575757576,"lua":0.007575757575757576,"if":0.007575757575757576,"call":0.007575757575757576,"keys":0.007575757575757576,"argv":0.007575757575757576,"then":0.007575757575757576,"return":0.007575757575757576,"else":0.007575757575757576,"end":0.007575757575757576,"list":0.007575757575757576,"-1":0.007575757575757576,"list-max-ziplist-entries":0.007575757575757576,"list-max-ziplist-value":0.007575757575757576,"quicklist":0.007575757575757576,"lpush":0.007575757575757576,"rpush":0.007575757575757576,"lpop":0.007575757575757576,"rpop":0.007575757575757576,"start":0.007575757575757576,"stop":0.007575757575757576,"lrange":0.007575757575757576,"timeout":0.007575757575757576,"blpop":0.007575757575757576,"brpop":0.007575757575757576,"stream":0.007575757575757576,"mq":0.007575757575757576,"stock":0.007575757575757576,"brpoplpush":0.007575757575757576,"hash":0.007575757575757576,"hash-max-ziplist-entries":0.007575757575757576,"hash-max-ziplist-value":0.007575757575757576,"listpack":0.007575757575757576,"hset":0.007575757575757576,"field":0.007575757575757576,"hget":0.007575757575757576,"hmset":0.007575757575757576,"hmget":0.007575757575757576,"hdel":0.007575757575757576,"hlen":0.007575757575757576,"hgetall":0.007575757575757576,"n":0.007575757575757576,"hincrby":0.007575757575757576,"uid":0.007575757575757576,"tom":0.007575757575757576,"jerry":0.007575757575757576,"cart":0.007575757575757576},"12":{"0":0.015873015873015872,"1":0.015873015873015872,"2":0.015873015873015872,"3":0.015873015873015872,"5":0.015873015873015872,"6":0.015873015873015872,"7":0.015873015873015872,"8":0.015873015873015872,"9":0.015873015873015872,"10":0.015873015873015872,"11":0.015873015873015872,"21":0.015873015873015872,"29":0.015873015873015872,"32":0.015873015873015872,"512":0.015873015873015872,"2025":0.015873015873015872,"note":0.015873015873015872,"title":0.015873015873015872,"metadata":0.015873015873015872,"created":0.015873015873015872,"04":0.015873015873015872,"09":0.015873015873015872,"modified":0.015873015873015872,"block":0.015873015873015872,"content":0.015873015873015872,"cont'd":0.015873015873015872,"set":0.015873015873015872,"-":0.015873015873015872,"set-maxinset-entries":0.015873015873015872,"redis":0.015873015873015872,"shell":0.015873015873015872,"key":0.015873015873015872,"sadd":0.015873015873015872,"member":0.015873015873015872,"merber":0.015873015873015872,"srem":0.015873015873015872,"smembers":0.015873015873015872,"scard":0.015873015873015872,"sismember":0.015873015873015872,"count":0.015873015873015872,"srandmember":0.015873015873015872,"spop":0.015873015873015872,"sinter":0.015873015873015872,"destination":0.015873015873015872,"sinterstore":0.015873015873015872,"sunion":0.015873015873015872,"sunionstore":0.015873015873015872,"sdiff":0.015873015873015872,"sdiffstore":0.015873015873015872,"uid":0.015873015873015872,"article":0.015873015873015872,"integer":0.015873015873015872,"id":0.015873015873015872,"value":0.015873015873015872,"lucky":0.015873015873015872,"tom":0.015873015873015872,"jerry":0.015873015873015872,"john":0.015873015873015872,"sean":0.015873015873015872,"marry":0.015873015873015872,"lindy":0.015873015873015872,"sary":0.015873015873015872,"mark":0.015873015873015872},"13":{"0":0.008,"1":0.008,"2":0.008,"3":0.008,"4":0.008,"5":0.008,"6":0.008,"7":0.008,"8":0.008,"9":0.008,"21":0.008,"29":0.008,"32":0.008,"40":0.008,"50":0.008,"51":0.008,"64":0.008,"100":0.008,"128":0.008,"132":0.008,"133":0.008,"134":0.008,"150":0.008,"200":0.008,"2022":0.008,"2025":0.008,"10086":0.008,"202206":0.008,"note":0.008,"title":0.008,"metadata":0.008,"created":0.008,"04":0.008,"09":0.008,"modified":0.008,"block":0.008,"content":0.008,"cont'd":0.008,"zset":0.008,"redis":0.008,"listpack":0.008,"shell":0.008,"key":0.008,"zadd":0.008,"score":0.008,"member":0.008,"zrem":0.008,"zscore":0.008,"zcard":0.008,"increment":0.008,"zincrby":0.008,"start":0.008,"stop":0.008,"zrange":0.008,"withscores":0.008,"zrevrange":0.008,"zrangebyscore":0.008,"min":0.008,"max":0.008,"limit":0.008,"offset":0.008,"count":0.008,"zrangebylex":0.008,"zrevrangebylex":0.008,"set":0.008,"numberkeys":0.008,"weights":0.008,"zunionstore":0.008,"destkey":0.008,"zinterstore":0.008,"article":0.008,"user":0.008,"xiaolin":0.008,"ranking":0.008,"integer":0.008,"phone":0.008,"13100111100":0.008,"13110114300":0.008,"13132110901":0.008,"13200111100":0.008,"13210414300":0.008,"13252110901":0.008,"13300111100":0.008,"13310414300":0.008,"13352110901":0.008,"-":0.008,"names":0.008,"toumas":0.008,"jake":0.008,"bluetuo":0.008,"gaodeng":0.008,"aimini":0.008,"aidehua":0.008,"a":0.008,"b":0.008,"c":0.008,"z":0.008,"bitmap":0.008,"string":0.008,"value":0.008,"setbit":0.008,"getbit":0.008,"end":0.008,"bitcount":0.008,"operations":0.008,"and":0.008,"or":0.008,"xor":0.008,"not":0.008,"result":0.008,"key1":0.008,"keyn":0.008,"bitop":0.008,"bitpos":0.008,"id":0.008,"uid":0.008,"sign":0.008,"login_status":0.008,"userid":0.008,"bit":0.008,"n":0.008,"destmap":0.008,"01":0.008,"02":0.008,"03":0.008},"14":{"0":0.008849557522123894,"1":0.008849557522123894,"2":0.008849557522123894,"3":0.008849557522123894,"4":0.008849557522123894,"5":0.008849557522123894,"8":0.008849557522123894,"9":0.008849557522123894,"10":0.008849557522123894,"12":0.008849557522123894,"21":0.008849557522123894,"29":0.008849557522123894,"32":0.008849557522123894,"33":0.008849557522123894,"39":0.008849557522123894,"64":0.008849557522123894,"81":0.008849557522123894,"116":0.008849557522123894,"2025":0.008849557522123894,"10000":0.008849557522123894,"410700":0.008849557522123894,"note":0.008849557522123894,"title":0.008849557522123894,"metadata":0.008849557522123894,"created":0.008849557522123894,"04":0.008849557522123894,"09":0.008849557522123894,"modified":0.008849557522123894,"block":0.008849557522123894,"content":0.008849557522123894,"cont'd":0.008849557522123894,"hyperloglog":0.008849557522123894,"redis":0.008849557522123894,"kb":0.008849557522123894,"shell":0.008849557522123894,"pfadd":0.008849557522123894,"key":0.008849557522123894,"element":0.008849557522123894,"pfcount":0.008849557522123894,"pfmerge":0.008849557522123894,"destkey":0.008849557522123894,"sourcekey":0.008849557522123894,"uv":0.008849557522123894,"page1":0.008849557522123894,"user1":0.008849557522123894,"user2":0.008849557522123894,"user3":0.008849557522123894,"user4":0.008849557522123894,"user5":0.008849557522123894,"geo":0.008849557522123894,"zset":0.008849557522123894,"geohash":0.008849557522123894,"longitude":0.008849557522123894,"latitude":0.008849557522123894,"member":0.008849557522123894,"geoadd":0.008849557522123894,"nil":0.008849557522123894,"geopos":0.008849557522123894,"geodist":0.008849557522123894,"member1":0.008849557522123894,"member2":0.008849557522123894,"m":0.008849557522123894,"km":0.008849557522123894,"ft":0.008849557522123894,"mi":0.008849557522123894,"georadius":0.008849557522123894,"radius":0.008849557522123894,"withcoord":0.008849557522123894,"withdist":0.008849557522123894,"withhash":0.008849557522123894,"count":0.008849557522123894,"asc":0.008849557522123894,"desc":0.008849557522123894,"store":0.008849557522123894,"storedist":0.008849557522123894,"id":0.008849557522123894,"034579":0.008849557522123894,"030452":0.008849557522123894,"cars":0.008849557522123894,"locations":0.008849557522123894,"054579":0.008849557522123894,"stream":0.008849557522123894,"xadd":0.008849557522123894,"xread":0.008849557522123894,"xreadgroup":0.008849557522123894,"xpending":0.008849557522123894,"xack":0.008849557522123894,"mymq":0.008849557522123894,"name":0.008849557522123894,"xiaolin":0.008849557522123894,"1654254953808-0":0.008849557522123894,"1654254953808":0.008849557522123894,"brpop":0.008849557522123894,"00s":0.008849557522123894,"xgroup":0.008849557522123894,"group1":0.008849557522123894,"create":0.008849557522123894,"ok":0.008849557522123894,"consumer1":0.008849557522123894,"group":0.008849557522123894,"pending":0.008849557522123894,"list":0.008849557522123894,"group2":0.008849557522123894,"integer":0.008849557522123894,"1654256271337-0":0.008849557522123894,"consumer2":0.008849557522123894,"consumer3":0.008849557522123894,"-":0.008849557522123894,"1654256265584-0":0.008849557522123894,"aof":0.008849557522123894,"oom":0.008849557522123894,"kafka":0.008849557522123894,"rabbitmq":0.008849557522123894},"15":{"1":0.06666666666666667,"2":0.06666666666666667,"21":0.06666666666666667,"29":0.06666666666666667,"32":0.06666666666666667,"2025":0.06666666666666667,"note":0.06666666666666667,"title":0.06666666666666667,"metadata":0.06666666666666667,"created":0.06666666666666667,"04":0.06666666666666667,"09":0.06666666666666667,"modified":0.06666666666666667,"block":0.06666666666666667,"content":0.06666666666666667},"16":{"1":0.027777777777777776,"2":0.027777777777777776,"3":0.027777777777777776,"8":0.027777777777777776,"10":0.027777777777777776,"21":0.027777777777777776,"29":0.027777777777777776,"32":0.027777777777777776,"2025":0.027777777777777776,"note":0.027777777777777776,"title":0.027777777777777776,"metadata":0.027777777777777776,"created":0.027777777777777776,"04":0.027777777777777776,"09":0.027777777777777776,"modified":0.027777777777777776,"block":0.027777777777777776,"content":0.027777777777777776,"redis":0.027777777777777776,"master":0.027777777777777776,"slave":0.027777777777777776,"sentinel":0.027777777777777776,"ping":0.027777777777777776,"down-after-milliseconds":0.027777777777777776,"quorum":0.027777777777777776,"id":0.027777777777777776,"leader":0.027777777777777776,"ip":0.027777777777777776,"shell":0.027777777777777776,"monitor":0.027777777777777776,"master-name":0.027777777777777776,"redis-port":0.027777777777777776,"_":0.027777777777777776,"_sentinel":0.027777777777777776,"hello":0.027777777777777776,"info":0.027777777777777776},"17":{"1":0.029411764705882353,"2":0.029411764705882353,"21":0.029411764705882353,"29":0.029411764705882353,"32":0.029411764705882353,"2025":0.029411764705882353,"note":0.029411764705882353,"title":0.029411764705882353,"cache":0.029411764705882353,"aside":0.029411764705882353,"metadata":0.029411764705882353,"created":0.029411764705882353,"04":0.029411764705882353,"09":0.029411764705882353,"modified":0.029411764705882353,"block":0.029411764705882353,"content":0.029411764705882353,"shell":0.029411764705882353,"redis":0.029411764705882353,"delkey":0.029411764705882353,"x":0.029411764705882353,"db":0.029411764705882353,"update":0.029411764705882353,"thread":0.029411764705882353,"sleep":0.029411764705882353,"n":0.029411764705882353,"mysql":0.029411764705882353,"binlog":0.029411764705882353,"canal":0.029411764705882353,"dump":0.029411764705882353,"biglog":0.029411764705882353,"img":0.029411764705882353,"images":0.029411764705882353,"webp":0.029411764705882353},"18":{"0":0.0196078431372549,"1":0.0196078431372549,"2":0.0196078431372549,"3":0.0196078431372549,"5":0.0196078431372549,"8":0.0196078431372549,"17":0.0196078431372549,"21":0.0196078431372549,"27":0.0196078431372549,"29":0.0196078431372549,"32":0.0196078431372549,"2025":0.0196078431372549,"note":0.0196078431372549,"title":0.0196078431372549,"metadata":0.0196078431372549,"created":0.0196078431372549,"04":0.0196078431372549,"09":0.0196078431372549,"modified":0.0196078431372549,"block":0.0196078431372549,"content":0.0196078431372549,"redis":0.0196078431372549,"replicaof":0.0196078431372549,"slaveof":0.0196078431372549,"a":0.0196078431372549,"b":0.0196078431372549,"shell":0.0196078431372549,"ip":0.0196078431372549,"img":0.0196078431372549,"images":0.0196078431372549,"webp":0.0196078431372549,"psync":0.0196078431372549,"runid":0.0196078431372549,"offset":0.0196078431372549,"id":0.0196078431372549,"-1":0.0196078431372549,"fullresync":0.0196078431372549,"bgsave":0.0196078431372549,"rdb":0.0196078431372549,"replication":0.0196078431372549,"buffer":0.0196078431372549,"tcp":0.0196078431372549,"fork":0.0196078431372549,"continue":0.0196078431372549,"repl_backlog_buffer":0.0196078431372549,"master_repl_offset":0.0196078431372549,"slave_repl_offset":0.0196078431372549,"second":0.0196078431372549,"write_size_per_second":0.0196078431372549,"repl-backlog-buffer":0.0196078431372549,"1mb":0.0196078431372549},"19":{"0":0.017857142857142856,"1":0.017857142857142856,"2":0.017857142857142856,"3":0.017857142857142856,"10":0.017857142857142856,"13":0.017857142857142856,"16":0.017857142857142856,"27":0.017857142857142856,"33":0.017857142857142856,"52":0.017857142857142856,"59":0.017857142857142856,"60":0.017857142857142856,"300":0.017857142857142856,"900":0.017857142857142856,"2025":0.017857142857142856,"10000":0.017857142857142856,"note":0.017857142857142856,"title":0.017857142857142856,"metadata":0.017857142857142856,"created":0.017857142857142856,"04":0.017857142857142856,"modified":0.017857142857142856,"block":0.017857142857142856,"content":0.017857142857142856,"aof":0.017857142857142856,"redis":0.017857142857142856,"append":0.017857142857142856,"only":0.017857142857142856,"file":0.017857142857142856,"conf":0.017857142857142856,"shell":0.017857142857142856,"appendonly":0.017857142857142856,"yes":0.017857142857142856,"no":0.017857142857142856,"appendfilename":0.017857142857142856,"img":0.017857142857142856,"images":0.017857142857142856,"webp":0.017857142857142856,"server":0.017857142857142856,"aof_buf":0.017857142857142856,"write":0.017857142857142856,"page":0.017857142857142856,"cache":0.017857142857142856,"appendfsync":0.017857142857142856,"always":0.017857142857142856,"everysec":0.017857142857142856,"bgrewriteaof":0.017857142857142856,"fork":0.017857142857142856,"cpu":0.017857142857142856,"copy":0.017857142857142856,"on":0.017857142857142856,"rdb":0.017857142857142856,"save":0.017857142857142856,"bgsave":0.017857142857142856,"redis4":0.017857142857142856,"aof-use-rdb-preamble":0.017857142857142856},"20":{"0":0.034482758620689655,"1":0.034482758620689655,"2":0.034482758620689655,"3":0.034482758620689655,"4":0.034482758620689655,"6":0.034482758620689655,"8":0.034482758620689655,"12":0.034482758620689655,"13":0.034482758620689655,"14":0.034482758620689655,"27":0.034482758620689655,"28":0.034482758620689655,"55":0.034482758620689655,"2025":0.034482758620689655,"note":0.034482758620689655,"title":0.034482758620689655,"metadata":0.034482758620689655,"created":0.034482758620689655,"04":0.034482758620689655,"05":0.034482758620689655,"modified":0.034482758620689655,"block":0.034482758620689655,"content":0.034482758620689655,"n":0.034482758620689655,"img":0.034482758620689655,"images":0.034482758620689655,"webp":0.034482758620689655,"x":0.034482758620689655,"y":0.034482758620689655},"21":{"1":0.04,"2":0.04,"3":0.04,"4":0.04,"11":0.04,"13":0.04,"15":0.04,"27":0.04,"56":0.04,"58":0.04,"2025":0.04,"note":0.04,"title":0.04,"metadata":0.04,"created":0.04,"04":0.04,"modified":0.04,"block":0.04,"content":0.04,"redis":0.04,"key":0.04,"api":0.04,"img":0.04,"images":0.04,"webp":0.04}},"embeddingModel":{"1":{"bge-m3":1},"2":{"bge-m3":1},"3":{"bge-m3":1},"4":{"bge-m3":1},"5":{"bge-m3":1},"6":{"bge-m3":1},"7":{"bge-m3":1},"8":{"bge-m3":1},"9":{"bge-m3":1},"10":{"bge-m3":1},"11":{"bge-m3":1},"12":{"bge-m3":1},"13":{"bge-m3":1},"14":{"bge-m3":1},"15":{"bge-m3":1},"16":{"bge-m3":1},"17":{"bge-m3":1},"18":{"bge-m3":1},"19":{"bge-m3":1},"20":{"bge-m3":1},"21":{"bge-m3":1}},"tags":{},"extension":{"1":{"md":1},"2":{"md":1},"3":{"md":1},"4":{"md":1},"5":{"md":1},"6":{"md":1},"7":{"md":1},"8":{"md":1},"9":{"md":1},"10":{"md":1},"11":{"md":1},"12":{"md":1},"13":{"md":1},"14":{"md":1},"15":{"md":1},"16":{"md":1},"17":{"md":1},"18":{"md":1},"19":{"md":1},"20":{"md":1},"21":{"md":1}}},"tokenOccurrences":{"id":{"c4fb9e0e3e1f8ee8799447731015b17c":1,"1a1a41b8dbfd0a7b6e89ade8a138e59b":1,"1003e1be09f34801247d695575da890c":1,"39d9abf539abd6d8bb2719ab7014adaa":1,"87b57dad889cee2b2d25db78f963ca47":1,"4f3e18994be94a3c0594cf9489994047":1,"eb1d7b55e0857c89bc42e5dddf63331c":1,"3bc28948358908d3d01d2ca76befd446":1,"52eff318f614703c2abcf5e4b8fb3c48":1,"ac19a4ed66ed03c73f16747b10244e60":1,"6489cb180a9fae1ff890dde104965413":1,"060790fafb1418088e58975fbf4492de":1,"80c10db6700bc9a63f0edec519ed2d39":1,"df4bf7fdff83911f964fbd71f6ea100e":1,"571343ebc6212776d6c44ac53b00a89b":1,"e0705a6359d1cde9c305ff71fbc392a0":1,"1c20ad280d809d7369882132cf8e1b21":1,"ec89b4f6b5d0639ad655376255f98693":1,"7352ecacad7370213f0cbe18df0496af":1,"47b52ef96a920ab33159b46456c1ee60":1,"7afb3aa06c849214862fc3641959d7eb":1},"title":{"key":1,"redis":2,"memcached":1,"cache":1,"aside":1},"path":{"md":21,"redis":20,"key":1,"memcached":1,"cache":1,"aside":1},"content":{"0":13,"1":20,"2":20,"3":17,"4":10,"5":8,"6":4,"7":4,"8":8,"9":3,"10":8,"11":4,"12":2,"13":4,"14":2,"15":2,"16":6,"17":2,"18":1,"19":6,"20":2,"21":10,"22":1,"24":1,"25":2,"27":4,"28":1,"29":11,"32":11,"33":2,"36":2,"39":1,"40":3,"45":1,"47":6,"50":1,"51":2,"52":1,"55":2,"56":1,"58":1,"59":1,"60":2,"64":5,"81":1,"99":1,"100":1,"116":1,"127":1,"128":1,"132":1,"133":1,"134":1,"150":1,"168":1,"192":1,"200":1,"254":1,"300":1,"512":2,"900":1,"1001":1,"2022":1,"2025":21,"5000":1,"6379":2,"10000":4,"10086":1,"10240":1,"16383":1,"16384":1,"202206":1,"410700":1,"111000102":1,"note":21,"title":21,"metadata":21,"created":21,"05":9,"01":9,"modified":21,"04":15,"block":21,"content":21,"cpu":3,"pipeline":1,"redis":17,"discard":1,"shell":13,"count":5,"get":4,"multi":1,"ok":3,"decr":2,"queued":1,"name":3,"xiaolin":4,"tx":1,"set":9,"xiaolincoding":1,"expire":3,"10s":2,"exec":1,"error":1,"err":1,"value":7,"is":1,"not":3,"an":1,"integer":5,"or":2,"out":1,"of":1,"range":1,"key":11,"string":5,"kb":2,"hash":5,"list":5,"zset":5,"redis-cli":2,"--bigkeys":1,"-h":2,"-p":2,"-a":1,"password":1,"-i":1,"bigkey":1,"n":8,"scan":1,"type":1,"strlen":2,"llen":1,"hlen":2,"scard":2,"zcard":2,"memoryusage":1,"rdbtools":1,"rdb":5,"dump":2,"-c":1,"memory":1,"--bytes":1,"-f":1,"csv":1,"hscan":1,"srandmember":2,"zremrangebyrank":1,"pop":1,"unlink":1,"del":4,"cluster":1,"slot":1,"crc16":1,"bit":3,"create":2,"meet":1,"addslots":1,"leeder":1,"min-slaves-to-write":1,"x":3,"min-slaves-max-lag":1,"conf":3,"maxmemory":1,"bytes":1,"g":1,"gb":1,"noeviction":1,"volatile-random":1,"volatile-ttl":1,"volatile-lru":1,"volatile-lfu":1,"allkeys-random":1,"allkeys-lru":1,"allkeys-lfu":1,"config":1,"maxmemory-policy":1,"lru":1,"lfu":1,"least":1,"recently":1,"used":1,"frequently":1,"c":5,"typedef":4,"struct":4,"redisobject":1,"bits":1,"unsigned":3,"robj":2,"ldt":1,"last":1,"decrement":1,"time":1,"logc":1,"logistic":1,"counter":1,"lfu-decay-time":1,"lfu-log-factor":1,"memcached":1,"key-value":3,"lua":3,"nx":2,"ex":3,"px":3,"lock_key":2,"unique_value":2,"if":3,"call":2,"keys":2,"argv":2,"then":2,"return":3,"else":2,"end":3,"redlock":1,"t1":1,"t2":1,"pexpire":1,"expireat":1,"pexpireat":1,"setex":2,"ttl":2,"persist":1,"expires":1,"dict":1,"redisdb":1,"db":2,"expireifneeded":1,"int":4,"obj":1,"keyisexpired":1,"server":2,"lazyfree_lazy_expire":1,"dbasyncdelete":1,"dbsyncdelete":1,"hz":1,"active_expire_cycle_lookups_per_loop":1,"ms":1,"database":1,"aof":4,"append":2,"only":2,"file":2,"09":10,"sds":2,"quicklist":3,"listpack":4,"img":7,"images":7,"webp":7,"o":1,"ascii":1,"len":2,"alloc":1,"-":4,"flags":1,"sdshdr5":1,"sdshdr8":1,"sdshdr16":1,"sdshdr32":1,"sdshdr64":1,"buf":1,"sdshdr":1,"_":2,"_attribute":1,"packed":1,"listnode":1,"prev":2,"next":2,"void":1,"head":2,"tail":2,"dup":1,"ptr":1,"free":1,"match":1,"long":2,"null":1,"zlbytes":1,"zltail":1,"zllen":1,"zlend":1,"0xff":1,"entry":1,"prevlen":1,"encoding":2,"data":2,"rehash":1,"load":1,"factor":1,"bgsave":3,"bgrewriteaof":2,"intset":1,"uint32_t":1,"length":1,"int8_t":1,"contents":1,"intset_enc_int16":1,"int16_t":1,"intset_enc_int32":1,"int32_t":1,"intset_enc_int64":1,"int64_t":1,"zskiplistnode":1,"ele":1,"double":1,"score":2,"backward":1,"level":1,"zskiplistlevel":1,"forward":1,"span":1,"zskiplist":1,"header":1,"log":1,"0-1":1,"cont'd":4,"quicklistnode":1,"char":1,"z1":1,"sz":1,"listpacknode":1,"512m":1,"raw":1,"embstr":1,"lin":1,"exists":1,"mset":1,"key1":2,"value1":1,"key2":1,"value2":1,"mget":1,"number":1,"incr":1,"incrby":1,"decrby":1,"setnx":1,"json":1,"user":2,"'":1,"age":1,"id":6,"xiaomei":1,"article":3,"readcount":1,"-1":2,"list-max-ziplist-entries":1,"list-max-ziplist-value":1,"lpush":1,"rpush":1,"lpop":1,"rpop":1,"start":2,"stop":2,"lrange":1,"timeout":1,"blpop":1,"brpop":2,"stream":2,"mq":1,"stock":1,"brpoplpush":1,"hash-max-ziplist-entries":1,"hash-max-ziplist-value":1,"hset":1,"field":1,"hget":1,"hmset":1,"hmget":1,"hdel":1,"hgetall":1,"hincrby":1,"uid":3,"tom":2,"jerry":2,"cart":1,"set-maxinset-entries":1,"sadd":1,"member":3,"merber":1,"srem":1,"smembers":1,"sismember":1,"spop":1,"sinter":1,"destination":1,"sinterstore":1,"sunion":1,"sunionstore":1,"sdiff":1,"sdiffstore":1,"lucky":1,"john":1,"sean":1,"marry":1,"lindy":1,"sary":1,"mark":1,"zadd":1,"zrem":1,"zscore":1,"increment":1,"zincrby":1,"zrange":1,"withscores":1,"zrevrange":1,"zrangebyscore":1,"min":1,"max":1,"limit":1,"offset":2,"zrangebylex":1,"zrevrangebylex":1,"numberkeys":1,"weights":1,"zunionstore":1,"destkey":2,"zinterstore":1,"ranking":1,"phone":1,"13100111100":1,"13110114300":1,"13132110901":1,"13200111100":1,"13210414300":1,"13252110901":1,"13300111100":1,"13310414300":1,"13352110901":1,"names":1,"toumas":1,"jake":1,"bluetuo":1,"gaodeng":1,"aimini":1,"aidehua":1,"a":2,"b":2,"z":1,"bitmap":1,"setbit":1,"getbit":1,"bitcount":1,"operations":1,"and":1,"xor":1,"result":1,"keyn":1,"bitop":1,"bitpos":1,"sign":1,"login_status":1,"userid":1,"destmap":1,"02":1,"03":1,"hyperloglog":1,"pfadd":1,"element":1,"pfcount":1,"pfmerge":1,"sourcekey":1,"uv":1,"page1":1,"user1":1,"user2":1,"user3":1,"user4":1,"user5":1,"geo":1,"geohash":1,"longitude":1,"latitude":1,"geoadd":1,"nil":1,"geopos":1,"geodist":1,"member1":1,"member2":1,"m":1,"km":1,"ft":1,"mi":1,"georadius":1,"radius":1,"withcoord":1,"withdist":1,"withhash":1,"asc":1,"desc":1,"store":1,"storedist":1,"034579":1,"030452":1,"cars":1,"locations":1,"054579":1,"xadd":1,"xread":1,"xreadgroup":1,"xpending":1,"xack":1,"mymq":1,"1654254953808-0":1,"1654254953808":1,"00s":1,"xgroup":1,"group1":1,"consumer1":1,"group":1,"pending":1,"group2":1,"1654256271337-0":1,"consumer2":1,"consumer3":1,"1654256265584-0":1,"oom":1,"kafka":1,"rabbitmq":1,"master":1,"slave":1,"sentinel":1,"ping":1,"down-after-milliseconds":1,"quorum":1,"leader":1,"ip":2,"monitor":1,"master-name":1,"redis-port":1,"_sentinel":1,"hello":1,"info":1,"cache":2,"aside":1,"delkey":1,"update":1,"thread":1,"sleep":1,"mysql":1,"binlog":1,"canal":1,"biglog":1,"replicaof":1,"slaveof":1,"psync":1,"runid":1,"fullresync":1,"replication":1,"buffer":1,"tcp":1,"fork":2,"continue":1,"repl_backlog_buffer":1,"master_repl_offset":1,"slave_repl_offset":1,"second":1,"write_size_per_second":1,"repl-backlog-buffer":1,"1mb":1,"appendonly":1,"yes":1,"no":1,"appendfilename":1,"aof_buf":1,"write":1,"page":1,"appendfsync":1,"always":1,"everysec":1,"copy":1,"on":1,"save":1,"redis4":1,"aof-use-rdb-preamble":1,"y":1,"api":1},"embeddingModel":{"bge-m3":21},"tags":{},"extension":{"md":21}},"avgFieldLength":{"id":1,"title":0.2857142857142857,"path":2.142857142857143,"content":57.19047619047619,"embeddingModel":1,"tags":0,"extension":1},"fieldLengths":{"id":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1},"title":{"1":0,"2":0,"3":1,"4":0,"5":0,"6":2,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":2,"18":0,"19":0,"20":0,"21":0},"path":{"1":1,"2":2,"3":3,"4":2,"5":2,"6":3,"7":2,"8":2,"9":2,"10":2,"11":2,"12":2,"13":2,"14":2,"15":2,"16":2,"17":4,"18":2,"19":2,"20":2,"21":2},"content":{"1":16,"2":43,"3":63,"4":42,"5":65,"6":25,"7":41,"8":71,"9":114,"10":42,"11":132,"12":63,"13":125,"14":113,"15":15,"16":36,"17":34,"18":51,"19":56,"20":29,"21":25},"embeddingModel":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1},"tags":{},"extension":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1}}},"docs":{"docs":{"1":{"title":"Redis和Memcached","path":"redis/Redis和Memcached.md","embeddingModel":"bge-m3","ctime":1746035239710,"mtime":1746035239711,"tags":[],"extension":"md","metadata":{"created":"2025/05/01 01:47:19","modified":"2025/05/01 01:47:19"},"id":"4f3e18994be94a3c0594cf9489994047","content":"\n\nNOTE TITLE: [[Redis和Memcached]]\n\nMETADATA:{\"created\":\"2025/05/01 01:47:19\",\"modified\":\"2025/05/01 01:47:19\"}\n\nNOTE BLOCK CONTENT:\n\n## 共同点\r\n\r\n1. 都是基于内存的数据库，一般都用来当作缓存使用\r\n2. 都有过期策略\r\n3. 两者都性能都非常高\r\n\r\n## 区别\r\n\r\n1. Redis 支持的数据类型更丰富（String、Hash、List、Set、ZSet），而 Memcached 只支持最简单的 key-value 数据类型\r\n2. Redis 支持数据的持久化，可以将内存中的数据保存在磁盘中，重启时可以再次加载进行使用，而 Memcached 没有持久化功能，数据全部存在内存中，Memcached 重启或挂掉后，数据就丢失了\r\n3. Redis 原生支持集群模式，Memcached 没有原生的集群模式，需要依靠客户端实现往集群中分片写入数据\r\n4. Redis 支持发布订阅模型、Lua 脚本、事务等功能，而 Memcached 不支持","embedding":[0.0068552224,0.012190809,-0.04471082,0.030355385,-0.031040767,-0.05392852,0.003511008,0.054057036,0.039197262,0.03142083,-0.048255596,-0.03494699,0.01001971,0.028538493,0.008401182,0.011536785,0.00024477422,-0.015944386,-0.002809077,0.021281688,0.028764296,0.027369028,0.036221094,0.036045223,0.010876658,-0.004979135,-0.028166074,-0.0031103352,0.049083535,0.042018455,0.033800747,-0.013947775,0.04297821,-0.007214175,-0.009295161,-0.015558323,-0.02123276,-0.025097115,-0.021275299,-0.027407758,0.021403138,0.002304054,0.0544931,0.009975734,0.028833142,-0.029585816,0.029879127,-0.030930026,-0.035869054,-0.026207691,-0.04711069,-0.022785883,0.069302045,-0.032932565,-0.017010722,0.059175357,-0.024943737,-0.03126684,-0.05153159,0.02772559,0.0073575415,-0.0035102072,-0.024880614,-0.007610055,-0.001548795,0.03907014,-0.024293816,-0.0106118675,-0.020036554,-0.08613338,-0.006784204,0.020779101,-0.009130536,-0.028270891,-0.015509304,-0.01668695,-0.003909321,-0.005874757,-0.04736003,-0.03185152,0.007784077,-0.023050455,0.019371664,0.02741815,-0.05600261,-0.002023596,-0.034995444,0.03856266,0.069532186,-0.022122432,0.019170517,-0.028226793,-0.027628599,-0.056885567,0.046325024,0.0070895692,0.012777202,0.008562214,0.10232955,0.0016603406,0.011232598,-0.00734836,0.00073995645,0.026535267,0.07058051,0.018231796,0.052619375,0.013323687,-0.019209648,0.0002328885,0.036531072,-0.014547597,-0.025765551,0.010779316,0.005477443,-0.04918391,-0.00838269,-0.020183917,0.0054344796,-0.0002453662,0.02047152,0.054166235,0.06553883,-0.006755711,-0.028193394,0.02352207,-0.031623818,-0.013548361,0.0015031034,0.012462424,-0.0012523041,0.061099235,0.0021566895,-0.008750144,-0.017497702,0.0041433894,-0.0066456874,0.04935765,0.030758647,-0.04826241,0.04939395,0.0061157937,-0.018201927,-0.037851218,0.044776198,-0.02409711,0.05163407,0.05035554,-0.00092255574,-0.036556024,-0.014767449,-0.013099726,-0.0072815167,0.012218568,-0.033490714,-0.042628728,0.009001746,0.01391219,0.03410296,0.026491078,-0.09362124,-0.029011618,-0.030579638,0.022412859,0.042637914,-0.0074793203,0.013384896,-0.008085913,-0.003100676,-0.005155195,-0.0029612633,-0.025531532,0.031313013,0.019287676,0.048529904,0.036704402,0.08791162,-0.0005904597,0.044307224,-0.04284906,-0.06838367,0.0013664142,-0.035338163,-0.030178506,-0.03121572,0.009970257,0.004770958,-0.0053225216,-0.0050082775,0.025136678,-0.025926331,-0.00574954,0.023075445,0.04265024,0.028604176,-0.010032773,0.011065923,0.015995545,-0.0017716503,-0.016107919,-0.0078540845,0.017418971,0.017467711,0.003003835,-0.024346583,-0.0077269003,-0.05782684,-0.047112603,0.0045328517,-0.008894281,0.03039497,-0.026809024,-0.046265326,0.033875924,-0.03988912,0.01511616,0.002144356,0.012494023,0.03533651,-0.03132054,0.009252374,0.04431545,-0.037302364,0.0051446366,0.025309106,0.018117866,0.012083684,0.016297085,-0.010772064,0.005118673,-0.019679975,0.046925556,0.03127963,0.010581656,0.04862544,-0.054514337,-0.05061542,0.049366903,0.013385562,0.0153927235,-0.05069733,-0.038987424,-0.01197828,0.014012936,-0.034446396,0.024280721,-0.008975974,-0.0016807399,-0.006581999,-0.027267786,0.009635239,-0.018296732,-0.028824866,-0.062171135,0.016199738,-0.026630092,0.028363768,-0.007975508,0.011754456,-0.009754717,0.012700998,0.03529884,0.029013515,0.026355306,-0.00662179,-0.014239377,0.02024372,-0.050248936,0.024919296,0.0053375335,-0.023403596,0.01642521,0.0041992823,0.007495904,0.0018237726,-0.0038199439,-0.016067326,0.00516571,0.082286015,0.043315955,-0.019163674,0.03258504,0.029951386,0.01579452,0.031982765,-0.040687025,0.007133859,0.036932457,-0.012992619,-0.0303543,0.028039627,0.00064079504,0.08368362,0.0026316077,-0.0385836,-0.036438875,0.015288862,-0.1636094,0.0035137038,-0.007225478,-0.014416922,-0.007732154,-0.018985337,-0.051428888,0.021828327,-0.03908541,0.04682304,0.004027727,-0.038034227,-0.015320527,-0.041909654,0.009069242,0.0042344485,0.011835634,0.019135224,0.06499372,-0.046772916,-0.043755278,-0.044255447,0.019532118,-0.0042059594,-0.013263324,-0.006973509,0.0419377,0.008034336,-0.02241989,-0.013473157,0.008209399,0.021848157,0.0002505593,-0.003073579,-0.019388674,-0.011321647,0.03462074,-0.058387965,-0.008599953,-0.032682694,0.020550255,0.031143192,0.018315868,0.0057324464,0.026349656,0.05468705,-0.01902026,-0.035362814,-0.0035137958,-0.009019251,0.031468928,-0.021974174,0.0057024,-0.019817658,-0.041829437,-0.012808176,0.03791406,0.026037227,0.020733144,-0.031705953,0.025837416,0.010639556,0.056930907,0.020314764,-0.0073083914,0.0070670363,0.02852403,-0.021433255,0.012525897,-0.06745285,0.023369731,0.010320666,0.018821258,0.040993307,-0.03427645,0.00994412,-0.03087485,-0.030106021,-0.012317005,-0.09496727,0.0068677356,0.0044309944,-0.016242757,0.043080635,0.013393717,0.03643011,0.0014903086,0.020484362,0.044811096,0.22079314,0.039141838,-0.018499298,-0.03871898,0.048757125,-0.008038017,0.036134657,0.039867967,-0.0021278441,-0.030264728,-0.01921918,-0.025033468,-0.012902306,0.010740966,0.0058978945,0.011573428,-0.024858363,0.024385272,0.031083759,-0.010107799,0.04322962,-0.019583954,0.017971365,0.09290286,-0.019315142,-0.011704078,-0.006493528,0.0535401,-0.08612408,0.028448226,-0.015514782,-0.01187049,0.02433138,-0.07281727,-0.055853833,0.021746064,0.016018527,0.00016227106,0.0035836147,0.04553173,0.023886843,-0.020072775,0.029160045,0.017088363,-0.041221727,-0.015567427,-0.03216314,0.011186811,0.010513702,0.011335592,-0.079855695,-0.00498454,0.0052804872,-0.016135853,-0.0044625103,-0.06905431,-0.04368449,-0.009694858,0.013210586,0.06034292,-0.00772569,-0.0029066566,-0.017806787,0.04221346,-0.014946492,0.013042243,0.02328681,-0.016156424,0.027001165,0.061252236,0.01121702,0.03969601,0.015008179,-0.04667583,0.032231208,0.010346802,0.03310174,0.036282144,-0.024091385,0.040317435,-0.0030234565,-0.011739293,-0.0021172506,0.03540977,0.017643202,0.015260512,-0.013619005,0.059523772,-0.025149748,-0.07015538,-0.0035734414,0.0032627,-0.014685926,0.017965108,0.057196617,0.014575598,0.031983297,-0.04272126,-0.017427884,0.000055908553,-0.000096196345,0.022362653,-0.0045450176,-0.045644984,-0.037305675,-0.0127929915,0.008661796,0.009981172,-0.030980408,0.02042507,-0.03949889,0.04269776,-0.00084391324,-0.024140801,-0.056399077,0.03547704,0.020441566,0.01978671,0.01850021,0.02173198,-0.012009927,-0.01672313,-0.042265423,-0.024922665,0.016518418,0.020289168,-0.016121319,-0.035751026,0.0033621467,-0.007603571,0.04402938,-0.049492624,-0.0131517,0.020648956,0.02813391,-0.038097907,-0.024672654,-0.004821326,-0.0066709556,-0.0057507795,-0.008409838,0.024550293,-0.022077879,-0.015314568,-0.009185529,0.02832161,0.027278952,0.023153272,-0.006737477,0.015419933,0.022805858,0.047943823,-0.0047794343,-0.029258989,-0.05419957,-0.01821228,-0.013785096,0.0541261,0.002207045,-0.007730724,0.005346461,-0.013251346,0.062733956,0.048109677,0.039088387,0.024995638,0.021151353,0.0061526583,0.008210069,-0.0027581803,0.015514266,-0.025380872,-0.017351022,-0.004181935,0.017189901,-0.025446175,-0.054421708,0.01936344,-0.020103026,0.016960796,0.045852683,-0.016727932,-0.007451915,-0.0013660272,0.027985709,0.019798666,0.0027335382,-0.007895294,0.0392471,-0.024199283,-0.04142596,0.11658575,0.008220926,-0.007947026,0.026651077,-0.016997535,-0.0030496004,0.022032633,0.024163727,-0.03586258,0.0066677425,-0.028617095,0.040697236,-0.030608466,-0.014735772,0.01894795,0.03688565,0.022487849,-0.018787403,0.033988073,-0.011616565,-0.0007550384,-0.03225265,0.022334272,-0.009139569,-0.04371169,0.038427576,0.020300455,0.009749827,-0.020957435,-0.012303701,-0.03417613,0.021085523,-0.021523893,-0.03524639,-0.010862836,0.04702824,-0.010002371,-0.029546075,-0.0024211644,-0.012763608,0.023971766,0.015618859,-0.01735029,0.024496507,-0.0014131601,0.03311167,0.015221502,0.0073810774,0.011883468,-0.006364516,0.0069173044,-0.026340958,0.040160082,0.0027716225,0.0044888393,-0.031922344,0.025724772,-0.009796311,0.008063147,0.0117896255,0.010016134,-0.028188022,-0.004934663,0.027706841,0.08758013,0.031526085,-0.033911787,-0.026311476,-0.06328155,-0.048867498,0.0076485733,-0.011106473,0.0051247873,-0.010450866,-0.02325063,-0.00045440395,-0.07253871,-0.01590497,-0.06868363,0.010619616,0.0065247132,-0.031405345,-0.012337734,0.0053096707,-0.021365197,-0.030972028,-0.032803368,-0.041782625,0.01389311,-0.04355481,0.0052526006,0.031041684,0.029651713,-0.062062748,-0.025647014,0.057459924,-0.005112771,0.011368519,-0.029995136,-0.014653845,0.0013881874,-0.02930048,0.014037019,-0.03873115,-0.004862367,0.007428443,-0.0031450482,-0.014964485,-0.006525746,-0.036182005,-0.00585957,-0.012167272,0.015275268,-0.04118487,0.028067162,0.0023920482,-0.044176847,0.02700004,-0.017099151,0.0028941336,-0.016022613,0.055489462,-0.0099773975,0.016993694,-0.03267579,0.019862201,-0.04230376,-0.0026958683,-0.021532422,-0.015031437,0.037007745,-0.010187681,0.011660036,-0.0077038724,0.026315229,-0.03582176,-0.007583004,-0.0010203172,0.024425827,-0.0032153192,-0.023034729,-0.04032663,-0.036370676,-0.0004297286,0.0016110619,0.033567715,-0.0061296267,0.030921968,-0.01878098,0.002529899,-0.056081574,0.026288895,-0.037808616,-0.006180197,0.0019771208,0.005112036,-0.0023688227,-0.04384962,0.03036776,0.07139977,0.071863756,-0.0062913387,-0.007710576,0.024580598,-0.06683354,-0.016219044,-0.010720242,0.06776762,0.05007684,-0.01229598,0.090809315,-0.0106756,-0.007399451,-0.0030013933,0.024198383,0.05091854,-0.037908662,-0.023121335,0.01973538,-0.017158177,0.023882177,0.0072278623,0.0021982968,-0.020348577,0.050548896,0.006753811,0.023284001,0.056100998,0.0076991445,-0.02983691,-0.0051569627,-0.04049148,0.017311644,-0.005219676,0.031383656,-0.045964144,0.017099572,-0.039958324,0.014457348,-0.018026587,-0.036295723,-0.014043124,0.012673597,-0.11806924,-0.009872818,-0.0047662025,0.043252904,-0.026235199,0.00140086,0.025994094,-0.023928344,-0.01490307,-0.028109055,-0.07696806,0.02308799,0.039736826,-0.040608957,-0.016145315,-0.015484703,-0.017326923,-0.01591695,0.0019858882,0.02352289,0.03289113,-0.0192071,-0.008467304,-0.019303355,-0.031374373,-0.009640306,-0.016021833,0.017694341,-0.014150778,-0.014089889,0.038460173,-0.00003384733,-0.016095934,0.0675416,0.024317697,0.00759433,-0.012092995,-0.020984985,-0.0146754915,0.002981234,-0.004540062,0.019143218,-0.009683396,0.0247837,-0.003255224,0.05300666,-0.0131394705,-0.019343741,-0.03715226,-0.013608126,-0.019920545,0.04236474,-0.0120675955,-0.0068777637,0.024051197,0.020483598,-0.064893976,-0.03790162,0.053597018,0.015532973,-0.004969346,0.021766331,-0.009000959,-0.03409956,-0.010461364,0.033837505,-0.07131293,0.033356708,0.0015715014,0.03438509,0.015945336,0.0015667675,-0.01893628,-0.03392797,-0.008198819,0.030492077,0.048704,0.011815311,0.03171875,-0.026953729,-0.011239232,-0.0021772266,0.00059398916,0.010423781,0.03277212,0.010529048,-0.03337577,-0.04089752,0.0020744475,0.0047083073,-0.030119188,-0.03722598,-0.0019060809,-0.002532371,-0.050049894,-0.011530298,-0.00043762603,-0.010004241,-0.018087829,0.012715383,0.0021366414,-0.02706201,0.007818184,-0.03151252,-0.023480974,-0.044186164,-0.031778164,0.015584751,-0.043753233,0.0075274296,-0.012665048,-0.013708344,-0.02345439,0.022263598,-0.041319042,-0.0017596261,0.012863033,-0.0013038752,0.0012499553,0.016803704,-0.009803773,-0.015255459,0.00019193978,-0.03948093,0.022814058,0.025807185,0.017433297,-0.029547524,-0.035710435,-0.029221272,0.02447467,-0.06742527,-0.039289683,0.022876486,0.0395256,-0.001519528,-0.047296975,0.018166495,-0.045646682,-0.016216807,0.008648725,-0.035514202,0.011899422,-0.00943813,0.0037059898,-0.06481802,0.012072926,0.0034510796,-0.014160526,-0.014245614,-0.018707035,0.019729728,0.018016415,-0.0040781763,-0.027809938,0.024455719,0.031505805,-0.019187273,-0.012314585,0.012996379,0.026865533,-0.033513777,-0.039522372,-0.06767714,-0.06270378,-0.027154448,-0.011138862,-0.042395014,0.0007417639,-0.01816653,-0.031049289,0.06879207,-0.0016547169,0.0027470805,0.025414582,-0.024835408,-0.004747642,0.0049376544,0.023874924,-0.014716492,-0.007565766,0.013383779,0.03898784,0.00790593,0.014842409,-0.006964625,-0.038336333,0.034087542,-0.025826527,0.023629274,-0.020876445,-0.008246757,-0.02001282,-0.04502805,0.019338535,-0.003929515,0.016479094,0.040137444,0.017387858,-0.0053184927,-0.037155893,-0.038491964,-0.0067247455,0.016311778,0.02176985,0.0030084052,-0.022730362,-0.015139288,-0.045995988,0.016059857,-0.028106483,-0.026464794,-0.0012158295,0.0019370613,0.05651721,-0.055743024,0.025976086,0.0015177351,0.0069963904,-0.033393823,0.009501433,0.011169502,-0.019748239,-0.026458483,-0.080341384,0.011230564,-0.017504485,-0.01803235,-0.00409083,-0.010198895,0.0062576914,-0.0147654675,-0.026348352,0.01745657,0.049190816,-0.0046659373,-0.042336773,0.06648644,0.009728219,0.0023803234,0.028546138,-0.008985529,0.028056268,-0.0021853044],"created_at":1746088925220,"nchars":497},"2":{"title":"Redis 实现分布式锁","path":"redis/Redis 实现分布式锁.md","embeddingModel":"bge-m3","ctime":1746035239686,"mtime":1746035239686,"tags":[],"extension":"md","metadata":{"created":"2025/05/01 01:47:19","modified":"2025/05/01 01:47:19"},"id":"eb1d7b55e0857c89bc42e5dddf63331c","content":"\n\nNOTE TITLE: [[Redis 实现分布式锁]]\n\nMETADATA:{\"created\":\"2025/05/01 01:47:19\",\"modified\":\"2025/05/01 01:47:19\"}\n\nNOTE BLOCK CONTENT:\n\nRedis 的 SET 命令有个 NX 参数可以实现 **key 不存在才插入**，所以可以用于实现分布式锁\r\n\r\n1. 如果 key 不存在，则显示插入成功，可以用来表示加锁成功\r\n2. 如果 key 存在，则会显示插入失败，可以用来表示加锁失败\r\n\r\n基于 Redis 实现分布式锁时，对于加锁操作，需要满足三个条件：\r\n\r\n1. 加锁包括了读取锁变量、检查锁变量值盒设置锁变量值三个操作，但需要以原子操作的方式完成，所以需要使用 SET 命令带上 NX 选项实现加锁\r\n2. 锁变量需要设置过期时间，以免客户端拿到锁后发生异常，导致锁一直无法释放，所以需要在 SET 命令执行时加上 EX/PX 选项，设置其过期时间\r\n3. 锁变量的值需要能区分来自不同客户端的加锁操作，以免在释放锁时，出现误释放操作，所以，使用 SET 命令设置锁变量值时，每个客户端设置的值是一个唯一值，用于标识客户端\r\n\r\n满足这三个条件的分布式命令如下：\r\n\r\n```shell\r\nSET lock_key unique_value NX PX 10000\r\n```\r\n\r\n而解锁的过程就是将 lock_key 键删除（del lock_key），但不能乱删，必须保证执行操作的客户端就是加锁的客户端。所以，解锁的时候，要先判断锁的 unique_value 是否为加锁客户端，是的话，才将 lock_key 键删除\r\n\r\n```lua\r\n// 释放锁时，先比较 unique_value 是否相等，避免锁的误释放\r\nif redis.call(\"get\", KEYS[1]) == ARGV[1] then\r\n\treturn redis.call(\"del\", KEYS[1])\r\nelse\r\n\treturn 0\r\nend\r\n```\r\n\r\n基于 Redis 实现分布式锁的优点：\r\n\r\n1. 性能高效\r\n2. 实现方便\r\n3. 避免单点故障\r\n\r\n基于 Redis 实现分布式锁的缺点：\r\n\r\n1. 超时时间不好设置：可以基于 **续约** 的方式设置超时时间，先给锁设置一个超时时间，然后启动一个守护线程，让守护线程在一段时间后，重新设置锁的超时时间，当主线程执行完成后，销毁续约锁即可\r\n2. Redis 主从复制模式中的数据是异步复制的，导致分布式锁的不可靠性\r\n\r\n如何解决集群情况下分布式锁的可靠性？\r\n\r\n**Redlock**（红锁），基于多个 Redis 节点的分布式锁，即使有节点发生了故障，锁变量仍然是存在的，客户端还是可以完成锁操作\r\n\r\n基本思路是，让客户端和多个独立的 Redis 节点依次请求申请加锁，如果客户端能够和半数以上的节点成功地完成加锁操作，那么就可以认为加锁成功，否则加锁失败。过程如下：\r\n\r\n1. 客户端获取当前时间（t1）\r\n2. 客户端依次向 N 个 Redis 节点执行加锁操作\r\n\t1. 加锁使用 SET 命令，带上 NX、EX/PX 选项，以及带上客户端的唯一标识\r\n\t2. 如果某个 Redis 节点发生故障，需要给 **加锁操作** 设置一个超时时间\r\n3. 一旦客户端完成了和所有节点的加锁操作，客户端就要计算整个加锁过程的总耗时（t2）\r\n\r\n加锁成功要同时满足两个条件：\r\n\r\n1. 客户端从超过半数的 Redis 节点上成功获取锁\r\n2. 客户端获取锁的总耗时（t2）没有超过锁的有效时间\r\n\r\n加锁成功后，客户端需要重新计算锁的有效时间，计算的结果是锁的最初有效时间减去加锁的总耗时\r\n\r\n加锁失败后，客户端向所有 Redis 节点发起释放锁的操作","embedding":[0.022889163,0.027782293,-0.021178577,0.009309477,-0.0011360261,0.010027723,0.051071383,0.051888004,-0.011654994,0.010902918,-0.033137016,-0.0028489553,-0.008081784,0.021274475,0.008922312,-0.027166657,0.0081207445,-0.019055033,-0.03141291,-0.009043048,0.0038102074,0.02731798,0.008961187,-0.0092321765,-0.010613947,0.066389516,-0.0056280475,-0.009306039,0.029206088,-0.007683346,0.01303408,0.019138,-0.02577806,-0.015039501,-0.013155502,-0.019736888,0.010083147,-0.007835408,-0.10291051,-0.001867096,0.012825033,-0.027753182,-0.023443362,-0.0013622098,0.02610922,0.018805647,0.006894783,-0.071187615,-0.008514127,-0.0033220567,-0.020307748,-0.014140867,-0.01620551,-0.03089484,0.008068971,0.047313172,0.012534355,-0.024911793,0.021742381,0.007936601,0.021630993,-0.035190523,-0.04464481,-0.029701348,-0.031565253,0.0028016358,0.000113429654,0.057426568,0.033140305,-0.02584182,0.017674046,0.029426062,0.0078055365,-0.054508217,0.003692407,-0.028333483,0.031178242,0.0029716094,0.005920765,-0.030866828,0.09592472,0.011911962,-0.02481535,-0.0084097255,-0.007862711,0.029800452,0.0067092194,0.019903705,-0.017133672,-0.029455295,-0.0008330898,0.05923373,-0.037791606,-0.029636614,0.02048794,-0.016079577,0.04218687,-0.056304246,0.031643596,-0.0015268889,-0.011519616,-0.01669753,-0.015277137,0.009786723,0.03201765,-0.026443863,0.002205581,0.039064214,-0.009941459,0.022834266,-0.029147448,-0.04688886,-0.062604174,0.03237058,0.008153549,-0.0043622404,-0.0027272634,-0.004300592,-0.008773773,-0.005757698,-0.001697245,0.05524549,0.044703625,-0.0019326073,-0.0007791884,-0.02094564,-0.06508555,0.04281996,-0.027372694,-0.0006178292,0.004766502,0.026130518,0.030470515,-0.025648436,-0.049594223,-0.021950252,0.019480923,0.040918313,0.024004214,-0.008461381,-0.003411984,0.018652983,-0.040120274,0.0059292517,0.027740287,-0.037432283,0.009143348,0.007451995,0.021882221,0.031631652,-0.033026855,-0.028976683,-0.00411464,0.010626174,0.025199046,-0.00926205,-0.00561087,-0.0020631177,0.036599334,-0.021102268,0.009079068,-0.028928084,0.010930878,0.04500271,0.020913903,-0.005773286,0.011327455,0.012271485,0.010190429,0.01720122,-0.05261445,-0.06388763,0.044872943,-0.020567337,-0.0016907451,0.06450043,0.06869544,0.003664921,0.029087221,-0.038245175,0.014304851,0.00859476,0.018278208,-0.07020838,0.05318124,-0.030010201,0.04505258,-0.016345281,0.007260045,0.052418195,-0.027167834,-0.027377138,0.017932208,0.003435985,-0.024897821,-0.014258506,-0.024341524,0.003913586,0.0698621,-0.057320245,-0.025856273,-0.0024299629,-0.016495684,-0.008071086,-0.036747314,0.023375582,-0.04073375,-0.03446376,0.043508936,-0.0012296154,0.043153208,-0.008679476,-0.038696773,0.02830423,0.040660772,0.019018395,-0.0019889744,-0.031036582,-0.00037860143,0.009592897,-0.02332895,0.021687774,-0.008894297,-0.024483254,0.017016029,0.0306534,0.012271591,0.03436721,0.006962849,0.009848443,-0.04853941,0.094522804,-0.045472413,-0.06998968,-0.02735632,0.012790922,-0.056467783,0.0028246923,0.027255844,0.01696818,-0.00018320505,-0.05640105,-0.00011420783,-0.011069074,-0.036402006,0.06006301,-0.018241333,-0.0024142088,-0.017756475,-0.021760404,-0.047985025,-0.0056886384,0.00036403365,-0.00003840398,-0.035441555,-0.04775645,0.003328906,-0.03389796,-0.021982912,-0.012760329,0.011333738,0.021877252,0.012534619,0.03564423,-0.0083961515,0.026618237,0.035351828,-0.042368583,-0.020819219,0.044772692,-0.0352617,-0.0068200477,-0.065126844,-0.00359338,-0.0049730903,-0.037949637,0.014036573,-0.028517684,0.046070985,-0.027788637,0.0148555655,0.00062878785,-0.028096534,-0.008333838,0.0029773253,0.034436528,-0.01894303,0.004097377,0.0076340716,-0.01551577,0.00020717835,0.009728219,0.10805595,-0.019657524,-0.008314751,0.027112128,-0.023590565,-0.10075321,-0.035873927,0.010092177,-0.008548432,0.035598055,-0.013158291,-0.007730073,-0.006167456,-0.0042539467,-0.027338587,0.0085373605,-0.13724384,0.024473459,-0.034902316,0.028115699,0.01655098,0.018793818,-0.011536368,0.026121384,-0.062327474,-0.020637784,0.06349321,0.060944512,0.027133584,0.024642441,-0.0035794938,0.032221973,0.03628578,-0.0364232,-0.0051947534,-0.02202096,0.0061907726,-0.037146017,-0.043031704,0.042325065,0.02895544,0.027891945,0.0012917693,0.0037997914,-0.017021706,0.03985001,0.032025855,-0.01220451,-0.10679004,0.021616627,-0.009227203,-0.0038630278,-0.035405803,0.005352398,0.04475726,-0.032903936,0.002079796,-0.032282963,-0.033707548,-0.021781327,0.003357301,-0.0033652382,0.03486035,0.017504903,0.023602441,-0.019986702,-0.042785455,-0.058431253,-0.0083153425,0.013494212,0.011557246,-0.044721097,-0.03265027,0.009760687,-0.037219245,-0.0030565918,-0.007861913,-0.022176389,-0.015643803,-0.036422953,-0.0055997735,-0.035897624,-0.02208111,-0.020343801,-0.046005845,0.0036310977,-0.013620765,-0.031102587,0.032790735,-0.014147677,0.01384014,-0.046096288,-0.039799966,-0.032949578,0.4050237,0.008176413,-0.0039385115,-0.010305712,0.016178416,-0.0064850613,0.003227893,-0.008953224,0.04074143,-0.007864959,-0.0019558754,0.007802088,0.02354696,0.016297951,0.021304496,0.031137992,-0.0528808,0.034099206,0.013545565,-0.026062537,0.0074930666,-0.008309576,-0.010940907,0.0028404752,-0.040096655,0.025204385,0.00981517,-0.0028121572,-0.056127533,0.0072807586,0.014956402,0.005776381,0.004663445,-0.030212553,-0.02508779,0.013404473,-0.060255405,-0.030739052,0.021885404,-0.017638668,0.019545218,0.0007777193,0.0017851115,-0.024027288,-0.026354022,-0.0251663,-0.0063142106,0.004660098,-0.013806738,-0.015221647,0.0070757517,0.025050215,-0.0108666085,0.012965176,-0.015408484,-0.0061385864,-0.032744758,-0.02085655,-0.007011431,0.00511747,-0.014582264,0.025176732,-0.03331584,0.022819635,0.011875633,0.006984455,-0.0068074,-0.0408156,-0.016510256,0.0355241,0.017665641,0.047947247,0.054814517,-0.005178636,-0.0058632446,-0.007360777,0.02900611,0.013390971,-0.014641698,0.045554593,0.011325078,-0.0060611325,0.02999888,-0.010112869,0.030386634,0.02350095,-0.0708542,0.037487667,0.008276319,-0.029932886,-0.034654014,-0.0028748051,-0.003631525,-0.013736576,0.030149426,0.013536406,0.009462972,-0.07999029,-0.007695708,-0.013796419,0.04284704,0.002349687,0.039171442,0.012226297,0.009494416,0.0011870789,-0.003532754,-0.03280316,-0.026007496,-0.011399737,0.0018506555,0.027497776,0.010396103,-0.011719818,0.03539404,0.021955835,0.030017365,0.06280836,0.01338686,0.018431563,-0.0047538867,-0.037692215,0.015068903,0.01007642,-0.009054494,-0.059242383,0.007372918,-0.047776397,-0.025230592,0.0011712093,0.019056052,0.03586618,0.009032476,-0.0107875,-0.012054436,-0.00050141953,-0.014992534,-0.025898391,0.01370596,0.05694313,0.007608439,-0.0019828416,-0.010554575,-0.0029909716,0.013559026,0.0066528493,0.0085772285,0.0007966167,-0.042848445,-0.0025373157,-0.0052869073,-0.0029768974,0.030419208,-0.016922392,0.020373544,-0.020599613,0.014800236,0.00067363126,-0.022605551,-0.02419213,-0.019720597,0.0061027138,-0.0068651214,0.06541349,0.016722737,-0.018564455,0.018295338,0.0694275,0.016047275,0.04476535,0.036204033,-0.07457237,0.014617687,0.016702414,0.03248943,-0.046076752,-0.014326844,0.03390544,0.017925818,0.014866039,0.044797435,-0.0017790656,-0.020113472,-0.014540201,-0.026221579,-0.0075980644,-0.02678448,0.03145103,0.03113981,-0.03754102,-0.011297282,0.05920178,0.00160899,-0.0021867964,0.040732644,-0.045295835,-0.004542529,-0.00962056,-0.0052943276,-0.023080166,0.04683114,0.03749438,0.037920874,0.044663236,0.001094571,-0.0013194343,0.026337862,0.022036722,0.008387596,-0.036316417,0.005812444,0.011748513,0.013741924,0.009633142,-0.005080336,-0.06303824,0.03970357,0.020962778,0.056218155,-0.026270252,-0.016131299,-0.0170228,0.044258986,-0.014361397,-0.026290976,0.025137043,-0.02592552,-0.03453675,-0.0062206034,0.02687269,-0.010528321,-0.010133206,0.027592113,-0.008197397,0.017242426,-0.0075074225,0.030966474,0.022349827,0.00056336104,0.038786944,-0.006811153,-0.02380433,0.019672632,0.022386141,0.011265286,0.025914498,-0.021186685,0.024106948,0.0004215741,-0.013639949,0.0026749172,-0.014650566,-0.0014826409,-0.039289277,0.017760446,0.037010197,-0.0027534233,-0.02692578,-0.015309235,0.007704069,-0.008624326,0.0076521807,-0.0005550232,-0.00796037,0.0039862744,0.027860677,-0.03782456,-0.027659047,0.016011003,-0.04284997,-0.0036550346,-0.010227336,-0.006563075,-0.03248002,-0.018685326,-0.007887036,-0.011811801,-0.020226423,0.007948467,0.029222956,-0.09432124,-0.02646005,0.0027419713,0.01798539,-0.01011894,-0.056306038,-0.017610483,-0.02229271,-0.022294952,0.0028334202,-0.0120591065,-0.01599892,-0.02810254,0.03332611,0.000058558577,0.04307459,-0.03196469,0.023229737,0.019991696,0.0061944844,0.01809043,-0.015448564,0.0024138757,-0.018089293,-0.008320921,0.002104983,0.008014094,0.026318684,-0.023602312,0.002776048,0.032586157,-0.028023928,0.00488285,-0.0033477675,-0.032269947,-0.03459358,-0.018995833,-0.0026792444,0.0071746563,-0.014898825,0.011710541,0.011906236,-0.015042285,0.02964897,-0.009748673,-0.0037796353,-0.022655157,0.02646638,-0.023481568,-0.023960322,-0.007906671,-0.0029421619,0.012201228,0.027560472,0.007425701,-0.0073367166,0.056959998,-0.027670784,0.017490275,-0.025321618,-0.0059465417,-0.006070331,-0.01756742,-0.0007634385,0.013899507,-0.013748607,0.013158577,-0.02321154,-0.04814592,-0.0030023544,0.034681264,0.0014378614,-0.019048858,-0.00633101,-0.0009291557,-0.027226849,-0.0065139974,0.019375982,0.03811262,0.024537407,0.028991058,0.055361494,0.031069854,0.0018655194,-0.016864223,-0.00794024,0.049676165,0.0016394864,0.005779191,0.011146625,0.024387175,0.014689743,0.005636582,-0.012281532,-0.021556789,0.00039189027,0.013324036,0.02972917,0.012945888,-0.05427997,-0.034886483,0.006221173,0.017894672,-0.036198273,-0.001988247,0.03248302,-0.055889633,-0.008669087,-0.0028011135,0.018953491,0.008172976,0.043265477,0.009034526,0.009825292,-0.105334595,0.017016137,-0.03097784,-0.0031876066,0.02669764,0.0039851125,0.014133364,-0.04749994,-0.050129104,-0.036106557,0.059598956,-0.032757577,0.017156981,-0.02837645,0.022032756,-0.005222518,-0.021674108,0.03452559,0.017573014,0.018987967,0.010038469,-0.04098116,-0.038836904,-0.056532487,0.00022203199,0.013312572,-0.006591514,-0.01799826,-0.0036773628,-0.0004564587,-0.0139165465,-0.03358891,-0.0250854,0.047752723,0.029911429,0.021222712,-0.027142595,-0.025438678,0.0075693857,0.034086514,0.029533869,-0.023058856,-0.030857101,0.0015110465,-0.014230541,0.006314044,-0.013078551,0.0025726547,0.008710021,-0.026291514,-0.07169115,0.009112355,0.045811534,0.013329053,0.0022512386,0.052039642,-0.0225906,-0.024042737,0.0007014931,0.03151161,-0.03327198,-0.0013827713,-0.02119501,-0.0033114303,-0.0049039857,0.0043568606,-0.007520368,-0.025078664,-0.024870899,-0.005730479,-0.023613598,-0.022611782,0.021324832,-0.028758135,0.027324375,-0.035232536,0.013177489,-0.02068048,0.014478773,-0.027046006,0.0071919677,-0.0025199794,0.018672988,0.05097286,0.047237314,-0.011070083,0.027223013,0.026307713,0.033756055,-0.045408607,-0.05714058,0.032958414,-0.012010427,0.027206624,0.009504454,0.019418592,-0.013039675,-0.02153855,0.008448663,0.012328934,0.023560312,0.04095935,-0.008765762,-0.007830639,0.0049828184,-0.006931049,-0.034754876,0.033615313,-0.027363243,-0.012896853,-0.005598058,-0.019330662,-0.027194278,0.008642023,-0.043446545,-0.01599872,0.009673159,0.02444152,0.016188838,-0.020876473,0.03039272,0.040814422,-0.010529668,-0.0650246,0.018402493,-0.021182997,-0.011534917,-0.030736635,0.024837354,-0.047312066,0.03378443,-0.017689768,-0.03269397,-0.017601203,-0.029111374,-0.042030737,-0.0019024133,0.06478142,0.033844117,-0.03915704,0.005767753,0.025783012,0.012716094,-0.036217447,-0.013843165,-0.029675119,0.016045399,-0.025112486,0.016082132,-0.019256638,0.0072173597,0.020746952,0.031742364,0.0056143557,-0.005744873,-0.01126863,0.048078023,-0.025309214,-0.009950388,0.05463788,0.026107948,-0.027451236,-0.027617244,-0.039839014,-0.029645547,-0.0052255746,-0.008194393,-0.0036996186,0.03139687,0.030497665,-0.011907727,0.059039123,0.00980169,0.019287609,0.016239276,-0.03728938,0.008549158,0.013829759,0.03956762,0.0076707136,-0.0570384,-0.03035785,0.039706983,-0.039049868,0.027480794,-0.008677771,0.005369675,0.029215489,-0.0462977,0.027957965,0.021156691,0.013205147,0.00496369,0.010457648,0.0036926891,-0.055213895,0.0056098537,-0.061136566,0.014460767,-0.019052744,-0.02489028,-0.033266474,-0.017308448,0.020164618,-0.021089977,-0.008462613,-0.015697757,-0.014758356,-0.034131855,0.0074790656,-0.05087209,0.02598012,0.01891446,0.038960267,0.037964992,-0.00818846,0.01709219,0.03056468,0.026638033,0.022929199,-0.025583824,0.048920304,-0.024722435,-0.011511907,0.0028818152,-0.013246468,-0.0094241435,0.0039037312,-0.038308203,-0.00064700976,-0.011072821,0.023307832,0.006710337,0.029137876,-0.014677094,0.03885656,-0.047736313,0.061680358,-0.0066572786,0.007071961,-0.01824648,-0.024752054,0.031613946,0.005098328],"created_at":1746088925222,"nchars":1630},"3":{"title":"持久化","path":"redis/持久化.md","embeddingModel":"bge-m3","ctime":1745731012764,"mtime":1745744373394,"tags":[],"extension":"md","metadata":{"created":"2025/04/27 13:16:52","modified":"2025/04/27 16:59:33"},"id":"7352ecacad7370213f0cbe18df0496af","content":"\n\nNOTE TITLE: [[持久化]]\n\nMETADATA:{\"created\":\"2025/04/27 13:16:52\",\"modified\":\"2025/04/27 16:59:33\"}\n\nNOTE BLOCK CONTENT:\n\n## AOF 日志\n\nredis 每执行一条写操作命令，就把该命令追加写入到 aof 日志中，这种保存写操作命令到日志的持久化方式，就是 redis 中的 AOF(Append Only File) 持久化功能，注意只会记录 **写操作** 命令，**读操作命令** 是不会被记录的。\n\n在 redis 中 AOF 持久化功能默认是 **不开启** 的，需要修改 **redis.conf** 配置文件中的以下参数：\n\n```shell\n// redis.conf\nappendonly     yes              // 表示是否开启AOF持久化(默认 no，关闭)\nappendfilename \"appendonly.aof\" // AOF持久化文件的名称\n```\n\n### 先执行再记录的好处\n\n1. 避免额外的检查开销\n2. 不会阻塞当前写操作命令的执行\n\n### 潜在风险\n\n1. 执行写操作命令和记录日志是两个过程，当 redis 还没来得及将命令写入硬盘时，服务器发生宕机，这个数据就会有 **丢失的风险**\n2. 由于写操作命令执行成功后才记录到 AOF 日志，所以不会阻塞当前写操作命令的执行，但是可能会给 **下一个** 命令带来阻塞风险，因为执行与记录这两个操作都是在 **主进程** 中完成的\n\n### 写入 AOF 日志的过程\n\n[img 写入AOF日志的过程](../images/写入AOF日志的过程.webp)\n\n1. redis 执行完写操作命令后，会将命令追加到 **server.aof_buf** 缓冲区\n2. 然后通过 **write()** 系统调用，将 aof_buf 缓冲区的数据写入到 AOF 文件，此时数据 **并没有** 写入到硬盘，而是拷贝到了内核缓冲区 **page cache**，等待内核将数据写入硬盘\n3. 具体内核缓冲区的数据什么时候写入到硬盘，由内核决定\n\n### 3 种写回硬盘的策略\n\n在 **redis.conf** 配置文件中的 **appendfsync** 配置项有以下 3 种参数可填\n\n1. **Always** ：每次写操作命令执行完后，同步将 AOF 日志数据写回硬盘\n2. **Everysec** ：每次写操作命令执行完后，先将命令写入到 AOF 文件的内核缓冲区，然后 **每隔一秒** 将缓冲区的内容写回到硬盘\n3. **No** ：不由 redis 控制写回硬盘的时机，转交给操作系统控制\n\n这 3 种写回策略都无法完美解决 **主进程阻塞** 和 **减少数据丢失** 的问题，原因如下：\n\n1. **Always** ：可以最大程度保证数据不丢失，但是由于每执行一条写操作命令就同步将 AOF 内容写回硬盘，所以不可避免会影响主进程的性能\n2. **No** ：交由操作系统决定何时将 AOF 日志内容写回硬盘，相比于 Always 策略性能较好，但是操作系统写回硬盘的时机是不可预知的，如果 AOF 日志没有写回硬盘，一旦服务器宕机，就会丢失不定数量的数据\n3. **Everysec** ：折中的方式，避免了 Always 策略的性能开销，也比 No 策略更能避免数据丢失\n\n根据业务场景进行选择\n\n1. 高性能选择 No 策略\n2. 高可靠选择 Always 策略\n3. 允许数据丢失一点，又想性能高，选择 Everysec 策略\n\n[img redis写回策略总结](../images/redis写回策略总结.webp)\n\n### AOF 重写机制\n\nAOF 重写机制是在重写时，读取当前数据库中的所有键值对，然后将每一个键值对用一条命令记录到 **新的 AOF 文件**，等到全部记录完后，就将新的 AOF 文件替换掉现有的 AOF 文件\n\n### AOF 后台重写\n\nRedis 的重写 AOF 过程是由后台子进程 **bgrewriteaof** 来完成的，这样做有两个好处：\n\n1. 子进程进行 AOF 重写期间，主进程可以继续处理命令请求，从而避免阻塞主进程\n2. 子进程带有主进程的[数据副本](#子进程如何拥有主进程的数据副本)，不用通过加锁来保证数据安全\n\n#### 子进程如何拥有主进程的数据副本\n\n主进程在通过 **fork** 系统调用生成 **bgrewriteaof** 子进程时，操作系统会将主进程的 **页表** 复制一份给子进程，两者的虚拟空间不同，但其对应的物理空间是同一个\n\n这样能够 **节约物理内存资源**，页表对应的页表项的属性会标记该物理内存的权限为 **只读**\n\n##### 写时复制\n\n不过，当父进程或子进程在向这个内存发起写操作时，CPU 就会触发 **缺页中断**，这个缺页中断是由于违反权限导致的，然后操作系统会在 **缺页异常处理函数** 里进行 **物理内存的复制**，并重新设置其内存映射关系，将父子进程的内存读写权限设置为 **可读写**，最后才会对内存进行写操作，这个过程被称为 **写时复制(Copy On Write)**\n\n但是，写时复制只会复制主进程修改的物理内存数据，没有修改的物理内存还是与子进程共享的\n\n#### 导致阻塞父进程的两个阶段\n\n1. 创建子进程的过程中，由于要复制父进程的页表等数据结构，阻塞的时间和页表的大小有关，页表越大，阻塞的时间也越长\n2. 创建完子进程后，如果子进程或父进程修改了共享数据，就会发生[写时复制](#写时复制)，这期间会拷贝物理内存，如果内存越大，自然阻塞的时间也越长\n\n#### AOF 重写缓冲区\n\n在重写 AOF 期间，当 redis 执行完一个写命令后，它会 **同时将这个写命令写入到 AOF 缓冲区和 AOF 重写缓冲区**\n\n## RDB 快照\n\nredis 提供了两个命令来生产 RDB 文件，分别是 **save** 和 **bgsave**，区别在于是否在 **主线程** 里执行：\n\n1. 执行 **save** 命令，就会在主线程生成 RDB 文件，**会阻塞主线程**\n2. 执行 **bgsave** 命令，会创建一个子进程来生成 RDB 文件，可以 **避免阻塞主线程**\n\nredis 还可以通过配置文件的选项实现每隔一段时间自动执行一次 **bgsave** 命令：\n\n```shell\nsave 900 1 // 900秒内，对数据库进行了至少1次修改\nsave 300 10 // 300秒内，对数据库进行了至少10次修改\nsave 60 10000 // 60秒内，对数据库进行了至少10000次修改\n```\n\n### 执行快照时，数据能被修改吗\n\nredis 在执行 bgsave 时采用了[写时复制](#写时复制)技术，发生写时复制后，RDB 快照保存的是 **原本的内存数据**，而主线程刚刚修改的数据，则需要等到下一次 bgsave 快照\n\n如果系统恰好在 RDB 快照创建完毕后崩溃，那么 redis 将会丢失主线程在快照期间的修改\n\n### 极端情况\n\n如果所有的共享内存都被修改，则此时的内存占用是原先的 **2 倍**\n\n## 混合持久化\n\nredis4.0 提出的 **混合使用 AOF 日志和内存快照**，也叫 **混合持久化**\n\n如果要开启混合持久化功能，可以在 redis 配置文件中修改如下配置\n\n```shell\naof-use-rdb-preamble yes\n```\n\n### 混合持久化的工作过程\n\n混合持久化工作在 **AOF 日志重写过程**\n\n当开启混合持久化时，在 AOF 重写日志时，fork 出来的重写子进程会先将与主线程共享的内存数据以 RDB 方式写入到 AOF 文件，然后主线程的操作命令会被记录在 **重写缓冲区**，重写缓冲区的增量命令会以 AOF 方式写入到 AOF 文件，写入完成后会通知主进程将新的含有 RDB 格式和 AOF 格式的 AOF 文件替换旧的 AOF 文件","embedding":[0.00504621,-0.0037762218,-0.021987168,0.012748994,-0.017787097,-0.009456334,0.05624278,0.07597035,-0.008504852,-0.0069945487,-0.016974766,0.0040073763,-0.009555615,0.017286843,0.0081384005,-0.041725,-0.023766773,0.00072526594,-0.010487856,-0.009335203,-0.01404286,-0.0044102427,0.028122395,-0.003295758,-0.0234373,0.070823476,-0.022697164,-0.024490757,-0.013231843,0.012423728,0.020093152,-0.0076106275,0.005819293,-0.01299576,-0.00033382824,-0.007827572,-0.027721854,-0.026753237,-0.11572694,-0.04059625,0.015355536,-0.0188703,-0.05558141,0.01944828,0.015727822,0.015377361,-0.013866161,-0.05559795,-0.0073394366,-0.0029453007,-0.01714061,-0.022145428,-0.006173329,-0.03486868,0.02175796,0.031176507,0.02275273,-0.01330811,-0.006440936,-0.020061933,-0.014735281,0.0061169686,-0.02798142,-0.02361259,-0.03376621,0.011335291,0.011545543,0.038001638,0.029309401,-0.02977591,-0.02405694,-0.011573025,-0.0083513055,-0.047940124,-0.021392768,-0.009993385,0.028069232,0.005102369,0.013307925,-0.049115367,0.12952039,-0.045274753,0.016924331,-0.026266618,-0.030934691,-0.017330779,0.009062872,0.051973738,-0.0007946944,0.019971915,-0.011837732,0.045551166,0.004663296,-0.06803018,-0.020210873,0.023541458,0.034395352,-0.03502919,0.022467595,0.0036603846,-0.04795574,-0.01833305,0.006538607,0.044043504,0.00932039,0.023415886,0.014014739,0.0068197055,-0.03648807,0.013036388,-0.051012184,-0.025649704,-0.012842398,0.0070292177,-0.003392481,-0.02630224,-0.018789861,-0.021005299,0.019179797,0.011796081,-0.012644139,0.044360355,0.013640407,-0.0049042557,0.01283603,-0.005887988,-0.0047392175,0.051275764,-0.038551956,0.011792889,0.03813632,0.0515731,0.03306252,-0.03545925,-0.051972404,0.004728244,0.043702465,0.060381256,0.04685769,-0.026238548,0.026866997,0.0048887576,-0.0044577587,-0.003315168,0.07352736,-0.014866283,0.0020704244,0.01061718,-0.0377034,0.03829537,-0.017746806,-0.03870665,-0.026677199,0.000035339675,-0.004590329,0.016844062,0.03767506,-0.0023768137,0.028810035,-0.02225316,0.011350337,-0.011539919,0.025356818,0.04936844,0.031858984,0.0136539545,0.016835297,0.016127467,0.003704101,0.016359555,0.0026043525,-0.07389725,0.031560726,0.009437299,0.03591215,0.057811957,0.023837801,0.04487843,0.05005151,-0.044052847,0.00042074305,0.024451153,0.03285169,-0.032864075,0.043949723,-0.00822654,0.046158653,0.01460134,0.0022527701,0.04751035,-0.0057491018,-0.018009305,0.044678237,0.023843406,-0.0073979143,0.00876374,-0.013145821,0.0067580356,0.035028674,-0.042633064,-0.045593992,0.032359097,-0.018626044,-0.007750831,-0.00044330067,-0.006460118,-0.031151386,-0.06060282,0.019014146,-0.0012318172,0.040913947,-0.026514256,-0.009990439,0.017724456,0.0051996503,-0.021062912,-0.00024994597,-0.025357233,-0.007044384,0.0086506065,-0.025413679,-0.03597405,0.0055354764,-0.03017103,-0.023346404,0.009559559,-0.016644746,0.029425388,0.028056517,0.0060270797,-0.0441479,0.081618674,-0.007419693,-0.016875006,0.008550976,0.014925902,-0.044838928,0.033266664,0.0037607406,0.030913454,0.010551138,-0.05693199,-0.012033002,-0.024523418,-0.05474775,0.05409775,-0.038108774,0.03369278,-0.035911728,0.021842225,-0.037958477,-0.026007846,-0.024875326,-0.021442818,0.007566571,-0.040818512,-0.024100171,-0.027166663,0.023911932,0.01828365,0.006496663,-0.02557324,0.0072400286,0.037463993,-0.008605183,0.004334427,0.0050746338,-0.021424985,-0.0034085952,0.059942957,0.0034749766,0.02663784,-0.04257852,0.0046060756,0.0065448903,-0.01585289,0.011341084,-0.041585945,0.04514906,-0.027025232,-0.0011111057,-0.02194646,0.004196538,-0.016114881,-0.026884543,0.038666785,0.0032339587,0.0067573367,0.011337947,-0.02951553,-0.038915616,-0.004350826,0.0769192,-0.029628126,-0.0012607479,0.01219138,-0.028199788,-0.1530106,-0.05964126,0.031918224,0.0061223325,0.0049066013,-0.0041220738,0.005436205,-0.00944009,-0.018752282,-0.044331547,-0.006743008,-0.14668372,-0.012383058,-0.027678754,0.046816025,0.017669173,0.047969323,0.014924222,-0.011104537,-0.074707426,0.005481992,0.015383643,0.05204939,0.04281066,0.00829423,0.013356008,0.04853819,0.07181223,-0.023131518,0.0014070364,-0.012823235,0.037621498,-0.026340608,-0.046508323,0.013833801,0.029198406,0.0130317025,-0.011351668,0.03396025,-0.0027276175,0.024047129,0.05064163,-0.009946887,-0.06242101,0.05333995,-0.008981251,0.01599714,-0.022780925,-0.0070488094,0.025258794,0.02697216,0.017240604,0.03904289,0.0019859194,-0.001323925,0.015331542,0.0106843915,0.061914943,0.0057961424,0.020540781,-0.0067077056,-0.048677515,-0.018411072,-0.008564143,-0.0043822182,0.0031367687,-0.021712238,-0.0019834894,-0.028517911,-0.056394804,-0.0004160776,-0.006927053,-0.03694399,-0.030704724,-0.016224861,-0.0022337455,-0.019579524,-0.022278475,-0.018847054,-0.091140166,0.032966375,-0.0004082652,-0.029791163,0.022158762,-0.0042785555,0.021315893,-0.049952492,-0.031201568,0.0149161415,0.34127903,-0.022499053,-0.03687858,0.023561466,0.03577987,0.017937439,0.015194893,0.024414605,0.023603082,-0.016702132,0.0105913235,-0.0006388505,0.008051391,0.026645655,0.047586456,0.036762603,-0.037541598,0.011305267,-0.015638685,-0.02923959,0.048958335,-0.050185718,0.035360966,0.0041720355,-0.04214716,0.0043092887,0.004022476,-0.001984948,-0.02781168,0.0036336454,-0.0005628959,-0.008782425,-0.034726538,-0.034887627,-0.042771257,0.023390245,-0.07198925,-0.05858505,-0.0042006094,-0.0034997102,-0.008864965,-0.027771112,-0.005190867,0.010077091,-0.049265016,-0.014291927,0.009005176,0.007911521,-0.019869713,-0.03799296,0.009975305,-0.009059923,-0.035205524,0.022497052,-0.029451918,-0.017707407,-0.01252997,0.028318603,-0.0469295,0.014088705,0.011369257,0.027730579,-0.03429931,0.024560275,0.014738025,0.005379602,-0.026224887,-0.029943142,-0.027564373,0.003331476,0.043365557,0.032920245,0.031857267,0.013662278,-0.016218234,0.00069816085,-0.0072926576,0.033831097,-0.029061671,0.0027990232,-0.018141441,0.018296238,0.020284284,0.034777027,0.012885345,0.011524778,-0.045508426,0.027222117,0.0015851298,-0.030357642,0.011721889,0.00021757267,-0.0006683043,0.01184987,0.059864063,-0.021304972,0.015768785,-0.06400576,0.025149224,-0.0069101662,-0.0025011348,0.042451344,0.011459928,-0.007203245,0.00573098,-0.008536859,-0.01599911,-0.035507005,-0.012121838,-0.012692534,-0.03677401,0.001136981,0.017320579,-0.013907104,0.055906855,0.019014884,0.023448922,0.0019124257,0.0045891195,0.029759757,-0.035837714,-0.05214184,0.045792114,0.019966975,-0.013156665,-0.10527323,0.013954407,-0.035185516,0.011396536,-0.005818459,0.013146398,0.023602065,-0.018418338,0.018455464,-0.027023226,-0.016434005,0.004532826,-0.006955477,-0.007183456,0.067694634,0.030250326,-0.031032344,-0.013116366,0.042348016,-0.031288203,0.0005576746,0.00669721,0.0046708086,-0.005839153,-0.014064605,0.017948432,-0.0040032296,0.03136906,-0.043547064,-0.024366178,-0.017689172,0.012318728,-0.011845524,-0.012750027,-0.039550565,-0.007270389,0.022149589,0.028022718,0.06716455,0.02767261,0.016073931,0.025010832,0.040764708,-0.003657464,0.009130445,0.0122990925,-0.040374372,0.030674368,0.010654864,0.032417983,-0.02321478,-0.027244994,0.029654974,0.012902774,-0.014810065,0.06248178,0.023142742,-0.019202128,0.00003903249,-0.051739007,0.00079643866,-0.011824147,0.013000691,0.010052558,-0.041256107,-0.004992051,0.046786334,0.010767125,-0.0029232013,0.035352923,0.009575834,0.00105133,0.001164645,-0.011008994,0.0087171,0.043505643,0.011960453,0.009408526,0.019109426,0.028465189,-0.0065286425,0.02419793,0.028106201,0.020766065,-0.030944586,0.005402719,0.007790603,0.00018791773,-0.008625168,-0.014364814,-0.043016087,0.03253781,0.03517441,0.022783775,-0.0054605785,-0.030451102,-0.028688677,-0.004190294,-0.05032123,-0.015664527,0.029152328,-0.0007689997,-0.04202158,-0.031328898,-0.004842287,-0.022447685,-0.00019500715,0.0124873,-0.034223642,-0.0081064375,-0.00009524514,0.011624145,-0.0045923837,0.038963426,0.02301512,-0.0028998808,0.028153341,0.020137185,0.00039823944,0.007161313,-0.0037101423,-0.038414653,0.033888165,-0.004597481,-0.0041225143,0.0027396416,-0.0069071962,-0.08462865,-0.04404621,0.008939418,0.063255474,0.022885768,-0.030793978,-0.008447363,0.025886266,-0.0047028833,0.012964567,0.004259573,-0.007892692,0.024680514,0.008138563,-0.041675728,-0.029837953,0.006886828,-0.04379639,-0.01614328,-0.037536897,-0.023876531,-0.016104594,0.0099613,-0.028887875,0.010730912,-0.031762436,-0.0102714,-0.010396551,-0.08129331,-0.003636358,0.009464654,0.028876962,-0.0441802,-0.047568932,0.0032933424,0.020676043,-0.02285077,-0.0008501984,0.014987282,0.025812285,-0.05425076,-0.0046886853,-0.004986682,0.031372834,-0.018800328,0.021168625,0.007664824,0.026684279,0.013806326,0.007959623,-0.0061829225,-0.016238682,-0.01231433,0.020476963,-0.010564403,0.00082209485,0.03881273,0.019345153,-0.011650535,-0.039279208,-0.020895584,0.004835432,-0.017206656,-0.031690978,-0.021793373,0.003869407,-0.009541841,-0.018265747,0.015605065,0.010327824,-0.024713097,-0.007202157,-0.017954875,-0.013773963,-0.016954774,-0.0023144968,-0.017852161,-0.016451234,-0.01697433,0.0056884945,0.016987877,-0.00885972,0.034601387,-0.0074555418,0.04599737,-0.0014793307,-0.011299566,0.0048170597,-0.027126886,0.02183434,-0.003789242,0.014591629,0.0146881025,0.03123786,0.019401161,-0.021773169,-0.026205217,-0.005888871,0.021291617,0.02227942,-0.003982728,0.0021186557,-0.008991541,-0.026502209,0.0066458774,0.02085053,0.038670067,0.032894395,0.005730725,0.0466585,0.035257585,-0.0074843303,0.016808053,-0.011865918,0.027172165,0.010539306,-0.008948735,-0.024025863,0.04051052,0.027132967,-0.026739324,-0.042510588,-0.028267575,0.01612531,0.045828108,0.015095111,0.018956514,-0.049223162,-0.012472047,-0.012616792,-0.0035449318,-0.048023175,0.011165805,0.0161725,-0.03132912,-0.029155392,-0.0008620615,0.019484064,-0.007027316,0.02411202,0.0043227915,0.02165102,-0.113063164,0.046405297,-0.028040206,-0.008175681,0.022626193,-0.004620201,0.001242635,-0.045732185,-0.025988957,-0.034569312,0.0014565333,-0.03348099,0.0051267026,-0.022446886,0.0024270595,-0.0018737157,-0.042065784,0.042583454,0.023814937,0.01990327,-0.012910184,-0.060631257,-0.03769338,-0.0745834,0.022013694,0.025371982,0.011068681,0.01326468,0.008750532,0.025847135,0.008321293,0.029541627,-0.016736714,0.061631355,-0.022743313,0.020544626,-0.039805103,-0.05485141,-0.0001958414,0.025623675,0.014430085,0.008363438,-0.03274741,0.002944626,0.005051491,-0.016587645,-0.053461626,-0.018057391,0.001757418,-0.020255696,-0.105159804,0.010834643,0.028297296,-0.032095775,0.027178027,0.0020834482,-0.00060559774,-0.010798713,0.005022915,0.013282345,0.03335755,0.034023434,-0.031138614,-0.018220885,0.0069623133,-0.0011108951,-0.014106173,-0.026337765,-0.014321098,-0.027007528,-0.007888497,-0.037911616,0.023645887,-0.033247244,0.028374292,-0.04049,0.034268938,-0.033570297,-0.022851152,-0.01622982,-0.0042247092,0.005922142,-0.020540453,0.050999835,0.06700037,-0.008611818,0.0011679842,-0.0039926823,-0.0057318206,-0.040623415,-0.050482314,0.029837355,0.008164732,0.0326184,-0.001791086,-0.010133901,0.007244532,-0.0043490846,0.026873926,0.012069878,0.0024290557,0.047794875,-0.011106728,0.00909573,0.020795777,-0.013459759,-0.04955743,0.008094966,-0.04922595,-0.012577334,0.023343097,-0.04564352,-0.054207012,0.022892365,-0.031971607,0.010485107,-0.0007456791,0.017223418,-0.015093856,-0.022666214,0.052531265,0.060876966,-0.0068968157,-0.049880844,0.015529253,-0.026002366,0.015292203,0.0026893874,0.033313937,-0.028223472,0.027588079,-0.031414118,-0.023886,-0.033032537,-0.018051855,0.0018362582,-0.015091217,0.067807816,-0.02160052,-0.060429316,-0.0055371574,0.022680063,0.015271855,-0.044770792,-0.00016260585,-0.015548953,-0.01235817,-0.016166734,0.02329399,-0.013003512,-0.020058524,0.0052851536,0.025287664,0.03361491,0.019787692,-0.016091691,0.007080361,-0.05345746,-0.021468816,0.054658547,0.023458773,0.013329166,-0.022684932,-0.04264269,-0.025059653,-0.0065509593,-0.03218997,-0.041254647,0.046720404,0.011566207,-0.00015890341,0.0420614,-0.0005270269,0.040169146,0.030311996,-0.0377699,0.012084915,0.016948784,0.04685499,0.030618254,-0.020809917,-0.045096558,0.048093133,-0.024044976,0.02801993,0.0028064176,0.022797603,0.017741216,-0.016216619,0.02115708,-0.017885655,0.019700648,0.0037793654,0.019223144,0.002325474,-0.036448747,0.027648339,-0.03233893,-0.022398556,0.013777788,-0.05072061,-0.038854197,-0.01906545,-0.010071327,-0.01661703,0.025295293,-0.029666902,-0.007123649,0.0043700393,0.024619363,0.00044151378,0.016655363,0.020820256,0.053869788,0.010442113,0.00007115876,0.015701443,-0.009729753,0.05023329,0.017956622,0.015857356,0.047416247,-0.012544942,-0.01608595,0.024367914,-0.03952695,0.0068612723,0.03337823,-0.026303733,-0.015721384,-0.008418769,0.005363227,-0.0018659652,0.049820878,0.024987044,0.025067197,-0.0037080648,0.0590255,-0.0040248632,0.02348365,-0.01621074,0.01032155,0.0010913641,0.0028722084],"created_at":1746088925267,"nchars":3430}},"count":3},"sorting":{"language":"english","sortableProperties":["id","title","path","content","embeddingModel","created_at","ctime","mtime","extension"],"sortablePropertiesWithTypes":{"id":"string","title":"string","path":"string","content":"string","embeddingModel":"string","created_at":"number","ctime":"number","mtime":"number","extension":"string"},"sorts":{"id":{"docs":{"1":16,"2":2,"3":1,"4":4,"5":14,"6":7,"7":19,"8":5,"9":8,"10":15,"11":10,"12":0,"13":13,"14":17,"15":9,"16":18,"17":3,"18":20,"19":11,"20":6,"21":12},"orderedDocs":[[12,"060790fafb1418088e58975fbf4492de"],[3,"1003e1be09f34801247d695575da890c"],[2,"1a1a41b8dbfd0a7b6e89ade8a138e59b"],[17,"1c20ad280d809d7369882132cf8e1b21"],[4,"39d9abf539abd6d8bb2719ab7014adaa"],[8,"3bc28948358908d3d01d2ca76befd446"],[20,"47b52ef96a920ab33159b46456c1ee60"],[6,"4f3e18994be94a3c0594cf9489994047"],[9,"52eff318f614703c2abcf5e4b8fb3c48"],[15,"571343ebc6212776d6c44ac53b00a89b"],[11,"6489cb180a9fae1ff890dde104965413"],[19,"7352ecacad7370213f0cbe18df0496af"],[21,"7afb3aa06c849214862fc3641959d7eb"],[13,"80c10db6700bc9a63f0edec519ed2d39"],[5,"87b57dad889cee2b2d25db78f963ca47"],[10,"ac19a4ed66ed03c73f16747b10244e60"],[1,"c4fb9e0e3e1f8ee8799447731015b17c"],[14,"df4bf7fdff83911f964fbd71f6ea100e"],[16,"e0705a6359d1cde9c305ff71fbc392a0"],[7,"eb1d7b55e0857c89bc42e5dddf63331c"],[18,"ec89b4f6b5d0639ad655376255f98693"]],"type":"string"},"title":{"docs":{"1":5,"2":18,"3":8,"4":6,"5":4,"6":2,"7":1,"8":20,"9":16,"10":17,"11":12,"12":13,"13":14,"14":15,"15":9,"16":7,"17":0,"18":3,"19":11,"20":10,"21":19},"orderedDocs":[[17,"Cache Aside"],[7,"Redis 实现分布式锁"],[6,"Redis和Memcached"],[18,"主从架构"],[5,"内存淘汰策略"],[1,"内存管理"],[4,"切片集群模式"],[16,"哨兵"],[3,"大 key"],[15,"对缓存命中率有高要求"],[20,"布隆过滤器"],[19,"持久化"],[11,"数据类型"],[12,"数据类型"],[13,"数据类型"],[14,"数据类型"],[9,"数据结构"],[10,"数据结构"],[2,"管道与事务"],[21,"缓存雪崩、穿透、击穿"],[8,"过期删除策略"]],"type":"string"},"path":{"docs":{"1":20,"2":17,"3":7,"4":5,"5":4,"6":2,"7":1,"8":19,"9":15,"10":16,"11":11,"12":12,"13":13,"14":14,"15":8,"16":6,"17":0,"18":3,"19":10,"20":9,"21":18},"orderedDocs":[[17,"redis/Cache Aside.md"],[7,"redis/Redis 实现分布式锁.md"],[6,"redis/Redis和Memcached.md"],[18,"redis/主从架构.md"],[5,"redis/内存淘汰策略.md"],[4,"redis/切片集群模式.md"],[16,"redis/哨兵.md"],[3,"redis/大 key.md"],[15,"redis/对缓存命中率有高要求.md"],[20,"redis/布隆过滤器.md"],[19,"redis/持久化.md"],[11,"redis/数据类型.md"],[12,"redis/数据类型.md"],[13,"redis/数据类型.md"],[14,"redis/数据类型.md"],[9,"redis/数据结构.md"],[10,"redis/数据结构.md"],[2,"redis/管道与事务.md"],[21,"redis/缓存雪崩、穿透、击穿.md"],[8,"redis/过期删除策略.md"],[1,"操作系统/内存管理.md"]],"type":"string"},"content":{"docs":{"1":5,"2":18,"3":8,"4":6,"5":4,"6":2,"7":1,"8":20,"9":17,"10":16,"11":15,"12":13,"13":14,"14":12,"15":9,"16":7,"17":0,"18":3,"19":11,"20":10,"21":19},"orderedDocs":[[17,"\n\nNOTE TITLE: [[Cache Aside]]\n\nMETADATA:{\"created\":\"2025/04/29 21:09:32\",\"modified\":\"2025/04/29 21:09:32\"}\n\nNOTE BLOCK CONTENT:\n\n在更新数据时，不更新缓存，而是删除缓存中的数据，到读取数据时，发现缓存中没有数据后，再从数据库中读取数据，更新到缓存中\r\n\r\n## 细分为读策略和写策略\r\n\r\n1. **写策略**\r\n\t1. 更新数据库中的数据\r\n\t2. 删除缓存中的数据\r\n2. **读策略**\r\n\t1. 如果读取的数据命中了缓存，则直接返回数据\r\n\t2. 如果读取的数据没有命中缓存，则从数据库中读取数据，然后将数据写入到缓存，并且返回给用户\r\n\r\n## 先删除缓存还是先更新数据库\r\n\r\n1. **先删除缓存，再更新数据库**：在 **读 + 写** 并发的时候，会出现缓存和数据库的数据不一致的问题，但是可以采用 **延迟双删** 的方式解决\r\n\r\n```shell\r\n# 删除缓存\r\nredis.delKey(X)\r\n# 更新缓存\r\ndb.update(X)\r\n# 睡眠\r\nThread.sleep(N)\r\n# 再次删除缓存\r\nredis.delKey(X)\r\n```\r\n\r\n2. **先更新数据库，再删除缓存**：理论上会出现数据不一致的问题，但实际上出现概率不高，因为缓存的写入通常远快于数据库的写入，所以可以保证数据一致性\r\n\r\n## 先更新数据库，再删除缓存，怎么解决删除失败的问题\r\n\r\n### 重试机制\r\n\r\n引入 **消息队列**，将删除缓存要操作的数据加入到消息队列，由消费者操作数据\r\n\r\n1. 如果应用删除缓存失败，可以从消息队列中重新读取数据，然后再次删除缓存。如果重试超过一定次数还没有成功，就需要向业务层发送报错信息\r\n2. 如果缓存删除成功，就要把数据从消息队列中移除，避免重复操作\r\n\r\n### 订阅 MySQL binlog，再操作缓存\r\n\r\n使用 Canal 模拟 MySQL 主从复制到交互协议，把自己伪装成一个 MySQL 的从节点，向 MySQL 主节点发送 dump 请求，MySQL 收到请求后，就会开始推送 Binlog 给 Canal，Canal 解析 Biglog 字节流后，转换为便于读取到结构化数据，供下游程序订阅使用\r\n\r\n[img Canal工作流程](../images/canal工作流程.webp)"],[7,"\n\nNOTE TITLE: [[Redis 实现分布式锁]]\n\nMETADATA:{\"created\":\"2025/05/01 01:47:19\",\"modified\":\"2025/05/01 01:47:19\"}\n\nNOTE BLOCK CONTENT:\n\nRedis 的 SET 命令有个 NX 参数可以实现 **key 不存在才插入**，所以可以用于实现分布式锁\r\n\r\n1. 如果 key 不存在，则显示插入成功，可以用来表示加锁成功\r\n2. 如果 key 存在，则会显示插入失败，可以用来表示加锁失败\r\n\r\n基于 Redis 实现分布式锁时，对于加锁操作，需要满足三个条件：\r\n\r\n1. 加锁包括了读取锁变量、检查锁变量值盒设置锁变量值三个操作，但需要以原子操作的方式完成，所以需要使用 SET 命令带上 NX 选项实现加锁\r\n2. 锁变量需要设置过期时间，以免客户端拿到锁后发生异常，导致锁一直无法释放，所以需要在 SET 命令执行时加上 EX/PX 选项，设置其过期时间\r\n3. 锁变量的值需要能区分来自不同客户端的加锁操作，以免在释放锁时，出现误释放操作，所以，使用 SET 命令设置锁变量值时，每个客户端设置的值是一个唯一值，用于标识客户端\r\n\r\n满足这三个条件的分布式命令如下：\r\n\r\n```shell\r\nSET lock_key unique_value NX PX 10000\r\n```\r\n\r\n而解锁的过程就是将 lock_key 键删除（del lock_key），但不能乱删，必须保证执行操作的客户端就是加锁的客户端。所以，解锁的时候，要先判断锁的 unique_value 是否为加锁客户端，是的话，才将 lock_key 键删除\r\n\r\n```lua\r\n// 释放锁时，先比较 unique_value 是否相等，避免锁的误释放\r\nif redis.call(\"get\", KEYS[1]) == ARGV[1] then\r\n\treturn redis.call(\"del\", KEYS[1])\r\nelse\r\n\treturn 0\r\nend\r\n```\r\n\r\n基于 Redis 实现分布式锁的优点：\r\n\r\n1. 性能高效\r\n2. 实现方便\r\n3. 避免单点故障\r\n\r\n基于 Redis 实现分布式锁的缺点：\r\n\r\n1. 超时时间不好设置：可以基于 **续约** 的方式设置超时时间，先给锁设置一个超时时间，然后启动一个守护线程，让守护线程在一段时间后，重新设置锁的超时时间，当主线程执行完成后，销毁续约锁即可\r\n2. Redis 主从复制模式中的数据是异步复制的，导致分布式锁的不可靠性\r\n\r\n如何解决集群情况下分布式锁的可靠性？\r\n\r\n**Redlock**（红锁），基于多个 Redis 节点的分布式锁，即使有节点发生了故障，锁变量仍然是存在的，客户端还是可以完成锁操作\r\n\r\n基本思路是，让客户端和多个独立的 Redis 节点依次请求申请加锁，如果客户端能够和半数以上的节点成功地完成加锁操作，那么就可以认为加锁成功，否则加锁失败。过程如下：\r\n\r\n1. 客户端获取当前时间（t1）\r\n2. 客户端依次向 N 个 Redis 节点执行加锁操作\r\n\t1. 加锁使用 SET 命令，带上 NX、EX/PX 选项，以及带上客户端的唯一标识\r\n\t2. 如果某个 Redis 节点发生故障，需要给 **加锁操作** 设置一个超时时间\r\n3. 一旦客户端完成了和所有节点的加锁操作，客户端就要计算整个加锁过程的总耗时（t2）\r\n\r\n加锁成功要同时满足两个条件：\r\n\r\n1. 客户端从超过半数的 Redis 节点上成功获取锁\r\n2. 客户端获取锁的总耗时（t2）没有超过锁的有效时间\r\n\r\n加锁成功后，客户端需要重新计算锁的有效时间，计算的结果是锁的最初有效时间减去加锁的总耗时\r\n\r\n加锁失败后，客户端向所有 Redis 节点发起释放锁的操作"],[6,"\n\nNOTE TITLE: [[Redis和Memcached]]\n\nMETADATA:{\"created\":\"2025/05/01 01:47:19\",\"modified\":\"2025/05/01 01:47:19\"}\n\nNOTE BLOCK CONTENT:\n\n## 共同点\r\n\r\n1. 都是基于内存的数据库，一般都用来当作缓存使用\r\n2. 都有过期策略\r\n3. 两者都性能都非常高\r\n\r\n## 区别\r\n\r\n1. Redis 支持的数据类型更丰富（String、Hash、List、Set、ZSet），而 Memcached 只支持最简单的 key-value 数据类型\r\n2. Redis 支持数据的持久化，可以将内存中的数据保存在磁盘中，重启时可以再次加载进行使用，而 Memcached 没有持久化功能，数据全部存在内存中，Memcached 重启或挂掉后，数据就丢失了\r\n3. Redis 原生支持集群模式，Memcached 没有原生的集群模式，需要依靠客户端实现往集群中分片写入数据\r\n4. Redis 支持发布订阅模型、Lua 脚本、事务等功能，而 Memcached 不支持"],[18,"\n\nNOTE TITLE: [[主从架构]]\n\nMETADATA:{\"created\":\"2025/04/27 17:04:09\",\"modified\":\"2025/04/29 21:09:32\"}\n\nNOTE BLOCK CONTENT:\n\nredis 提供了 **主从复制模式**，所有的数据修改只在主服务器上进行，然后将最新的数据同步给从服务器。\r\n\r\n## 主从同步\r\n\r\n### 第一次同步\r\n\r\n可以使用 **replicaof (redis 5.0 之前使用 slaveof)** 命令形成主服务器和从服务器的关系。例如，现有服务器 A 和服务器 B，要将服务器 B 变为服务器 A 的 **从服务器**，则在服务器 B 上执行以下命令：\r\n\r\n```shell\r\n# 服务器 B 执行这条命令\r\nreplicaof <服务器A的IP地址> <服务器A的redis端口号>\r\n```\r\n\r\n主从服务器的第一次同步的过程可分为三个阶段：\r\n\r\n1. 第一阶段是[建立链接、协商同步](#第一阶段：建立链接、协商同步)\r\n2. 第二阶段是[主服务器同步数据给从服务器](#第二阶段：主服务器同步数据给从服务器)\r\n3. 第三阶段是[主服务器发送新的写操作命令给从服务器](#第三阶段：主服务器发送新的写操作命令给从服务器)\r\n\r\n[img 主从第一次同步的三个阶段](../images/主从第一次同步的三个阶段.webp)\r\n\r\n#### 第一阶段：建立链接、协商同步\r\n\r\n执行 replicaof 命令后，从服务器会给主服务器发送 **psync** 命令，表示要进行数据同步\r\n\r\npsync 命令包含两个参数，分别是主服务器的 **runID** 和复制进度 **offset**\r\n\r\n1. runID，每个 redis 服务器在启动时都会自动生产一个随机的 ID 用于唯一标识自己。当从服务器和主服务器第一次同步时，因为不知道主服务器的 runID，所以将其设置为 \"?\"\r\n2. offset，表示复制的进度，第一次同步时，其值为 -1\r\n\r\n主服务器收到 psync 命令后，会用 **FULLRESYNC** 作为响应命令返回给对方，并且这个响应命令会带上两个参数：主服务器的 runID 和主服务器目前的复制进度 offset。从服务器收到这个响应后，会记录这两个值\r\n\r\nFULLRESYNC 响应命令的意图是采用 **全量复制** 的方式，也就是主服务器会把所有的数据都同步给从服务器\r\n\r\n#### 第二阶段：主服务器同步数据给从服务器\r\n\r\n主服务器执行 **bgsave** 命令生成 RDB 文件，然后把文件发送给从服务器，从服务器收到 RDB 文件后，会先清空当前的数据，然后载入 RDB 文件。为了保证主从服务器的数据一致性，主服务器会将在 RDB 文件生成期间收到的写操作命令，写入到 **replication buffer** 缓冲区中\r\n\r\n#### 第三阶段：主服务器发送新的写操作命令给从服务器\r\n\r\n在主服务器生成的 RDB 文件发送后，将 replication buffer 缓冲区里所记录的写操作命令发送给从服务器，然后从服务器重新执行这些操作\r\n\r\n#### 命令传播\r\n\r\n主从服务器在完成第一次同步后，双方之间会维护一个 TCP 连接，后续主服务器可以通过这个连接继续将写操作命令传播给从服务器，然后从服务器执行该命令，使得主从服务器状态相同。该过程被称为 **基于长连接的命令传播**\r\n\r\n#### 分摊主服务器的压力\r\n\r\n主服务器是可以有多个从服务器的，如果从服务器的数量非常多，且都与主服务器进行全量同步的话，会带来两个问题：\r\n\r\n1. 由于通过 bgsave 命令来生成 RDB 文件，那么主服务器会忙于使用 fork() 创建子进程，如果主服务器的内存数据非常大，在执行 fork() 时会阻塞主线程，使得 redis 无法正常处理请求\r\n2. 传输 RDB 文件会占用主服务器的网络带宽，会对主服务器响应命令请求产生影响\r\n\r\nredis 从服务器可以有自己的从服务器，不仅可以作为从服务器接收主服务器的同步数据，也可以同时作为主服务器的形式将数据同步给其他从服务器。通过这种方式，主服务器生成 RDB 和传输 RDB 的压力可以分摊到各个中间层级的从服务器上\r\n\r\n#### 增量复制\r\n\r\n在 redis 2.8 之前，如果主从服务器在命令同步时出现了网络断开又恢复的情况，从服务器就会和主服务器重新进行一次全量复制\r\n\r\n从 redis 2.8 开始，网络断开又恢复后，主从服务器会采用 **增量复制** 的方式继续同步，只会把网络断开期间主服务器收到的写操作命令，同步给从服务器\r\n\r\n##### 增量复制的三个步骤：\r\n\r\n1. 从服务器在恢复网络后，会发送 psync 命令到主服务器，此时 psync 命令的 offset 参数不是 -1\r\n2. 主服务器收到该命令后，用 **CONTINUE** 响应命令告诉从服务器接下来采用增量复制的方式同步数据\r\n3. 主服务器将断线期间，所执行的写命令发送给从服务器，从服务器执行这些命令\r\n\r\n##### 如何知道将哪些增量数据发送给从服务器？\r\n\r\n1. repl_backlog_buffer：是一个 **环形** 缓冲区，用于主从服务器断连后，从中找到差异的数据\r\n2. replication offset：标记 repl_backlog_buffer 缓冲区的同步进度，主从服务器都有自己的偏移量，主服务器使用 **master_repl_offset** 来记录自己 **写** 到的位置，从服务器使用 **slave_repl_offset** 来记录自己 **读** 到的位置\r\n\r\n##### 对从服务器执行哪种同步操作\r\n\r\n1. 如果判断出从服务器要读取的数据还在 repl_backlog_buffer 缓冲区中，那么主服务器将采用 **增量同步** 的方式\r\n2. 如果判断出从服务器要读取的数据已经不存在 repl_backlog_buffer 缓冲区中，那么主服务器将采用 **全量同步** 的方式\r\n\r\n##### 如何估算 repl_backlog_buffer 最小的大小\r\n\r\n```\r\nsecond * write_size_per_second\r\n```\r\n\r\n1. second 为从服务器断线重连所需的平均时间（单位秒）\r\n2. write_size_per_second 为主服务器平均每秒产生的写命令数量大小\r\n\r\n##### 如何修改 repl_backlog_buffer 大小\r\n\r\n```shell\r\nrepl-backlog-buffer 1mb\r\n```"],[5,"\n\nNOTE TITLE: [[内存淘汰策略]]\n\nMETADATA:{\"created\":\"2025/05/01 01:47:19\",\"modified\":\"2025/05/01 01:47:19\"}\n\nNOTE BLOCK CONTENT:\n\n当 Redis 的运行内存已经超过 Redis 设定的最大内存之后，则会使用内存淘汰策略删除符合条件的 key，以此来保障 Redis 高效运行\r\n\r\n## 如何设置 Redis 最大运行内存\r\n\r\n在配置文件 redis.conf 中，可以通过参数 maxmemory \\<bytes\\> 来设定最大运行内存，只有在 Redis 的运行内存达到了设置的最大运行内存，才会触发内存淘汰策略\r\n\r\n不同位数的操作系统，maxmemory 的默认值是不同的：\r\n\r\n1. 在 64 位操作系统中，maxmemory 的默认值是 0，表示没有内存限制，无论用户存放多少数据到 Redis 中，也不会对可用内存进行检查，直到 Redis 实例崩溃也无作为\r\n2. 在 32 位操作系统中，maxmemory 的默认值是 3 G，因为 32 位的机器最大只支持 4 GB 的内存，而系统本身就需要一定的内存资源来支持运行\r\n\r\n## Redis 内存淘汰策略有哪些\r\n\r\n1. 不进行数据淘汰的策略\r\n\t1. **noeviction**（Redis 3.0 之后，默认的内存淘汰策略）：表示当运行内存超过最大设置内存时，不淘汰任何内存，而是不再提供服务，直接返回错误\r\n2. 进行数据淘汰的策略\r\n\t1. 在设置了过期时间的数据中进行淘汰\r\n\t\t1. **volatile-random**：随机淘汰设置了过期时间的任意键值\r\n\t\t2. **volatile-ttl**：优先淘汰更早过期的键值\r\n\t\t3. **volatile-lru**（Redis 3.0 之前，默认的内存淘汰策略）：淘汰所有设置了过期时间的键值中，最久未使用的键值\r\n\t\t4. **volatile-lfu**（Redis 4.0 后新增的内存淘汰策略）：淘汰所有设置了过期时间的键值中，最少使用的键值\r\n\t2. 在所有数据范围内进行淘汰\r\n\t\t1. **allkeys-random**：随机淘汰任意键值\r\n\t\t2. **allkeys-lru**：淘汰整个键值中最久未使用的键值\r\n\t\t3. **allkeys-lfu**（Redis 4.0 后新增的内存淘汰策略）：淘汰整个键值中最少使用的键值\r\n\r\n## 如何查看当前 Redis 使用的内存淘汰策略\r\n\r\n```shell\r\n> config get maxmemory-policy\r\n1) \"maxmemory-policy\"\r\n2) \"noeviction\"\r\n```\r\n\r\n## 如何修改 Redis 的内存淘汰策略\r\n\r\n1. 通过 **config get maxmemory-policy \\<策略\\>** 命令设置。优点是设置后立即生效，不需要重启服务，缺点是重启后设置就会失效\r\n2. 通过修改配置文件，设置 **maxmemory-policy \\<策略\\>**，优点是重启后配置不会丢失，缺点是重启后才能生效\r\n\r\n## LRU 和 LFU 的区别\r\n\r\n### LRU\r\n\r\n#### 什么是 LRU\r\n\r\nLRU 全称是 Least Recently Used 最近最少使用，会选择淘汰最近最少使用的数据\r\n\r\n传统 LRU 算法基于 **链表** 结构实现，链表中的元素按照操作顺序从前往后排列，最新操作的键会被移动到表头，当需要内存淘汰时，只需要删除表尾的元素即可。但传统的 LRU 算法存在两个问题：\r\n\r\n1. 需要用链表管理所有的缓存数据，会带来额外的空间开销\r\n2. 当有数据被访问时，需要在链表上把该数据移动到表头，如果有大量数据被访问，就会带来很多链表移动操作，会很耗时，进而降低 Redis 缓存性能\r\n\r\n#### Redis 如何实现 LRU\r\n\r\nRedis 实现的是一种 **近似 LRU 算法**，目的是为了更好地节约内存，实现方式是在 Redis 的对象结构体中添加一个额外的字段，用于记录此数据的最后一次访问时间\r\n\r\n当 Redis 进行内存淘汰时，会使用 **随机采样** 的方式来淘汰数据，随机取 5 个值（可配置），然后淘汰最久没有使用的那个\r\n\r\n##### Redis 实现的 LRU 的优点\r\n\r\n1. 不用为所有数据维护一个大链表，节省了空间占用\r\n2. 不用在每次数据访问时都移动链表项，提升了缓存性能\r\n\r\n但是 LRU 算法 **无法解决缓存污染问题**，比如应用一次读取了大量数据，而这些数据只会被读取这一次，那么这些数据会留存在 Redis 缓存中很长一段时间，造成缓存污染\r\n\r\n### LFU\r\n\r\n#### 什么是 LFU\r\n\r\nLFU 全称是 Least Frequently Used 最近最不常用，根据数据访问次数淘汰数据，核心思想是如果数据过去被访问多次，那么将来被访问的频率也更高\r\n\r\nLFU 会记录每个数据的访问次数，当一个数据被再次访问时，就会增加该数据的访问次数\r\n\r\n#### Redis 如何实现 LFU\r\n\r\n```C\r\ntypedef struct redisObject {\r\n\t...\r\n\t// 24 bits，用于记录对象的访问信息\r\n\tunsigned lru:24;\r\n\t...\r\n} robj;\r\n```\r\n\r\nRedis 对象头中的 lru 字段，在 LRU 算法和 LFU 算法下使用方式并不相同\r\n\r\n1. 在 LRU 算法中，Redis 对象头的 24 bits 的 lru 字段是用来记录 key 的访问时间戳\r\n2. 在 LFU 算法中，Redis 对象头的 24 bits 的 lru 字段被分为两段存储，高 16 bit 存储 ldt(Last Decrement Time)，低 8 bit 存储 logc(Logistic Counter)\r\n\t1. ldt 是用来记录 key 的访问时间戳\r\n\t2. logc 是用来记录 key 的访问频次，值越小表示使用频率越低，越容易被淘汰，每个新加入的 key 的 logc 初始值为 5，**logc 会随时间推移而衰减**\r\n\r\nRedis 在访问 key 时，对于 logc 是这样变化的：\r\n\r\n1. 先按照上次访问距离当前的时长，对 logc 进行衰减\r\n2. 然后再按照一定概率增加 logc 的值\r\n\r\nredis.conf 提供两个配置项，用于调整 LFU 算法从而控制 logc 的增长和衰减：\r\n\r\n1. **lfu-decay-time**：用于调整 logc 的衰减速度，以分钟为单位，默认值为 1，lfu-decay-time 值越大，衰减越慢\r\n2. **lfu-log-factor**：用于调整 logc 的增长速度，lfu-log-factor 值越大，logc 增长越慢"],[1,"\n\nNOTE TITLE: [[内存管理]]\n\nMETADATA:{\"created\":\"2025/05/01 16:36:45\",\"modified\":\"2025/05/01 16:40:04\"}\n\nNOTE BLOCK CONTENT:\n\n## 虚拟内存\n\n单片机的 CPU 直接操作内存的 **物理地址**，这种情况无法在内存中同时运行两个程序\n\n操作系统通过把进程所使用的地址 **隔离** 开来，为每个进程分配独立的一套 **虚拟地址**，互不干涉\n\n操作系统会提供一种机制吗，将不同进程的虚拟地址和不同内存的物理地址映射起来"],[4,"\n\nNOTE TITLE: [[切片集群模式]]\n\nMETADATA:{\"created\":\"2025/05/01 01:47:19\",\"modified\":\"2025/05/01 01:47:19\"}\n\nNOTE BLOCK CONTENT:\n\n当 Redis 缓存数据量大到一台服务器无法缓存时，就需要使用 **Redis 切片集群**（Redis Cluster）方案，将数据分布在不同的服务器上，以此来降低系统对单主节点的依赖，从而提高 Redis 服务的读写性能\r\n\r\nRedis Cluster 方案采用 **哈希槽**（Hash Slot）来处理数据和节点之间的映射关系。在 Redis Cluster 方案中，**一个切片集群共有 16384 个哈希槽**，这些哈希槽类似于数据分区，每个键值对都会根据它的 key，被映射到一个哈希槽中，具体执行过程分为两大步：\r\n\r\n1. 根据键值对的 key，按照 CRC16 算法计算一个 16 bit 的值\r\n2. 再用 16 bit 值对 16384 取模，得到 0~16383 范围内的模数，每个模数代表一个相应编号的哈希槽\r\n\r\n## 哈希槽怎么被映射到具体的 Redis 节点上\r\n\r\n1. **平均分配**：在使用 cluster create 命令创建 Redis 集群时，Redis 会自动把所有哈希槽平均分布到集群节点上\r\n2. **手动分配**：可以使用 cluster meet 命令手动建立节点间的连接，组成集群，再使用 cluster addslots 命令，指定每个节点上的哈希槽个数。需要把 16384 个槽都分配完，否则集群无法正常工作\r\n\r\n节点 1 保存哈希槽 0 和 1，节点 2 保存哈希槽 2 和 3\r\n\r\n```shell\r\nredis-cli -h 192.168.1.10 -p 6379 cluster addslots 0,1\r\nredis-cli -h 192.168.1.11 -p 6379 cluster addslots 2,3\r\n```\r\n\r\n## 集群脑裂导致数据丢失\r\n\r\n### 脑裂\r\n\r\n在 Redis 主从架构中，部署方式一般是 **一主多从**，主节点提供写操作，从节点提供读操作。如果主节点的网络突然发生问题，与所有从节点都失联了，但是和客户端的网络是正常的，这时客户端不知道 Redis 内部已经出现了问题，还在照常向失联的主节点写数据，此时这些数据被旧主节点缓存在缓冲区中，因为主从节点之间的网络问题，这些数据无法同步给从节点\r\n\r\n这时，哨兵也发现主节点失联了，便认为主节点挂了（但实际上主节点正常运行，只是网络出了问题），于是哨兵就会在从节点中选举出一个 leeder 作为主节点，这时集群就有两个主节点了——脑裂出现了\r\n\r\n然后，网络突然好了，哨兵因为之前已经选举出一个新主节点了，就会把旧主节点降级为从节点，然后这个从节点会向新主节点请求数据同步，**因为第一次同步是全量同步的方式，此时的从节点会清空自己本地的数据，然后再做全量同步。所以，之前客户端在失联期间写入的数据就会丢失，也就是集群产生脑裂数据丢失的问题**\r\n\r\n### 解决方案\r\n\r\n当主节点发现从节点下线或者通信超时的总数量达到阈值时，那么禁止主节点进行写数据，直接返回错误给客户端\r\n\r\n在 Redis 的配置文件中有两个参数我们可以设置：\r\n\r\n1. min-slaves-to-write x，主节点必须要有至少 x 个从节点连接，如果小于这个数，主节点会禁止写数据\r\n2. min-slaves-max-lag x，主从数据复制和同步的延迟不能超过 x 秒，如果超过，主节点会禁止写数据"],[16,"\n\nNOTE TITLE: [[哨兵]]\n\nMETADATA:{\"created\":\"2025/04/29 21:09:32\",\"modified\":\"2025/04/29 21:09:32\"}\n\nNOTE BLOCK CONTENT:\n\n## 为什么要有哨兵机制\r\n\r\n在 Redis 的主从架构中，由于主从模式是读写分离的，如果主节点 (master) 挂了，那么将没有主节点来服务客户端的写操作请求，也没有主节点给从节点 (slave) 进行数据同步。Redis 在 2.8 版本以后提供的 **哨兵 (Sentinel) 机制**，它的作用是实现 **主从节点故障转移**，它会监测主节点是否存活，如果发现主节点挂了，它就会选举一个从节点切换为主节点，并把新主节点的相关信息通知给从节点和客户端\r\n\r\n## 哨兵机制是如何工作的\r\n\r\n哨兵节点主要负责三件事情：\r\n\r\n1. 监控\r\n2. 选主\r\n3. 通知\r\n\r\n### 如何判断主节点真的故障了\r\n\r\n#### 主观下线\r\n\r\n哨兵会周期性地给所有主从节点发送 PING 命令，当主从节点收到 PING 命令后，会发送一个响应命令给哨兵，这样哨兵就可以判断主从节点是否在正常运行\r\n\r\n如果主节点或者从节点没有在规定的时间内响应哨兵的 PING 命令，哨兵就会将它们标记为 **主观下线**，这个规定的时间是由配置项 **down-after-milliseconds** 参数设定的，单位毫秒\r\n\r\n#### 客观下线\r\n\r\n客观下线只适用于主节点。之所以针对主节点设计主观下线和客观下线两个状态，是因为有可能主节点其实并没有故障，可能只是因为主节点的系统压力比较大或者网络发生了拥塞，导致主节点没有在规定时间内响应哨兵的 PING 命令\r\n\r\n所以，为了减少误判的情况，哨兵在部署的时候不会只部署一个节点，而是用多个节点部署成 **哨兵集群** （最少需要三台机器来部署哨兵集群），通过多个哨兵节点一个判断，就可以避免单个哨兵因为自身网络状况不好，而误判主节点下线的情况。同时，多个哨兵的网络同时不稳定的概率较小，由它们一起做决策，误判率也能降低\r\n\r\n##### 如何判定主节点为客观下线\r\n\r\n当一个哨兵判断主节点为 **主观下线** 后，就会向其他哨兵发起命令，其他哨兵收到这个命令后，就会根据自身和主节点的网络状况，做出赞成投票或者拒绝投票的响应\r\n\r\n当这个哨兵的赞同票数达到哨兵配置文件中的 quorum 配置项设定的值后，这时主节点就会被该哨兵标记为 **客观下线**，quorum 设定的值包括哨兵本身的赞成票\r\n\r\nquorum 的值一般设置为哨兵个数的二分之一加 1\r\n\r\n哨兵判断完主节点客观下线后，哨兵就要在多个从节点中，选出一个成为新主节点\r\n\r\n### 如何选举新主节点\r\n\r\nredis 有个 **down-after-milliseconds * 10** 配置项，如果发生断连的次数超过了 10 次，就说明这个从节点的网络状态不好，不适合成为新主节点\r\n\r\n过滤掉网络状态不好的从节点后，对所有剩下的从节点进行三轮考察：优先级、复制进度、ID 号\r\n\r\n1. 第一轮考察：哨兵首先会根据从节点的优先级进行排序，优先级越小排名越靠前\r\n2. 第二轮考察：如果优先级相同，则查看复制的下标，哪个从主节点接收的复制数据多，哪个就靠前\r\n3. 第三轮考察：如果优先级和下标都相同，就选择从节点 ID 较小的那个\r\n\r\n### 由哪个哨兵进行主从故障转移\r\n\r\n判断主节点为客观下线的哨兵则为候选者，候选者会向其他哨兵发送命令，表明希望成为 leader 来执行主从切换，并让所有其他哨兵对它进行投票。每个哨兵只有一次投票机会，可以投给自己或者别人，但是只有候选者才能投给自己\r\n\r\n候选节点晋升新主节点需要在投票过程中满足两个条件：\r\n\r\n1. 拿到半数以上的赞成票\r\n2. 拿到的票数同时还需要大于等于哨兵配置文件中的 quorum 值\r\n\r\n### 为什么哨兵节点至少要有 3 个\r\n\r\n如果哨兵集群中只有 2 个哨兵节点，此时如果一个哨兵想成为 leader，必须获得 2 票，而不是 1 票\r\n\r\n所以，如果哨兵集群中有个哨兵挂掉了，只剩一个哨兵了，这个哨兵想成为 leader，票数无法达到两票，就无法进行主从节点的切换\r\n\r\n### 如何通知客户端新的主节点信息\r\n\r\n通过 redis 的 **发布者/订阅者机制** 实现通知。客户端订阅了主从切换的事件，当哨兵把新主节点选举出来后，就会发布新主节点的 IP 地址和端口信息，这时客户端就可以收到这条信息\r\n\r\n### 哨兵集群如何组成\r\n\r\n搭建哨兵集群的方式\r\n\r\n```shell\r\nsentinel monitor <master-name> <ip> <redis-port> <quorum>\r\n```\r\n\r\n哨兵节点之间通过 redis 的发布者/订阅者机制来相互发现\r\n\r\n在主从集群中，主节点上有一个名为 **\\_\\_sentinel\\_\\_:hello** 的频道，不同哨兵通过该频道相互发现，实现互相通信\r\n\r\n哨兵会向主节点发送 **INFO** 命令获取所有从节点的信息"],[3,"\n\nNOTE TITLE: [[大 key]]\n\nMETADATA:{\"created\":\"2025/05/01 01:47:19\",\"modified\":\"2025/05/01 01:47:19\"}\n\nNOTE BLOCK CONTENT:\n\n## 什么是大 key\r\n\r\n大 key 并不是指 key 的值很大，而是指 key 对应的 value 很大\r\n\r\n一般而言，下面两种情况为大 key：\r\n\r\n1. [String](数据类型#string) 类型的值大于 10 KB\r\n2. [Hash](数据类型#Hash)、[List](数据类型#List)、[Set](数据类型#Set)、[ZSet](数据类型#ZSet) 类型元素的个数超过 5000 个\r\n\r\n## 如何找到大 key\r\n\r\n### 通过 redis-cli --bigkeys 命令查找大 key\r\n\r\n```shell\r\nredis-cli -h 127.0.0.1 -p 6379 -a \"password\" --bigkeys\r\n```\r\n\r\n注意事项：\r\n\r\n1. 最好选择在从节点上执行该命令，因为在主节点上执行时，会阻塞主节点\r\n2. 如果没有从节点，可以选择在 Redis 实例业务压力大低峰阶段进行扫描查询，以免影响到实例的正常运行；或者使用 -i 参数控制扫描间隔，避免长时间扫描降低 Redis 实例的性能\r\n\r\n不足之处：\r\n\r\n1. 这个方法只能返回每种类型中最大的那个 bigkey，无法得到大小排在前 N 位的 bigkey\r\n2. 对于集合类型来说，这个方法只统计集合元素个数的多少，而不是实际占用的内存量。但是，一个集合的元素个数多，并不一定占用的内存就多\r\n\r\n### 使用 SCAN 命令查找大 key\r\n\r\n使用 SCAN 命令对数据库扫描，然后用 TYPE 命令获取返回的每一个 key 的类型\r\n\r\n对于 [String](数据类型#string) 类型，可以使用 STRLEN 命令获取字符串的长度，也就是所占用的内存空间字节数\r\n\r\n对于集合类型，有两种方法可以获取占用的内存大小：\r\n\r\n1. 如果能够预先从业务层知道集合元素的平均大小，那么可以使用下列命令获取集合元素的个数，然后乘以集合元素的平均大小：\r\n\t1. [List](数据类型#List)：LLEN\r\n\t2. [Hash](数据类型#Hash)：HLEN\r\n\t3. [Set](数据类型#Set)：SCARD\r\n\t4. [ZSet](数据类型#ZSet)：ZCARD\r\n2. 如果不能提前知道写入集合的元素大小，可以使用 MEMORYUSAGE 命令，查询一个键值对占用的内存空间\r\n\r\n### 使用 RdbTools 工具查找大 key\r\n\r\n例如，将大于 10 kb 的 key 输出到一个表格文件\r\n\r\n```shell\r\nrdb dump.rdb -c memory --bytes 10240 -f redis.csv\r\n```\r\n\r\n## 如何删除大 key\r\n\r\n### 分批次删除\r\n\r\n1. 对于 Hash，使用 HSCAN 扫描法\r\n2. 对于 Set，使用 SRANDMEMBER 每次随机取数据删除\r\n3. 对于 ZSet，可以使用 ZREMRANGEBYRANK 命令直接删除\r\n4. 对于 List，使用 POP\r\n\r\n### 异步删除\r\n\r\n用 UNLINK 命令代替 DEL 删除，Redis 会将这个 key 放入一个异步线程中进行删除，不会阻塞主线程"],[15,"\n\nNOTE TITLE: [[对缓存命中率有高要求]]\n\nMETADATA:{\"created\":\"2025/04/29 21:09:32\",\"modified\":\"2025/04/29 21:09:32\"}\n\nNOTE BLOCK CONTENT:\n\n采用 **更新数据库 + 更新缓存** 的方案\r\n\r\n## 如何保证数据一致性\r\n\r\n1. 在更新缓存前先加 **分布式锁**，保证同一时间只允许一个请求更新缓存\r\n2. 在更新缓存时，给缓存加较短的 **过期时间**"],[20,"\n\nNOTE TITLE: [[布隆过滤器]]\n\nMETADATA:{\"created\":\"2025/04/27 12:55:05\",\"modified\":\"2025/04/27 13:14:28\"}\n\nNOTE BLOCK CONTENT:\n\n## 组成\n\n布隆过滤器由 **初始值都为 0 的位图数组** 和 **N 个哈希函数** 两部分组成。\n\n## 完成标记的步骤\n\n1. 使用 N 个哈希函数分别对数据进行哈希计算，得到 N 个哈希值\n2. 将第一步得到的 N 个哈希值对位图数组的长度取模，得到每个哈希值在位图数组中的对应位置\n3. 将每个哈希值在位图数组的对应位置的值设为 1\n\n举个例子，假设有个位图长度为 8，哈希函数 3 个的布隆过滤器\n[img 布隆过滤器标记位图数组](../images/布隆过滤器标记位图数组.webp)\n\n## 假阳性\n\n布隆过滤器是基于哈希函数实现查找的，高效查找的同时存在 **哈希冲突** 的可能性，比如数据 x 和数据 y 都可能落在第 1、4、6 位置，但事实上数据库中并不存在数据 y，存在误判的情况\n\n## 总结\n\n查询布隆过滤器时，返回数据存在，并不一定证明数据库中存在该数据，但是返回不存在，数据库中一定不存在该数据。"],[19,"\n\nNOTE TITLE: [[持久化]]\n\nMETADATA:{\"created\":\"2025/04/27 13:16:52\",\"modified\":\"2025/04/27 16:59:33\"}\n\nNOTE BLOCK CONTENT:\n\n## AOF 日志\n\nredis 每执行一条写操作命令，就把该命令追加写入到 aof 日志中，这种保存写操作命令到日志的持久化方式，就是 redis 中的 AOF(Append Only File) 持久化功能，注意只会记录 **写操作** 命令，**读操作命令** 是不会被记录的。\n\n在 redis 中 AOF 持久化功能默认是 **不开启** 的，需要修改 **redis.conf** 配置文件中的以下参数：\n\n```shell\n// redis.conf\nappendonly     yes              // 表示是否开启AOF持久化(默认 no，关闭)\nappendfilename \"appendonly.aof\" // AOF持久化文件的名称\n```\n\n### 先执行再记录的好处\n\n1. 避免额外的检查开销\n2. 不会阻塞当前写操作命令的执行\n\n### 潜在风险\n\n1. 执行写操作命令和记录日志是两个过程，当 redis 还没来得及将命令写入硬盘时，服务器发生宕机，这个数据就会有 **丢失的风险**\n2. 由于写操作命令执行成功后才记录到 AOF 日志，所以不会阻塞当前写操作命令的执行，但是可能会给 **下一个** 命令带来阻塞风险，因为执行与记录这两个操作都是在 **主进程** 中完成的\n\n### 写入 AOF 日志的过程\n\n[img 写入AOF日志的过程](../images/写入AOF日志的过程.webp)\n\n1. redis 执行完写操作命令后，会将命令追加到 **server.aof_buf** 缓冲区\n2. 然后通过 **write()** 系统调用，将 aof_buf 缓冲区的数据写入到 AOF 文件，此时数据 **并没有** 写入到硬盘，而是拷贝到了内核缓冲区 **page cache**，等待内核将数据写入硬盘\n3. 具体内核缓冲区的数据什么时候写入到硬盘，由内核决定\n\n### 3 种写回硬盘的策略\n\n在 **redis.conf** 配置文件中的 **appendfsync** 配置项有以下 3 种参数可填\n\n1. **Always** ：每次写操作命令执行完后，同步将 AOF 日志数据写回硬盘\n2. **Everysec** ：每次写操作命令执行完后，先将命令写入到 AOF 文件的内核缓冲区，然后 **每隔一秒** 将缓冲区的内容写回到硬盘\n3. **No** ：不由 redis 控制写回硬盘的时机，转交给操作系统控制\n\n这 3 种写回策略都无法完美解决 **主进程阻塞** 和 **减少数据丢失** 的问题，原因如下：\n\n1. **Always** ：可以最大程度保证数据不丢失，但是由于每执行一条写操作命令就同步将 AOF 内容写回硬盘，所以不可避免会影响主进程的性能\n2. **No** ：交由操作系统决定何时将 AOF 日志内容写回硬盘，相比于 Always 策略性能较好，但是操作系统写回硬盘的时机是不可预知的，如果 AOF 日志没有写回硬盘，一旦服务器宕机，就会丢失不定数量的数据\n3. **Everysec** ：折中的方式，避免了 Always 策略的性能开销，也比 No 策略更能避免数据丢失\n\n根据业务场景进行选择\n\n1. 高性能选择 No 策略\n2. 高可靠选择 Always 策略\n3. 允许数据丢失一点，又想性能高，选择 Everysec 策略\n\n[img redis写回策略总结](../images/redis写回策略总结.webp)\n\n### AOF 重写机制\n\nAOF 重写机制是在重写时，读取当前数据库中的所有键值对，然后将每一个键值对用一条命令记录到 **新的 AOF 文件**，等到全部记录完后，就将新的 AOF 文件替换掉现有的 AOF 文件\n\n### AOF 后台重写\n\nRedis 的重写 AOF 过程是由后台子进程 **bgrewriteaof** 来完成的，这样做有两个好处：\n\n1. 子进程进行 AOF 重写期间，主进程可以继续处理命令请求，从而避免阻塞主进程\n2. 子进程带有主进程的[数据副本](#子进程如何拥有主进程的数据副本)，不用通过加锁来保证数据安全\n\n#### 子进程如何拥有主进程的数据副本\n\n主进程在通过 **fork** 系统调用生成 **bgrewriteaof** 子进程时，操作系统会将主进程的 **页表** 复制一份给子进程，两者的虚拟空间不同，但其对应的物理空间是同一个\n\n这样能够 **节约物理内存资源**，页表对应的页表项的属性会标记该物理内存的权限为 **只读**\n\n##### 写时复制\n\n不过，当父进程或子进程在向这个内存发起写操作时，CPU 就会触发 **缺页中断**，这个缺页中断是由于违反权限导致的，然后操作系统会在 **缺页异常处理函数** 里进行 **物理内存的复制**，并重新设置其内存映射关系，将父子进程的内存读写权限设置为 **可读写**，最后才会对内存进行写操作，这个过程被称为 **写时复制(Copy On Write)**\n\n但是，写时复制只会复制主进程修改的物理内存数据，没有修改的物理内存还是与子进程共享的\n\n#### 导致阻塞父进程的两个阶段\n\n1. 创建子进程的过程中，由于要复制父进程的页表等数据结构，阻塞的时间和页表的大小有关，页表越大，阻塞的时间也越长\n2. 创建完子进程后，如果子进程或父进程修改了共享数据，就会发生[写时复制](#写时复制)，这期间会拷贝物理内存，如果内存越大，自然阻塞的时间也越长\n\n#### AOF 重写缓冲区\n\n在重写 AOF 期间，当 redis 执行完一个写命令后，它会 **同时将这个写命令写入到 AOF 缓冲区和 AOF 重写缓冲区**\n\n## RDB 快照\n\nredis 提供了两个命令来生产 RDB 文件，分别是 **save** 和 **bgsave**，区别在于是否在 **主线程** 里执行：\n\n1. 执行 **save** 命令，就会在主线程生成 RDB 文件，**会阻塞主线程**\n2. 执行 **bgsave** 命令，会创建一个子进程来生成 RDB 文件，可以 **避免阻塞主线程**\n\nredis 还可以通过配置文件的选项实现每隔一段时间自动执行一次 **bgsave** 命令：\n\n```shell\nsave 900 1 // 900秒内，对数据库进行了至少1次修改\nsave 300 10 // 300秒内，对数据库进行了至少10次修改\nsave 60 10000 // 60秒内，对数据库进行了至少10000次修改\n```\n\n### 执行快照时，数据能被修改吗\n\nredis 在执行 bgsave 时采用了[写时复制](#写时复制)技术，发生写时复制后，RDB 快照保存的是 **原本的内存数据**，而主线程刚刚修改的数据，则需要等到下一次 bgsave 快照\n\n如果系统恰好在 RDB 快照创建完毕后崩溃，那么 redis 将会丢失主线程在快照期间的修改\n\n### 极端情况\n\n如果所有的共享内存都被修改，则此时的内存占用是原先的 **2 倍**\n\n## 混合持久化\n\nredis4.0 提出的 **混合使用 AOF 日志和内存快照**，也叫 **混合持久化**\n\n如果要开启混合持久化功能，可以在 redis 配置文件中修改如下配置\n\n```shell\naof-use-rdb-preamble yes\n```\n\n### 混合持久化的工作过程\n\n混合持久化工作在 **AOF 日志重写过程**\n\n当开启混合持久化时，在 AOF 重写日志时，fork 出来的重写子进程会先将与主线程共享的内存数据以 RDB 方式写入到 AOF 文件，然后主线程的操作命令会被记录在 **重写缓冲区**，重写缓冲区的增量命令会以 AOF 方式写入到 AOF 文件，写入完成后会通知主进程将新的含有 RDB 格式和 AOF 格式的 AOF 文件替换旧的 AOF 文件"],[14,"\n\nNOTE TITLE: [[数据类型]]\n\nMETADATA:{\"created\":\"2025/04/29 21:09:32\",\"modified\":\"2025/04/29 21:09:32\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) ## HyperLogLog\r\n\r\nHyperLogLog 是 Redis 2.8.9 新增的数据类型，是一种用于 **统计基数** 的数据集合类型，基数统计就是指 **一个集合中不重复的元素个数**。但要注意，HyperLogLog 的统计规则是基于概率完成的，不是非常准确，标准误算率为 **0.81%**\r\n\r\n所以，HyperLogLog 提供 **不精确的去重计数**\r\n\r\nHyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的内存空间总是固定且很小的\r\n\r\n在 Redis 中，每个 HyperLogLog 键只需要花费 **12 KB** 内存，就可以计算接近 **2^64** 个不同元素的基数\r\n\r\n### 内部实现\r\n\r\n不清楚\r\n\r\n### 常见命令\r\n\r\n```shell\r\n# 添加指定元素到 HyperLogLog 中\r\nPFADD key element [element...]\r\n# 返回指定 HyperLogLog 的基数估算值\r\nPFCOUNT key [key...]\r\n# 将多个 HyperLogLog 合并为一个 HyperLogLog\r\nPFMERGE destkey sourcekey [sourcekey...]\r\n```\r\n\r\n### 应用场景\r\n\r\n#### 百万级网页 UV 计数\r\n\r\n在统计 UV 时，可以用 PFADD 命令把访问页面的每个用户都添加到 HyperLogLog 中\r\n\r\n```shell\r\nPFADD page1:uv user1 user2 user3 user4 user5\r\n```\r\n\r\n用 PFCOUNT 命令直接获得 page1 的 UV 值\r\n\r\n```shell\r\nPFCOUNT page1:uv\r\n```\r\n\r\n## GEO\r\n\r\nGEO 是 Redis 3.2 版本新增的数据类型，主要用于 **存储地理位置信息**，并对存储的信息进行操作\r\n\r\n### 内部实现\r\n\r\nGEO 直接使用了 [Zset](数据类型#Zset) 作为底层数据结构\r\n\r\nGEO 类型使用 **GeoHash** 编码方法实现了经纬度到 Zset 中元素权重分数的转换，这其中的两个关键机制就是 **对二维地图做区间划分** 和 **对区间进行编码**。一组经纬度落在某个区间后，就用区间的编码值来表示，并把编码值作为 Zset 元素的权重分数\r\n\r\n### 常用命令\r\n\r\n```shell\r\n# 存储指定的地理空间位置，可以将一个或多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的 key 中\r\nGEOADD key longitude latitude member [longitude latitude member ...]\r\n# 从给定的 key 里返回所有指定名称(member)的位置(经度和纬度)，不存在的返回 nil\r\nGEOPOS key member [member...]\r\n# 返回两个给定位置之间的距离\r\nGEODIST key member1 member2 [m|km|ft|mi]\r\n# 根据用户给定的经纬度坐标来获取指定范围内的地理位置集合\r\nGEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]\r\n```\r\n\r\n### 应用场景\r\n\r\n#### 滴滴叫车\r\n\r\n假设车辆 ID 是 33，经纬度位置是 (116.034579, 39.030452)，可以用一个 GEO 集合保存所有车辆的经纬度，集合 key 是 cars:locations\r\n\r\n```shell\r\nGEOADD cars:locations 116.034579 39.030452 33\r\n```\r\n\r\n假设用户所在位置为 (116.054579, 39.030452) ，查找以这个经纬度为中心的 5 公里内的车辆信息\r\n\r\n```shell\r\nGEORADIUS cars:locations 116.054579 39.030452 5 km ASC COUNT 10\r\n```\r\n\r\n## Stream\r\n\r\nStream 是 Redis 5.0 版本新增的数据类型，Redis 专门为消息队列设计的数据类型，不仅支持自动生成全局唯一 ID，而且支持以消费组形式消费数据\r\n\r\n### 常见命令\r\n\r\n1. XADD：插入消息，保证有序，可以自动生成全局唯一 ID\r\n2. XREAD：用于读取消息，可以按 ID 读取数据\r\n3. XREADGROUP：按消费组形式读取消息\r\n4. XPENDING 和 XACK：\r\n\t1. XPENDING：用于查询每个消费组内所有消费者已读取但尚未确认的消息\r\n\t2. XACK：用于向消息队列确认消息处理已完成\r\n\r\n### 应用场景\r\n\r\n#### 消息队列\r\n\r\n生产者通过 XADD 命令插入一条消息\r\n\r\n```shell\r\n# * 表示让 redis 为插入的数据自动生成一个全局唯一 ID\r\n# 王名称为 mymq 的消息队列中插入一条消息，消息的键是 name，值是 xiaolin\r\n> XADD mymq * name xiaolin\r\n\"1654254953808-0\"\r\n```\r\n\r\n消息的全局唯一 ID 由两部分组成\r\n\r\n1. 第一部分 \"1654254953808\" 是数据插入时，以毫秒为单位计算的当前服务器时间\r\n2. 第二部分表示插入消息在当前毫秒内的消息序号，从 0 开始编号\r\n\r\n消费者通过 XREAD 命令从消息队列中读取消息时，可以指定一个消息 ID，并从这个消息 ID 的 **下一条** 消息开始进行读取\r\n\r\n```shell\r\n# 从 ID 号为 1654254953808-0 的消息开始，读取后续的所有消息\r\n> XREAD Stream mymq 1654254953808-0\r\n1) 1) \"mymq\"\r\n   2) 1) 1) \"1654254953808-0\"\r\n         2) 1) \"name\"\r\n            2) \"xiaolin\"\r\n```\r\n\r\n如果想要实现 **阻塞读**，可以调用 XREAD 时设定 block 配置项，实现类似于 BRPOP 的阻塞读取操作。例如，设置了 block 10000 的配置项，10000 的单位是毫秒，表明 XREAD 在读取最新消息时，如果没有消息到来，XREAD 将阻塞 10000 毫秒，然后返回\r\n\r\n```shell\r\n# 命令最后的 $ 符号表示读取最新的消息\r\n> XREAD block 10000 Stream mymq $\r\n(nil)\r\n(10.00s)\r\n```\r\n\r\n##### Stream 独有的功能\r\n\r\n通过使用 XGROUP 创建消费组，创建消费组之后，Stream 可以使用 XREADGROUP 命令让消费组内的消费者读取消息\r\n\r\n创建一个名为 group1 的消费组，这个消费组消费的消息队列是 mymq：\r\n\r\n```shell\r\n# 创建一个名为 group1 的消费组\r\n> XGROUP create mymq group1 0\r\nOK\r\n```\r\n\r\n消费组 group1 内的消费者 consumer1 从 mymq 消息队列中读取所有消息的命令如下：\r\n\r\n```shell\r\n# 命令最后的参数 >，表示从第一条尚未被消费的消息开始读取\r\n> XREADGROUP group group1 consumer1 Stream mymq >\r\n1) 1) \"mymq\"\r\n   2) 1) 1) \"1654254953808-0\"\r\n         2) 1) \"name\"\r\n            2) \"xiaolin\" \r\n```\r\n\r\n消息队列中的消息一旦被消费组里的一个消费者读取了，就不能再被该消费组内的其他消费者读取\r\n\r\n**使用消费组的目的是让组内的多个消费者共同分担读取消息，所以通常会让每个消费者读取部分消息，从而实现消息读取负载在多个消费者间是均匀分布的**\r\n\r\n##### 基于 Stream 实现的消息队列，如何保证消费者在发生故障或宕机重启后，仍然可以读取未处理完的消息？\r\n\r\nStream 会自动使用内部队列（也称为 PENDING List）留存消费组里每个消费者读取的消息，直到消费者使用 XACK 命令通知 Stream 消息已处理完成\r\n\r\n如果消费者没有成功处理消息，它就不会给 Stream 发送 XACK 命令，消息依旧会留存。此时，消费者可以在重启后，用 XPENDING 命令查看已读取、但尚未确认处理完成的消息\r\n\r\n查看 group2 中各个消费者已读取、但尚未确认的消息个数，命令如下：\r\n\r\n```shell\r\n> XPENDING mymq group2\r\n1) (integer) 3  \r\n2) \"1654254953808-0\"  # 表示 group2 中所有消费者读取的消息最小 ID  \r\n3) \"1654256271337-0\"  # 表示 group2 中所有消费者读取的消息最大 ID  \r\n4) 1) 1) \"consumer1\"  \r\n      2) \"1\"  \r\n   2) 1) \"consumer2\"  \r\n      2) \"1\"  \r\n   3) 1) \"consumer3\"  \r\n      2) \"1\"\r\n```\r\n\r\n查看某个消费者具体读取了哪些数据\r\n\r\n```shell\r\n# 查看 group2 里 consumer2 已从 mymq 消息队列中读取了哪些消息\r\n> XPENDING mymq group2 - + 10 consumer2  \r\n1) 1) \"1654256265584-0\"  \r\n   2) \"consumer2\"  \r\n   3) (integer) 410700  \r\n   4) (integer) 1\r\n```\r\n\r\n##### 基于 Stream 消息队列与专业的消息队列有哪些差距\r\n\r\n一个专业的消息队列，必须做到 **消息不丢** 和 **消息可堆积**\r\n\r\n###### Redis Stream 消息会丢失吗？\r\n\r\n1. Redis 生产者会不会丢消息？取决于生产者对于异常情况的处理是否合理，只要处理好返回值和异常，如果返回异常则进行消息重发，那么是不会出现消息丢失的\r\n2. Redis 消费者会不会丢消息？不会，因为 Stream 自动使用内部队列留存消费组里每个消费者已读取、但未被确认的消息。消费者可以在重启后，用 XPENDING 命令查看已读取、但未被确认的消息，等到消费者执行完业务逻辑后，再发送 XACK 命令，能够保证消息不丢失\r\n3. Redis 队列中间件会不会丢消息？会，以下 2 个场景会导致数据丢失\r\n\t1. AOF 持久化配置为每秒写盘，但这个写盘过程是异步的，Redis 宕机时会存在丢失数据的可能\r\n\t2. 主从复制也是异步的，主从切换时，也存在丢失数据的可能\r\n\r\n###### Redis Stream 消息可堆积吗？\r\n\r\nRedis 的数据都存储在内存中，这就意味着一旦发生消息积压，则会导致 Redis 的内存持续增长，如果超过机器内存上限，就会面临被 OOM 的风险。所以 Redis 的 Stream 提供了可以指定队列最大长度的功能，就是为了避免这种情况发生\r\n\r\n但 Kafka、RabbitMQ 专业的消息队列它们的数据都是存储在磁盘上，当消息积压时，无非就是多占用一些磁盘空间\r\n\r\n因此，把 Redis 当作队列来使用时，会面临 2 个问题：\r\n\r\n1. Redis 本身可能会丢数据\r\n2. 面对消息积压，内存资源会紧张\r\n\r\n所以，能不能将 Redis 作为消息队列使用，关键看业务场景：\r\n\r\n1. 如果业务场景足够简单，对于数据丢失不敏感，而且消息积压概率比较小的情况，可以\r\n2. 如果业务有海量信息，消息积压的概率比较大，且不能接受数据丢失，不可以"],[12,"\n\nNOTE TITLE: [[数据类型]]\n\nMETADATA:{\"created\":\"2025/04/29 21:09:32\",\"modified\":\"2025/04/29 21:09:32\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) ## Set\r\n\r\n一个集合最多可以存储 2^32 - 1 个元素\r\n\r\n### 内部实现\r\n\r\nSet 类型的底层数据结构是由 [哈希表](数据结构#哈希表) 或 [整数集合](数据结构#整数集合) 实现的\r\n\r\n1. 如果集合中的元素都是整数且元素个数小于 **512**（默认值，**set-maxinset-entries** 配置），Redis 会使用整数集合作为 Set 类型的底层数据结构\r\n2. 如果集合中的元素不满足上面条件，则 Redis 使用哈希表作为 Set 类型的底层数据结构\r\n\r\n### 常用命令\r\n\r\nSet 常用操作：\r\n\r\n```shell\r\n# 往集合 key 中存入元素，元素存在则忽略，若 key 不存在则新建\r\nSADD key member [merber...]\r\n# 从集合 key 中删除元素\r\nSREM key member [member...]\r\n# 获取集合 key 中所有元素\r\nSMEMBERS key\r\n# 获取集合 key 中的元素个数\r\nSCARD key\r\n# 判断 member 元素是否存在于集合 key 中\r\nSISMEMBER key member\r\n# 从集合 key 中随机选出 count 个元素，元素不从 key 中删除\r\nSRANDMEMBER key [count]\r\n# 从集合 key 中随机选出 count 个元素，元素从 key 中删除\r\nSPOP key [count]\r\n```\r\n\r\nSet 运算操作：\r\n\r\n```shell\r\n# 交集运算\r\nSINTER key [key...]\r\n# 将交集结果存入新集合 destination 中\r\nSINTERSTORE destination key [key...]\r\n# 并集运算\r\nSUNION key [key...]\r\n# 将并集结果存入新集合 destination 中\r\nSUNIONSTORE destination key [key...]\r\n# 差集运算\r\nSDIFF key [key...]\r\n# 将差集结果存入新集合 destination 中\r\nSDIFFSTORE destination key [key...]\r\n```\r\n\r\n### 应用场景\r\n\r\n#### 潜在风险\r\n\r\nSet 的差集、并集和交集的计算复杂度较高，在数据量较大的情况下，如果直接执行这些计算，会导致 Redis 实例阻塞\r\n\r\n#### 点赞\r\n\r\nuid:1、uid:2、uid:3 三个用户分别对 article:1 文章点赞：\r\n\r\n```shell\r\n# uid:1 用户对文章 article:1 点赞\r\n> SADD article:1 uid:1\r\n(integer) 1\r\n# uid:2 用户对文章 article:1 点赞\r\n> SADD article:1 uid:2\r\n(integer) 1\r\n# uid:3 用户对文章 article:1 点赞\r\n> SADD article:1 uid:3\r\n(integer) 1\r\n```\r\n\r\nuid:1 取消了对 article:1 文章点赞：\r\n\r\n```shell\r\n> SREM article:1 uid:1\r\n(integer) 1\r\n```\r\n\r\n获取 article:1 文章所有点赞用户：\r\n\r\n```shell\r\n> SMEMBERS article:1\r\n1) \"uid:3\"\r\n2) \"uid:2\"\r\n```\r\n\r\n获取 article:1 文章的点赞用户数量：\r\n\r\n```shell\r\n> SCARD article:1\r\n(integer) 2\r\n```\r\n\r\n判断用户 uid:1 是否对文章 article:1 点赞了\r\n\r\n```shell\r\n> SISMEMBER article:1 uid:1\r\n(integer) 0\r\n```\r\n\r\n#### 共同关注\r\n\r\nuid:1 用户关注公众号 id 为 5、6、7、8、9，uid:2 用户关注公众号 id 为 7、8、9、10、11\r\n\r\n```shell\r\n# uid:1 用户公众号 id 为 5、6、7、8、9\r\n> SADD uid:1 5 6 7 8 9\r\n(integer) 5\r\n# uid:2 用户关注公众号 id 为 7、8、9、10、11\r\n> SADD uid:2 7 8 9 10 11\r\n(integer) 5\r\n```\r\n\r\nuid:1 和 uid:2 共同关注的公众号：\r\n\r\n```shell\r\n# 获取共同关注\r\n> SINTER uid:1 uid:2\r\n1) \"7\"\r\n2) \"8\"\r\n3) \"9\"\r\n```\r\n\r\n给 uid:2 推荐 uid:1 关注的公众号：\r\n\r\n```shell\r\n> SDIFF uid:1 uid:2\r\n1) \"5\"\r\n2) \"6\"\r\n```\r\n\r\n验证某个公众号是否同时被 uid:1 和 uid:2 关注：\r\n\r\n```shell\r\n> SISMEMBER uid:1 5\r\n(integer) 1\r\n> SISMEMBER uid:2 5\r\n(integer) 0\r\n```\r\n\r\n### 抽奖活动\r\n\r\nkey 为抽奖活动名，value 为员工名称，把所有员工名称放入抽奖箱：\r\n\r\n```shell\r\n> SADD lucky Tom Jerry John Sean Marry Lindy Sary Mark\r\n(integer) 5\r\n```\r\n\r\n如果允许重复中奖，可以使用 **SRANDMEMBER** 命令：\r\n\r\n```shell\r\n# 抽取 1 个一等奖\r\n> SRANDMEMBER lucky 1\r\n1) \"Tom\"\r\n# 抽取 2 个二等奖\r\n> SRANDMEMBER lucky 2\r\n1) \"Mark\"\r\n2) \"Jerry\"\r\n# 抽取 3 个三等奖\r\n> SRANDMEMBER lucky 3\r\n1) \"Sary\"\r\n2) \"Tom\"\r\n3) \"Jerry\"\r\n```\r\n\r\n如果不允许重复中奖，可以使用 **SPOP** 命令：\r\n\r\n```shell\r\n# 抽取 1 个一等奖\r\n> SPOP lucky 1\r\n1) \"Sary\"\r\n# 抽取 2 个二等奖\r\n> SPOP lucky 2\r\n1) \"Jerry\"\r\n2) \"Mark\"\r\n# 抽取 3 个三等奖\r\n> SPOP lucky 3\r\n1) \"John\"\r\n2) \"Sean\"\r\n3) \"Lindy\"\r\n```"],[13,"\n\nNOTE TITLE: [[数据类型]]\n\nMETADATA:{\"created\":\"2025/04/29 21:09:32\",\"modified\":\"2025/04/29 21:09:32\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) ## Zset\r\n\r\n### 内部实现\r\n\r\nZset 类型的底层数据结构是由 [压缩列表](数据结构#压缩列表) 或 [跳表](数据结构#跳表) 实现的\r\n\r\n1. 如果有序集合的元素个数小于 **128** 个，并且每个元素的值小于 **64** 字节时，Redis 会使用压缩列表作为 Zset 类型的底层数据结构\r\n2. 如果有序集合的元素不满足上面的条件，Redis 会使用跳表作为 Zset 类型的底层数据结构\r\n\r\n在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 [listpack](数据结构#listpack) 实现\r\n\r\n### 常用命令\r\n\r\nZset 常用操作：\r\n\r\n```shell\r\n# 往有序集合 key 中加入带分值元素\r\nZADD key score member [[score member]...]\r\n# 往有序集合 key 中删除元素\r\nZREM key member [member...]\r\n# 返回有序集合 key 中元素 member 的分值\r\nZSCORE key member\r\n# 返回有序集合 key 中元素个数\r\nZCARD key\r\n# 为有序集合 key 中元素 member 的分值加上 increment\r\nZINCRBY key increment member\r\n# 正序获取有序集合 key 从 start 下标到 stop 下标的元素\r\nZRANGE key start stop [WITHSCORES]\r\n# 倒叙获取有序集合 key 从 start 下标到 stop 下标的元素\r\nZREVRANGE key start stop [WITHSCORES]\r\n# 返回有序集合中指定分数区间内的成员，分数由低到高排序\r\nZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]\r\n# 返回指定成员区间内的成员，按字典正序排列，分数必须相同\r\nZRANGEBYLEX key min max [LIMIT offset count]\r\n# 返回指定成员区间内的成员，按字典倒序排列，分数必须相同\r\nZREVRANGEBYLEX key max min [LIMIT offset count]\r\n```\r\n\r\nZset 运算操作（相比起 Set 类型，Zset 类型没有支持 **差集运算**）：\r\n\r\n```shell\r\n# 并集计算（相同分数分值相加），numberkeys 一共多少个 key，WEIGHTS 每个 key 对应的分值乘积\r\nZUNIONSTORE destkey numberkeys key [key...]\r\n# 交集计算（相同元素分值相加），numberkeys 一共多少个 key，WEIGHTS 每个 key 对应的分值乘积\r\nZINTERSTORE destkey numberkeys key [key...]\r\n```\r\n\r\n### 应用场景\r\n\r\n#### 排行榜\r\n\r\n以博文点赞排名为例，发布了五篇博文，分别获得赞为 200、40、100、50、150\r\n\r\n```shell\r\n# article:1 获得 200 赞\r\n> ZADD user:xiaolin:ranking 200 article:1\r\n(integer) 1\r\n# article:2 获得 40 赞\r\n> ZADD user:xiaolin:ranking 40 article:2\r\n(integer) 1\r\n# article:3 获得 100 赞\r\n> ZADD user:xiaolin:ranking 100 article:3\r\n(integer) 1\r\n# article:4 获得 50 赞\r\n> ZADD user:xiaolin:ranking 50 article:4\r\n(integer) 1\r\n# article:5 获得 150 赞\r\n> ZADD user:xiaolin:ranking 150 article:5\r\n(integer) 1\r\n```\r\n\r\narticle:4 新增一个赞，可以使用 **ZINCRBY** 命令（为有序集合 key 中元素 member 的分值加上 increment）：\r\n\r\n```shell\r\n> ZINCRBY user:xiaolin:ranking 1 article:4\r\n\"51\"\r\n```\r\n\r\n查看某篇文章的赞数，可以使用 **ZSCORE** 命令（返回有序集合 key 中元素个数）：\r\n\r\n```shell\r\n> ZSCORE user:xiaolin:ranking article:4\r\n\"50\"\r\n```\r\n\r\n获取赞数最多的 3 篇文章，可以使用 **ZREVRANGE** 命令（倒序获取有序集合 key 从 start 下标到 stop 下标到元素）：\r\n\r\n```shell\r\n# WITHSCORES 表示把 score 也显示出来\r\n> ZREVRANGE user:xiaolin:ranking 0 2 WITHSCORES\r\n1) \"article:1\"\r\n2) \"200\"\r\n3) \"article:5\"\r\n4) \"150\"\r\n5) \"article:3\"\r\n6) \"100\"\r\n```\r\n\r\n获取 100 赞到 200 赞到文章，可以使用 **ZRANGEBYSCORE** 命令（返回有序集合中指定分数区间内的成员，分数由低到高排序）：\r\n\r\n```shell\r\n> ZRANGEBYSCORE user:xiaolin:ranking 100 200 WITHSCORES\r\n1) \"article:3\"\r\n2) \"100\"\r\n3) \"article:5\"\r\n4) \"150\"\r\n5) \"article:1\"\r\n6) \"200\"\r\n```\r\n\r\n#### 电话、姓名排序\r\n\r\n**注意：不要在分数不一致的 Zset 集合中使用 ZRANGEBYLEX 和 ZREVRANGEBYLEX 指令，因为获取的结果会不准确**\r\n\r\n##### 电话排序\r\n\r\n可以将电话好吗存储到 Zset 中，然后根据需要来获取号段：\r\n\r\n```shell\r\n> ZADD phone 0 13100111100 0 13110114300 0 13132110901\r\n(integer) 3\r\n> ZADD phone 0 13200111100 0 13210414300 0 13252110901   \r\n(integer) 3  \r\n> ZADD phone 0 13300111100 0 13310414300 0 13352110901   \r\n(integer) 3\r\n```\r\n\r\n获取所有号码：\r\n\r\n```shell\r\n> ZRANGEBYLEX phone - +  \r\n1) \"13100111100\"  \r\n2) \"13110114300\"  \r\n3) \"13132110901\"  \r\n4) \"13200111100\"  \r\n5) \"13210414300\"  \r\n6) \"13252110901\"  \r\n7) \"13300111100\"  \r\n8) \"13310414300\"  \r\n9) \"13352110901\"\r\n```\r\n\r\n获取 132 号段的号码：\r\n\r\n```shell\r\n> ZRANGEBYLEX phone [132 (133\r\n1) \"13200111100\"\r\n2) \"13210414300\"\r\n3) \"13252110901\"\r\n```\r\n\r\n获取 132、133 号段的号码：\r\n\r\n```shell\r\n> ZRANGEBYLEX phone [132 (134\r\n1) \"13200111100\"\r\n2) \"13210414300\"\r\n3) \"13252110901\"\r\n4) \"13300111100\"\r\n5) \"13310414300\"\r\n6) \"13352110901\"\r\n```\r\n\r\n##### 姓名排序\r\n\r\n```shell\r\n> ZADD names 0 Toumas 0 Jake 0 Bluetuo 0 Gaodeng 0 Aimini 0 Aidehua\r\n(integer) 6\r\n```\r\n\r\n获取所有人的名字：\r\n\r\n```shell\r\n> ZRANGEBYLEX names - +\r\n1) \"Aidehua\"\r\n2) \"Aimini\"\r\n3) \"Bluetuo\"\r\n4) \"Gaodeng\"\r\n5) \"Jake\"\r\n6) \"Toumas\"\r\n```\r\n\r\n获取名字中大写字母 A 开头的所有人：\r\n\r\n```shell\r\n> ZRANGEBYLEX names [A (B\r\n1) \"Aidehua\"\r\n2) \"Aimini\"\r\n```\r\n\r\n获取名字中大写字母 C 到 Z 开头的所有人：\r\n\r\n```shell\r\n> ZRANGEBYLEX names [C [Z\r\n1) \"Gaodeng\"\r\n2) \"Jake\"\r\n3) \"Toumas\"\r\n```\r\n\r\n## BitMap\r\n\r\n位图，特别适合一些数据量大且使用 **二值统计** 的场景\r\n\r\n### 内部实现\r\n\r\nbitmap 本身使用 [string](数据类型#string) 数据类型作为底层数据结构实现的一种统计二值状态的数据类型\r\n\r\n### 常用命令\r\n\r\nbitmap 基本操作：\r\n\r\n```shell\r\n# 设置值，其中 value 只能是 0 和 1\r\nSETBIT key offset value\r\n# 获取值\r\nGETBIT key offset\r\n# 获取指定范围内值为 1 的个数\r\n# start 和 end 以字节为单位\r\nBITCOUNT key start end\r\n```\r\n\r\nbitmap 运算操作：\r\n\r\n```shell\r\n# bitmap 间的运算\r\n# operations 按位运算符，枚举值\r\n#   AND 与运算 &\r\n#   OR 或运算 ｜\r\n#   XOR 异或 ^\r\n#   NOT 取反 ~\r\n# result 计算的结果，会存储在该 key 中\r\n# key1 ... keyn 参与运算的 key，可以有多个，空格分割，not 运算只能有一个 key\r\nBITOP [operations] [result] [key1] [keyn...]\r\n\r\n# 返回指定 key 中第一次出现指定 value(0/1) 的位置\r\nBITPOS [key] [value]\r\n```\r\n\r\n### 应用场景\r\n\r\n#### 签到统计\r\n\r\n假设要统计 ID 100 的用户在 2022 年 6 月份的签到情况，可以按照下面的步骤进行操作\r\n\r\n第一步，执行下面的命令，记录该用户 6 月 3 号已签到\r\n\r\n```shell\r\nSETBIT uid:sign:100:202206 2 1\r\n```\r\n\r\n第二步，检查该用户 6 月 3 日是否签到\r\n\r\n```shell\r\nGETBIT uid:sign:100:202206 2\r\n```\r\n\r\n第三步，统计该用户在 6 月份的签到次数\r\n\r\n```shell\r\nBITCOUNT uid:sign:100:202206\r\n```\r\n\r\n统计该用户在 6 月份首次打卡时间\r\n\r\n```shell\r\nBITPOS uid:sign:100:202206 1 # 需要将返回值 + 1\r\n```\r\n\r\n#### 判断用户登陆态\r\n\r\n假设要判断 ID 10086 用户的登录情况\r\n\r\n第一步，执行以下命令，表示用户已登录\r\n\r\n```shell\r\nSETBIT login_status 10086 1\r\n```\r\n\r\n第二步，检查该用户是否登录，返回值 1 表示已登录\r\n\r\n```shell\r\nGETBIT login_status 10086\r\n```\r\n\r\n第三步，登出，将 offset 对应的 value 置为 0\r\n\r\n```shell\r\nSETBIT login_status 10086 0\r\n```\r\n\r\n#### 连续签到用户总数\r\n\r\n把每天的日期作为 bitmap 的key，userId 作为 offset，若是打卡则将 offset 位置的 bit 置为 1\r\n\r\n对这 n 个 bitmap 做按位与运算，当一个 userId 在结果中为 1 时，则证明该用户连续 n 天签到\r\n\r\n对结果进行 BITCOUNT 操作，便得到了连续签到 n 天的用户总数\r\n\r\n```shell\r\n# 与操作\r\nBITOP AND destmap bitmap:01 bitmap:02 bitmap:03\r\n# 统计 bit 位 = 1 的个数\r\nBITCOUNT destmap\r\n```"],[11,"\n\nNOTE TITLE: [[数据类型]]\n\nMETADATA:{\"created\":\"2025/04/29 21:09:32\",\"modified\":\"2025/04/29 21:09:32\"}\n\nNOTE BLOCK CONTENT:\n\n## string\r\n\r\n底层实现为 int 和 [SDS](数据结构#SDS)，value 最多可以容纳的数据长度是 **512M**\r\n\r\n字符串对象的内部编码有 3 种：\r\n\r\n1. int 对应 int 数据结构\r\n2. raw 对应 SDS 数据结构\r\n3. embstr 对应 SDS 数据结构\r\n\r\n### 常用指令\r\n\r\n普通字符串的基本操作：\r\n\r\n```shell\r\n# 设置 key-value 类型的值\r\n> SET name lin\r\nOK\r\n# 根据 key 获得对应的 value\r\n> GET name\r\n\"lin\"\r\n# 判断某个 key 是否存在\r\n> EXISTS name\r\n(integer) 1\r\n# 返回 key 所储存的字符串值的长度\r\n> STRLEN name\r\n(integer) 3\r\n# 删除某个 key 对应的值\r\n> DEL name\r\n(integer) 1\r\n```\r\n\r\n批量设置：\r\n\r\n```shell\r\n# 批量设置 key-value 类型的值\r\n> MSET key1 value1 key2 value2\r\nOK\r\n# 批量获取多个 key 对应的 value\r\n> MGET key1 key2\r\n1) \"value1\"\r\n2) \"value2\"\r\n```\r\n\r\n计数器（字符串的值为整数的时候可用）：\r\n\r\n```shell\r\n# 设置 key-value 类型的值\r\n> SET number 0\r\nOK\r\n# 将 key 中储存的数字值自增 1\r\n> INCR number\r\n(integer) 1\r\n# 将 key 中存储的数字值加 10\r\n> INCRBY number 10\r\n(integer) 11\r\n# 将 key 中存储的数字值自减 1\r\n> DECR number\r\n(integer) 10\r\n# 将 key 中存储的数字值减 10\r\n> DECRBY number 10\r\n(integer) 0\r\n```\r\n\r\n过期（默认为永不过期）：\r\n\r\n```shell\r\n# 设置 key 在 60 秒后过期（该方法是针对已经存在的 key 设置过期时间）\r\n> EXPIRE name 60\r\n(integer) 1\r\n# 查看数据还有多久过期\r\n> TTL name\r\n(integer) 51\r\n# 设置 key-value 类型的值，并设置该 key 的过期时间为 60 秒\r\n> SET key value EX 60\r\nOK\r\n> SETEX key 60 value\r\nOK\r\n```\r\n\r\n不存在就插入：\r\n\r\n```shell\r\n# 不存在就插入（not exists）\r\n> SETNX key value\r\n(integer) 1\r\n```\r\n\r\n### 应用场景\r\n\r\n#### 缓存对象\r\n\r\n1. 直接缓存整个对象的 JSON，命令例子：\r\n```shell\r\nSET user:1 '{\"name\":\"xiaolin\",\"age\":18}'\r\n```\r\n2. 采用将 key 进行分离为 user:ID:属性，采用 MSET 存储，用 MGET 获取各属性值，命令例子：\r\n```shell\r\nMSET user:1:name xiaolin user:1:age 18 user:2:name xiaomei user:2:age 20\r\n```\r\n\r\n#### 常规计数\r\n\r\n因为 Redis 处理命令是单线程，所以执行命令的过程是原子性的。因此 string 数据类型很适合计数场景，比如计算访问次数、点赞、转发、库存数量等等\r\n\r\n比如计算文章的阅读量：\r\n\r\n```shell\r\n# 初始化文章的阅读量\r\n> SET article:readcount:1001 0\r\nOK\r\n# 阅读量 + 1\r\n> INCR article:readcount:1001\r\n(integer) 1\r\n# 阅读量 + 1\r\n> INCR article:readcount:1001\r\n(integer) 2\r\n# 阅读量 + 1\r\n> INCR article:readcount:1001\r\n(integer) 3\r\n# 获取对应文章的阅读量\r\n> GET article:readcount:1001\r\n\"3\"\r\n```\r\n\r\n#### 分布式锁\r\n\r\nSET 命令有个 NX 参数可以实现 key 不存在才插入，可以用它来实现分布式锁\r\n\r\n1. 如果 key 不存在，则显示插入成功，可以用来表示加锁成功\r\n2. 如果 key 存在，则会显示插入失败，可以用来表示加锁失败\r\n\r\n一般而言，还会对分布式锁加上过期时间，分布式锁的命令如下：\r\n\r\n```shell\r\nSET lock_key unique_value NX PX 10000\r\n```\r\n\r\n1. lock_key 就是 key 键\r\n2. unique_value 是客户端生成的唯一标识\r\n3. NX 代表只在 lock_key 不存在时，才对 lock_key 进行设置操作\r\n4. PX 10000 表示设置 lock_key 的过期时间为 10s，这是为了避免客户端发生异常而无法释放锁\r\n\r\n而解锁的过程就是将 lock_key 键删除，但 **不能乱删**，要保证执行操作的客户端就是加锁的客户端。所以，解锁的时候，要先判断锁的 unique_value 是否为是否为加锁客户端，是的话才将 lock_key 键删除\r\n\r\n需要使用 Lua 脚本来保证解锁的原子性\r\n\r\n```lua\r\n// 释放锁时，先比较 unique_value 是否相等，避免锁的误释放\r\nif redis.call(\"get\", KEYS[1]) == ARGV[1] then\r\n\treturn redis.call(\"del\", KEYS[1])\r\nelse\r\n\treturn 0\r\nend\r\n```\r\n\r\n## List\r\n\r\n列表的最大长度为 2^32 -1，即每个列表支持超过 40 亿个元素\r\n\r\n底层实现为 [双向链表](数据结构#双向链表) 或 [压缩列表](数据结构#压缩列表) \r\n\r\n1. 如果列表的元素个数小于 **512** 个（默认值，可由 **list-max-ziplist-entries** 配置），列表每个元素的值都小于 **64** 字节（默认值，可由 **list-max-ziplist-value** 配置），Redis 会使用 **压缩列表** 作为 List 类型的底层数据结构\r\n2. 如果列表的元素不满足上面的条件，redis 会使用 **双向链表** 作为 List 类型的底层数据结构\r\n\r\n但在 redis 3.2 版本之后，List 数据类型底层数据结构就只有 quicklist 实现了，替代了双向链表和压缩列表\r\n\r\n### 常用命令\r\n\r\n```shell\r\n# 将一个或多个值 value 插入到 key 列表的表头（最左边），最后的值在最前面\r\n> LPUSH key value [value ...]\r\n# 将一个或多个值 value 插入到 key 列表的表尾（最右边）\r\n> RPUSH key value [value ...]\r\n# 移除并返回 key 列表的头元素\r\n> LPOP key\r\n# 移除并返回 key 列表的尾元素\r\n> RPOP key\r\n# 返回列表 key 中指定区间内的元素，区间以偏移量 start 和 stop 指定，从 0 开始\r\n> LRANGE key start stop\r\n# 从 key 列表表头弹出一个元素，没有就阻塞 timeout 秒，如果 timeout=0 则一直阻塞\r\n> BLPOP key [key ...] timeout\r\n# 从 key 列表表尾弹出一个元素，没有就阻塞 timeout 秒，如果 timeout=0 则一直阻塞\r\n> BRPOP key [key ...] timeout\r\n```\r\n\r\n### 应用场景\r\n\r\n#### 消息队列\r\n\r\n消息队列在存取消息时，必须要满足三个需求，分别是 **消息保序**、**处理重复的消息** 和 **保证消息可靠性**\r\n\r\nRedis 的 List 和 [Stream](#Stream) 两种数据类型，可以满足消息队列的这三个需求\r\n\r\n1. 如何满足消息保序\r\n\t使用 LPUSH + RPOP（或者 RPUSH + LPOP）命令实现消息队列。但是存在一个潜在的性能风险点——生产者往 List 中写入数据时，LIst 并不会主动通知消费者有新消息，如果需要消费者想要及时处理消息，就需要消费者不停地调用 RPOP 命令。如果有新消息写入，RPOP 命令就会返回结果，否则，RPOP 命令就会返回空值，再继续循环\r\n\r\n\t为了解决这个问题，Redis 提供了 BRPOP 命令——阻塞式读取，客户端在没有读到队列数据时，自动阻塞，直到有新的数据写入队列，再开始读取新数据\r\n2. 如何处理重复的消息\r\n\t消费者要实现重复消息的判断，有两方面的要求：\r\n\t1. 每个消息都有一个全局的 ID\r\n\t2. 消费者要记录已经处理过的消息的 ID，当收到一条消息后，消费者程序就可以对比收到的消息 ID 和记录的已处理过的消息 ID，来判断当前收到的消息有没有经过处理\r\n\t但是 List 并不会为每个消息生成 ID 号，所以需要自行为每个消息生成一个全局唯一 ID，生成之后，在用 LPUSH 命令把消息插入 List 时，需要在消息中包含这个全局唯一 ID\r\n\t```shell\r\n\t# 将全局 ID 为 111000102、库存量为 99 的消息插入消息队列\r\n\t> LPUSH mq \"111000102:stock:99\"\r\n\t(integer) 1\r\n\t```\r\n3. 如何保证消息可靠性\r\n\t当消费者从 List 中读取一条消息后，List 就不会再留存这条消息了，如果消费者在处理过程中出现了故障或宕机，就会导致消息没有处理完成，消息者重启后就无法再次从 List 中读取消息了\r\n\r\n\t为了留存消息，List 类型提供了  **BRPOPLPUSH** 命令，让消费者从给一个 List 中读取消息，同时，Redis 会把这个消息再插入另一个 List 留存\r\n\r\n但是，在用 List 做消息队列时，如果生产者消息发送很快，而消费者处理消息比较慢，就会导致 List 中的消息越积越多，给 Redis 的内存带来很大压力。需要启动多个消费者程序组成一个消费组，但是 List 类型不支持消费组的实现\r\n\r\n## Hash\r\n\r\n### 内部实现\r\n\r\nHash 类型的底层数据结构是由 [压缩列表](数据结构#压缩列表) 或 [哈希表](数据结构#哈希表) 实现的\r\n\r\n1. 如果哈希类型元素个数小于 **512** 个（默认值，可由 **hash-max-ziplist-entries** 配置），所有值小于 **64** 字节（默认值，可由 **hash-max-ziplist-value** 配置）的话，Redis 会使用压缩列表做为 Hash 类型的底层数据结构\r\n2. 如果哈希类型元素不满足以上条件，Redis 会使用哈希表作为 Hash 类型的底层数据结构\r\n\r\n在 Redis 7.0 中，压缩列表数据接哦股已经废弃了，交由 [listpack](数据结构#listpack) 数据结构来实现\r\n\r\n### 常用命令\r\n\r\n```shell\r\n# 存储一个哈希表 key 的键值\r\nHSET key field value\r\n# 获取哈希表 key 对应 field 键值\r\nHGET key field\r\n# 在一个哈希表 key 中存储多个键值对\r\nHMSET key field value [field value...]\r\n# 批量获取哈希表 key 中多个 field 键值\r\nHMGET key field [field...]\r\n# 删除哈希表 key 中的 field 键值\r\nHDEL key field [field...]\r\n# 返回哈希表 key 中 field 的数量\r\nHLEN key\r\n# 返回哈希表 key 中所有的键值\r\nHGETALL key\r\n# 为哈希表 key 中 field 键的值加上增量 n\r\nHINCRBY key field n\r\n```\r\n\r\n### 应用场景\r\n\r\n#### 缓存对象\r\n\r\n```shell\r\n# 存储一个哈希表 uid:1 的键值\r\n> HSET uid:1 name Tom age 15\r\n2\r\n# 存储一个哈希表 uid:2 的键值\r\n> HSET uid:2 name Jerry age 13\r\n2\r\n# 获取哈希表用户 id 为 1 中所有的键值\r\n> HGETALL uid:1\r\n1) \"name\"\r\n2) \"Tom\"\r\n3) \"age\"\r\n4) \"15\"\r\n```\r\n\r\n#### 购物车\r\n\r\n涉及的命令如下：\r\n\r\n1. 添加商品：HSET cart:{用户id} {商品id} 1\r\n2. 添加数量：HINCRBY cart:{用户id} {商品id} 1\r\n3. 商品总数：HLEN cart:{用户id}\r\n4. 删除商品：HDEL cart:{用户id} {商品id}\r\n5. 获取购物车所有商品：HGETALL cart:{用户id}"],[10,"\n\nNOTE TITLE: [[数据结构]]\n\nMETADATA:{\"created\":\"2025/04/29 21:09:32\",\"modified\":\"2025/04/29 21:09:32\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) ## quicklist\r\n\r\nquicklist 其实就是双向链表 + 压缩列表的组合，因为 quicklist 就是一个链表，而链表的每个元素又是一个压缩列表。quicklist 通过控制每个链表节点中的压缩列表的大小或者元素个数，来规避连锁更新的问题。因为压缩列表元素越少或越小，连锁更新带来的影响就越小，从而提供了更好的访问性能\r\n\r\n### quicklist 结构设计\r\n\r\n```C\r\ntypedef struct quicklist {\r\n\t// quicklist 的链表头\r\n\tquicklistNode *head;\r\n\t// quicklist 的链表尾\r\n\tquicklistNode *tail;\r\n\t// 所有压缩列表中的总元素个数\r\n\tunsigned long count;\r\n\t// quicklistNode 的个数\r\n\tunsigned long len;\r\n}\r\n```\r\n\r\n```C\r\ntypedef struct quicklistNode {\r\n\t// 前一个 quicklistNode\r\n\tstruct quicklistNode *prev;\r\n\t// 后一个 quicklistNode\r\n\tstruct quicklistNode *next;\r\n\t// quicklistNode 指向的压缩列表\r\n\tunsigned char *z1;\r\n\t// 压缩列表的字节大小\r\n\tunsigned int sz;\r\n\t// 压缩列表的元素个数\r\n\tunsigned int count : 16;\r\n} quicklistNode;\r\n```\r\n\r\n在向 quicklist 添加一个元素的时候，不会像普通的链表那样，直接新建一个链表节点。而是会检查插入位置的压缩列表是否能容纳该元素，如果能容纳就直接保存到 quicklistNode 结构里的压缩列表，如果不能容纳，才会新建一个新的 quicklistNode 结构\r\n\r\nquicklist 会控制 quicklistNode 结构里的压缩列表的大小或元素个数，来规避潜在的连锁更新的风险，但是这并没有完全解决连锁更新的问题\r\n\r\n## listpack\r\n\r\n### listpack 结构设计\r\n\r\n[img listpack 结构](../images/listpack结构.webp)\r\n\r\n[img listpackNode 结构](../images/listpackNode结构.webp)\r\n\r\n1. **encoding**：定义该元素的编码类型，会对不同长度的整数和字符串进行编码\r\n2. **data**：实际存放的数据\r\n3. **len**：encoding + data 的总长度"],[9,"\n\nNOTE TITLE: [[数据结构]]\n\nMETADATA:{\"created\":\"2025/04/29 21:09:32\",\"modified\":\"2025/04/29 21:09:32\"}\n\nNOTE BLOCK CONTENT:\n\n## Redis 为什么快\r\n\r\n除了它是内存数据库，所有操作都在内存中进行，还有一个重要因素，它实现的数据结构使得在操作时，Redis 能够高效地处理\r\n\r\n## 数据结构与数据类型之分\r\n\r\n### 数据类型\r\n\r\n1. [string](数据类型#string)\r\n2. [list](数据类型#list)\r\n3. [hash](数据类型#hash)\r\n4. [set](数据类型#set)\r\n5. [zset](数据类型#zset)\r\n\r\n### 数据结构\r\n\r\n1. [SDS](#SDS)\r\n2. [双向链表](#双向链表)\r\n3. [压缩列表](#压缩列表)\r\n4. [哈希表](#哈希表)\r\n5. [整数集合](#整数集合)\r\n6. [跳表](#跳表)\r\n7. [quicklist](#quicklist)\r\n8. [listpack](#listpack)\r\n\r\n[img 数据结构与数据类型的对应关系](../images/数据结构与数据类型的对应关系.webp)\r\n\r\n## SDS\r\n\r\n### C 语言字符串的缺陷\r\n\r\n1. 获取字符串长度的时间复杂度为 O(N)\r\n2. 字符串的结尾以 \"\\0\" 字符标识，而且字符必须符合某种编码（比如 ASCII），只能保存文本数据，不能保存二进制数据\r\n3. 字符串操作函数不高效且不安全，比如可能会发生缓冲区溢出，从而造成程序运行终止\r\n\r\n### Redis 5.0 的 SDS 数据结构\r\n\r\n1. len，SDS 所保存的字符串长度，时间复杂度 O(1)\r\n2. alloc，分配给字符数组的空间长度，在修改字符串时，可以通过 alloc - len 计算出剩余的空间大小，判断空间是否满足修改需求，不满足则会自动将 SDS 的空间扩展至执行修改所需的大小，然后才执行实际的修改操作\r\n3. flags，SDS 类型，用于表示不同类型的 SDS\r\n\t1. sdshdr5\r\n\t2. sdshdr8\r\n\t3. sdshdr16\r\n\t4. sdshdr32\r\n\t5. sdshdr64\r\n4. buf[]，字节数组，用于保存实际数据，不需要用 \"\\0\" 字符标识字符串结尾，可以用来保存图片等二进制数据\r\n\r\n### SDS 优点\r\n\r\n1. O(1) 复杂度获取字符串长度\r\n2. 二进制安全\r\n3. 不会发生缓冲区溢出\r\n4. 节省内存空间\r\n\t1. 不同的 sdshdr 结构体适应各种大小\r\n\t2. 声明了 \\_\\_attribute\\_\\_ ((packed)) 取消编译器在编译过程中的字节对齐优化\r\n\r\n## 双向链表\r\n\r\n### 链表节点结构设计\r\n\r\n```C\r\ntypedef struct listNode {\r\n\t// 前置节点\r\n\tstruct listNode *prev;\r\n\t// 后置节点\r\n\tstruct listNode *next;\r\n\t// 节点的值\r\n\tvoid *value;\r\n} listNode;\r\n```\r\n\r\n### 链表结构设计\r\n\r\n```C\r\ntypedef struct list {\r\n\t// 链表头节点\r\n\tlistNode *head;\r\n\t// 链表尾节点\r\n\tlistNode *tail;\r\n\t// 节点值复制函数\r\n\tvoid *(*dup)(void *ptr);\r\n\t// 节点值释放函数\r\n\tvoid *(*free)(void *ptr);\r\n\t// 节点值比较函数\r\n\tint (*match)(void *ptr, void *key);\r\n\t// 链表节点数量\r\n\tunsigned long len;\r\n} list;\r\n```\r\n\r\n### Redis 链表的优点\r\n\r\n1. listNode 链表节点带有 prev 和 next 指针，获取某个节点的前置节点或后置节点的时间复杂度仅为 O(1)，而且这两个指针都可以为 NULL，所以是无环链表\r\n2. list 结构因为提供了表头指针 head 和表尾指针 tail，所以获取链表的表头节点和表尾节点的时间复杂度仅为 O(1)\r\n3. list 结构因为提供了链表节点数量 len，所以获取链表的节点数量的时间复杂度仅为 O(1)\r\n4. listNode 链表节点使用 void* 指针保存节点值，并且可以通过 list 结构的 dup、free、match 函数指针为节点设置该节点类型特定的函数，因此链表节点可以保存各种不同类型的值\r\n\r\nredis 的 **list 数据类型** 在数据量比较少的情况下，会采用 **压缩列表** 作为底层数据结构的实现，数据量上升后才使用 **双向链表**\r\n\r\n## 压缩列表\r\n\r\n压缩列表是 Redis 数据类型为 list 和 hash 的底层实现之一\r\n\r\n1. 当一个列表键 (list) 只包含少量的列表项，且每个列表项都是小整数值，或者长度比较短的字符串，那么 Redis 就会使用压缩列表作为列表键 (list) 的底层实现\r\n2. 当一个哈希键 (hash) 只包含少量键值对，并且每个键值对的键和值都是小整数值，或者长度比较短的字符串，那么 Redis 就会使用压缩列表作为哈希键 (hash) 的底层实现\r\n\r\n### 压缩列表结构设计\r\n\r\n[img 压缩列表结构](../images/压缩列表结构.webp)\r\n\r\n1. **zlbytes**：记录整个压缩列表占用内存字节数\r\n2. **zltail**：记录压缩列表 **尾部** 节点距离起始地址多少字节，也就是列表尾的偏移量\r\n3. **zllen**：记录压缩列表包含的节点数量\r\n4. **zlend**：标记压缩列表的结束点，特殊值 **0XFF**\r\n\r\n#### 压缩列表 entry 结构\r\n\r\n[img 压缩列表 entry 结构](../images/压缩列表entry结构.webp)\r\n\r\n1. **prevlen**：记录了前一个节点的长度\r\n2. **encoding**：记录了当前节点实际数据的类型以及长度\r\n3. **data**：记录了当前节点的实际数据\r\n\r\n### 连锁更新\r\n\r\n压缩列表除了查找复杂度高的问题，压缩列表在插入元素时，如果内存空间不够，压缩列表还需要重新分配一块连续的内存空间，这可能会引发 **连锁更新** 的问题\r\n\r\n压缩列表的每个节点中的 prevlen 属性都记录了前一个节点的长度，而且 prevlen 属性的空间大小跟前一个节点的长度值有关，比如：\r\n\r\n1. 如果前一个节点的长度小于 **254** 字节，那么 prevlen 属性需要用 **1** 字节的空间来保存这个长度值\r\n2. 如果前一个节点的长度大于等于 **254** 字节，那么 prevlen 属性需要用 **5** 字节的空间来保存这个长度值\r\n\r\n因此，压缩列表只会用于保存节点数量不多的场景，只要节点数量足够小，即使发生连锁更新，也是能接受的\r\n\r\n## 哈希表\r\n\r\n为了解决 **哈希冲突**，Redis 采用了 **链式哈希**\r\n\r\n### 链式哈希\r\n\r\n链式哈希的实现方式是每个哈希表节点都有一个 next 指针，多个哈希表节点可以用 next 指针构成一个单向链表，被分配到同一个哈希桶的多个节点可以用这个单向链表连接起来\r\n\r\n### rehash\r\n\r\nRedis 会使用两个全局哈希表进行 rehash\r\n\r\n在正常服务请求阶段，插入的数据都会写入到 **哈希表 1**，此时的 **哈希表 2** 并没有被分配空间\r\n\r\n随着数据逐步增多，触发了 rehash 操作，过程共三步：\r\n\r\n1. 给 **哈希表 2** 分配空间，一般会比 **哈希表 1** 大 2 倍\r\n2. 将 **哈希表 1** 的数据迁移到 **哈希表 2** 中\r\n3. 迁移完成后，**哈希表 1** 的空间会释放，并将 **哈希表 2** 设置为 **哈希表 1**，然后在 **哈希表 2** 新建一个空白的哈希表，为下次 rehash 做准备\r\n\r\n但是如果 **哈希表 1** 的数据量非常大，那么在迁移至 **哈希表 2** 的时候，会涉及大量的数据拷贝，此时可能会对 redis 造成阻塞，无法服务其他请求\r\n\r\n### 渐进式 rehash\r\n\r\n#### 步骤\r\n\r\n1. 给 **哈希表 2** 分配空间\r\n2. 在 rehash 进行期间，每次哈希表元素进行增删改查时，redis 除了会执行对应的操作之外，还会顺序将 **哈希表 1** 中索引位置上的所有 key-value 迁移到 **哈希表 2** 上\r\n3. 随着处理客户端发起的哈希表操作请求数量增多，最终会把 **哈希表 1** 的所有 key-value 迁移到 **哈希表 2**，从而完成 rehash 操作\r\n\r\n所以在渐进式 rehash 进行期间，哈希表元素的增删改查都会在这个两个哈希表进行\r\n\r\n1. 查找一个 key 的值时，先会在哈希表 1 里查找，如果没找到，就会继续在哈希表 2 里查找\r\n2. 新增一个 key-value 时，会被保存到哈希表 2 里，而哈希表 1 则不再进行任何添加操作，这样保证了哈希表 1 的 key-value 数量只会减少，随着 rehash 操作的完成，最终哈希表 1 会变成空表\r\n\r\n### rehash 触发条件\r\n\r\nrehash 的触发条件跟 **负载因子(load factor)** 有关，负载因子计算公式如下：\r\n\r\n```\r\n负载因子 = 哈希表已保存节点数量 / 哈希表大小\r\n```\r\n\r\n1. 当负载因子大于等于 1，并且 Redis 没有在执行 bgsave 命令或者 bgrewriteaof 命令，也就是没有执行 RDB 快照或 AOF 重写的时候，就会进行 rehash 操作\r\n2. 当负载因子大于等于 5，此时说明哈希冲突非常严重了，不管有没有在执行 RDB 快照或者 AOF 重写，都会强制进行 rehash 操作\r\n\r\n## 整数集合\r\n\r\n### 整数集合结构设计\r\n\r\n```C\r\ntypedef struct intset {\r\n\t// 编码方式\r\n\tuint32_t encoding;\r\n\t// 集合包含的元素数量\r\n\tuint32_t length;\r\n\t// 保存元素的数组\r\n\tint8_t contents[];\r\n} intset;\r\n```\r\n\r\n1. 如果 encoding 属性值为 INTSET_ENC_INT16，那么 contents 就是一个 int16_t 类型的数组，数组中的每个元素的类型都是 int16_t\r\n2. 如果 encoding 属性值为 INTSET_ENC_INT32，那么 contents 就是一个 int32_t 类型的数组，数组中的每个元素的类型都是 int32_t\r\n3. 如果 encoding 属性值为 INTSET_ENC_INT64，那么 contents 就是一个 int64_t 类型的数组，数组中的每个元素的类型都是 int64_t\r\n\r\n### 整数集合的升级操作\r\n\r\n当一个新元素加入到整数集合时，如果新元素的类型比整数集合现有所有元素的类型都要长时，整数集合需要先进行升级，也就是按新元素的类型扩展 contents 数组的大小，然后才能将新元素加入到整数集合里，升级的过程也要维持整数集合的 **有序性**\r\n\r\n### 整数集合升级的好处\r\n\r\n节省内存资源\r\n\r\n### 整数集合支持降级操作吗\r\n\r\n不支持\r\n\r\n## 跳表\r\n\r\n### 跳表结构设计\r\n\r\n[img 层级为 3 的跳表结构示例](../images/层级为3的跳表结构示例.webp)\r\n\r\n```C\r\ntypedef struct zskiplistNode {\r\n\t// Zset 对象的元素值\r\n\tsds ele;\r\n\t// 元素权重值\r\n\tdouble score;\r\n\t// 后向指针\r\n\tstruct zskiplistNode *backward;\r\n\r\n\t// 节点的 level 数组，保存每层上的前向指针和跨度\r\n\tstruct zskiplistLevel {\r\n\t\tstruct zskiplistNode *forward;\r\n\t\tunsigned long span;\r\n\t} level[];\r\n} zskiplistNode;\r\n```\r\n\r\n```C\r\ntypedef struct zskiplist {\r\n\tstruct zskiplistNode *header, *tail;\r\n\tunsigned long length;\r\n\tint level;\r\n} zskiplist;\r\n```\r\n\r\n### 跳表节点查询过程\r\n\r\n查找一个跳表节点的过程时，跳表会从头节点的最高层开始，逐一遍历每一层，在遍历某一层的跳表节点时，会用跳表节点中的 SDS 类型的元素和元素的权重来进行判断，共有两个判断条件：\r\n\r\n1. 如果当前节点的权重 **小于** 要查找的权重时，跳表就会访问该层上的下一个节点\r\n2. 如果当前节点的权重 **等于** 要查找的权重时，并且当前节点的 SDS 类型数据 **小于** 要查找的数据时，跳表就会访问该层上的下一个节点\r\n\r\n如果上面两个条件都不满足，或者下一个节点为空时，跳表就会使用目前遍历到的节点的 level 数组里的下一层指针，然后沿着下一层指针继续查找，这就相当于跳到了下一层接着查找\r\n\r\n### 跳表节点层数设置\r\n\r\n跳表的相邻两层的节点数量最理想的比例是 **2:1**，查找复杂度可以降低到 O(log N)\r\n\r\n#### 如何维持相邻两层的节点数量的比例为 2:1 \r\n\r\n跳表在创建节点的时候，**随机** 生成每个节点的层数，并没有严格维持相邻两层的节点数量比例为 2:1，具体做法为，跳表在创建节点的时候，会生成范围为 \\[0-1\\] 的随机数，如果这个随机数小于 0.25，那么层数就增加 1 层，然后继续生成下一个随机数，直到随机数的结果大于 0.25 结束，最终确定该节点的层数，层高的最大限制是 **64**"],[2,"\n\nNOTE TITLE: [[管道与事务]]\n\nMETADATA:{\"created\":\"2025/05/01 01:47:19\",\"modified\":\"2025/05/01 01:47:19\"}\n\nNOTE BLOCK CONTENT:\n\n## 管道\r\n\r\n管道技术（Pipeline）是客户端提供的一种批处理技术，用于一次处理多个 Redis 命令，从而提高整个交互的性能。使用管道技术可以解决多个命令执行时的网络等待，但是也要注意避免发送的命令过大，或管道内的数据太多而导致的网络阻塞\r\n\r\n## 事务\r\n\r\n### Redis 事务支持回滚吗？\r\n\r\nRedis 并没有提供回滚机制，虽然提供了 DISCARD 命令，但只能用于主动放弃事务执行，把暂存的命令队列清空，没有回滚的效果\r\n\r\n#### DISCARD 命令用法\r\n\r\n```shell\r\n# 读取 count 的值\r\n> GET count\r\n\"1\"\r\n# 开启事务\r\n> MULTI\r\nOK\r\n# 发送事务的第一个操作，对 count 减 1\r\n> DECR count\r\nQUEUED\r\n# 执行 DISCARD 命令，主动放弃事务\r\n> DISCARD\r\nOK\r\n# 再次读取 count 的值，没有被修改\r\n> GET count\r\n\"1\"\r\n```\r\n\r\n事务执行过程中，如果命令入队时没报错，而事务提交后，实际执行时报错了，正确的命令依然可以正常执行，所以 Redis 并不一定保证原子性，例如：\r\n\r\n```shell\r\n# 获取 name 原本的值\r\n> GET name\r\n\"xiaolin\"\r\n# 开启事务\r\n> MULTI\r\nOK\r\n# 设置新值\r\n(TX)> SET name xiaolincoding\r\nQUEUED\r\n# 加入错误命令\r\n(TX)> EXPIRE name 10s\r\nQUEUED\r\n# 提交事务，执行报错\r\n# 可以看到 set 执行成功，而 expire 执行错误\r\n(TX)> EXEC\r\n1) OK\r\n2) (error) ERR value is not an integer or out of range\r\n# name 被设置为新值了\r\n> GET name\r\n\"xiaolincoding\"\r\n```"],[21,"\n\nNOTE TITLE: [[缓存雪崩、穿透、击穿]]\n\nMETADATA:{\"created\":\"2025/04/27 11:15:56\",\"modified\":\"2025/04/27 13:15:58\"}\n\nNOTE BLOCK CONTENT:\n\n## 缓存雪崩\n\n### 原因\n\n1. 大量缓存数据同时过期\n2. redis 故障\n\n### 应对策略\n1. 大量数据同时过期\n\t1. **均匀设置过期时间** ：给缓存数据的过期时间加上一个随机数\n\t2. **互斥锁** ：当业务线程在处理用户请求时，**如果发现访问的数据不在 redis 中，就加个互斥锁，保证同一时间内只有一个请求构建缓存**，当缓存构建完成后，再释放锁。未能获取互斥锁的请求，要么等待锁释放后重新读取缓存，要么就返回空值或默认值。（互斥锁最好设置**超时时间**）\n\t3. **双 key 策略** ：使用两个 key 缓存数据，一个是**主 key**，会设置**过期时间**；一个是**备 key**，不会设置过期时间。当业务线程访问不到**主 key** 的缓存数据时，就返回**备 key** 的数据，更新缓存时，同时更新主备 key 的数据\n\t4. **后台更新缓存** ：业务线程不再负责更新缓存，缓存也不设置有效期，而是让缓存永久有效，并让更新缓存的工作交由后台线程定时更新。后台更新缓存的机制适合做**缓存预热**，当缓存数据被淘汰时，有两种方式解决：\n\t\t1. 后台线程不仅负责定时更新缓存，而且也负责**频繁地检测缓存是否有效**，检测到缓存失效了，便从数据库读取并更新。检测间隔应为**毫秒级**\n\t\t2. 业务线程发现缓存数据失效后，通过**消息队列**通知后台线程更新缓存。\n2. redis 故障宕机\n\t1. **服务熔断或请求限流机制** \n\t\t1. 启用**服务熔断**机制，暂停业务应用对缓存服务的访问，直接返回错误。\n\t\t2. 启用**请求限流**机制，只允许少量请求发送到数据库，再多的请求直接在入口拒绝服务。\n\t2. **构建 redis 缓存高可靠集群** ：主从节点\n\n## 缓存击穿\n\n### 原因\n\n1. 热点数据缓存过期\n\n### 应对策略\n\n1. **互斥锁** ：保证同一时间内只有一个业务线程更新缓存，未能获取互斥锁的请求，要么等待锁释放后重新读取内存，要么就返回空值或默认值。\n2. **永久有效** ：不给热点数据设置过期时间，由后台异步更新缓存，或者在热点数据准备过期前，提前通知后台线程更新缓存以及重新设置过期时间。\n\n## 缓存穿透\n\n### 原因\n\n1. 数据既不在缓存，也不在数据库\n\n### 应对策略\n\n1. **限制非法请求** ：在 api 入口处判断请求参数是否合理、是否含有非法值、请求字段是否存在，如果判断出是恶意请求就直接返回错误，避免进一步访问缓存或数据库。\n2. **缓存空值或默认值** ：在缓存中设置一个空值或默认值，发生缓存穿透时就可以直接返回空值或默认值，而不会继续查询数据库。\n3. **[[布隆过滤器]]** ：使用布隆过滤器快速判断数据是否存在，避免通过查询数据库判断。\n\n## 总结\n\n[img 缓存雪崩、缓存击穿、缓存穿透的产生原因及应对方案](../images/缓存雪崩、缓存击穿、缓存穿透的产生原因及应对方案.webp)"],[8,"\n\nNOTE TITLE: [[过期删除策略]]\n\nMETADATA:{\"created\":\"2025/04/29 22:55:17\",\"modified\":\"2025/05/01 16:36:14\"}\n\nNOTE BLOCK CONTENT:\n\nRedis 可以对 key 设置过期时间的，因此需要有相应的机制将已过期的键值对删除，而做这个工作的就是 **过期键值删除策略**\n\n## 如何设置过期时间\n\n设置 key 过期时间的命令一共有 4 个：\n\n1. expire \\<key\\> \\<n\\>：设置 key 在 n 秒后过期\n2. pexpire \\<key\\> \\<n\\>：设置 key 在 n 毫秒后过期\n3. expireat \\<key\\> \\<n\\>：设置 key 在某个秒时间戳之后过期\n4. pexpireat \\<key\\> \\<n\\>：设置 key 在某个毫秒时间戳之后过期\n\n在设置字符串时，也可以同时对 key 设置过期时间，共有 3 种命令：\n\n1. set \\<key\\> \\<value\\> ex \\<n\\>：设置键值对的时候，同时指定过期时间（精确到秒）\n2. set \\<key\\> \\<value\\> px \\<n\\>：设置键值对的时候，同时指定过期时间（精确到毫秒）\n3. setex \\<key\\> \\<n\\> \\<value\\>：设置键值对的时候，同时指定过期时间（精确到秒）\n\n使用 TTL \\<key\\> 命令查看某个 key 剩余的存活时间\n\n如果突然反悔，取消 key 的过期时间，则可以使用 PERSIST \\<key\\> 命令\n\n## 如何判定 key 已过期\n\n对一个 key 设置了过期时间时，Redis 会把该 key 带上过期时间存储到一个 **过期字典 (expires dict)** 中，过期字典存储在 redisDb 结构中，如下：\n\n```C\ntypedef struct redisDb {\n\tdict *dict; // 数据库键空间，存放着所有的键值对\n\tdict *expires; // 键的过期时间\n\t...\n} redisDb;\n```\n\n当查询一个 key 时，Redis 首先检查该 key 是否存在于过期字典中：\n\n1. 如果不在，则正常读取键值对\n2. 如果存在，则会获取该 key 的过期时间，然后与当前系统时间进行对比，如果比系统时间大，那就没有过期，否则判定该 key 已过期\n\n## 过期删除策略\n\n1. [定时删除](#定时删除)\n2. [惰性删除](#惰性删除)\n3. [定期删除](#定期删除)\n\n## 定时删除\n\n### 做法\n\n在设置 key 的过期时间时，同时创建一个定时事件，当时间到达时，由事件处理器自动执行 key 的删除操作\n\n### 优点\n\n可以保证过期 key 会被尽快删除，也就是内存可以被尽快地释放。因此，定时删除对内存是最友好的\n\n### 缺点\n\n在过期 key 比较多的情况下，删除过期 key 可能会占用相当一部分 CPU 时间，在内存不紧张但 CPU 时间紧张的情况下，将 CPU 时间用于删除和当前任务无关的过期键上，会对服务器的响应时间和吞吐量造成影响。所以，定时删除策略对 CPU 不友好\n\n## 惰性删除\n\n### 做法\n\n不主动删除过期键，每次从数据库访问 key 时，都检测 key 是否过期，如果过期则删除该 key\n\n### 优点\n\n因为每次访问时，才会检查 key 是否过期，所以此策略只会使用很少的系统资源。因此，惰性删除策略对 CPU 时间最友好\n\n### 缺点\n\n如果一个 key 已过期，而这个 key 又仍然保留在数据库中，那么只要这个过期 key 一直没有被访问，它占用的内存就不会释放，造成了一定的内存空间浪费。所以，惰性删除策略对内存不友好\n\n## 定期删除策略\n\n### 做法\n\n每隔一段时间 **随机** 从数据库中取出一定数量的 key 进行检查，并删除其中过期的 key\n\n### 优点\n\n通过限制删除操作执行的时长和频率，来减少删除操作对 CPU 的影响，同时也能删除一部分过期的数据减少了过期键对空间的无效占用\n\n### 缺点\n\n1. 内存清理方面没有定时删除效果好，同时没有惰性删除使用的系统资源少\n2. 难以确定删除操作执行的时长和频率。如果执行得太频繁，定期删除策略变得和定时删除策略一样，对 CPU 不友好；如果执行得太少，又变得跟惰性删除一样，过期 key 占用的内存不会及时得到释放\n\n## Redis 过期删除策略\n\nRedis 选择 [惰性删除](#惰性删除) + [定期删除](#定期删除) 两种策略配合使用，以求在合理使用 CPU 时间和避免内存浪费之间取得平衡\n\n### Redis 怎么实现惰性删除\n\nRedis 的惰性删除策略由 db.c 文件中的 expireIfNeeded 函数实现\n\n```C\nint expireIfNeeded(redisDb *db, robj *obj) {\n\t// 判断 key 是否过期\n\tif (!keyIsExpired(db, key)) return 0;\n\t...\n\t// 删除过期键\n\t...\n\t// 如果 server.lazyfree_lazy_expire 为 1 表示异步删除，反之同步删除\n\treturn server.lazyfree_lazy_expire ? dbAsyncDelete(db, key) : dbSyncDelete(db, key);\n}\n```\n\nRedis 在访问或修改 key 之前，都会调用 expireIfNeeded 函数对其进行检查，检查 key 是否过期：\n\n1. 如果过期，则删除该 key，根据 lazyfree_lazy_expire 参数决定选择异步删除还是同步删除\n2. 如果没有过期，不做任何处理，返回正常的键值对给客户端\n\n### Redis 怎么实现定期删除\n\n1. 间隔检查的时间多长？\n\t在 Redis 中，默认每秒进行 10 次过期检查一次数据库，此配置可通过 Redis 配置文件 redis.conf 进行配置，配置键为 **hz**，默认值是 hz 10。每次检查数据库并不是遍历过期字典中的所有 key，而是从数据库中随机抽取一定数量的 key 做过期检查\n2. 随机抽查的数量是多少\n\t固定值，由 **ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP** 定义，数值是 20\n\n#### 流程\n\n1. 从过期字典中随机抽取 20 个 key\n2. 检查这 20 个 key 是否过期，并删除已过期的 key\n3. 如果本轮检查的已过期 key 的数量超过 5 个 (20 \\/ 4)，也就是 **已过期 key 的数量** 占比 **随机抽取 key 的数量** 大于 25%，则继续重复步骤 1；如果已过期的 key 比例小于 25%，则停止继续删除过期 key，然后等待下一轮再检查\n\n为了保证定期删除不会出现循环过度，导致线程卡死现象，增加了定期删除循环流程的时间上限，默认不会超过 **25 ms**\n\n## Redis 持久化时，对过期键怎么处理\n\nRedis 持久化文件有两种格式：[[持久化#RDB 快照]](Redis Database) 和 [[持久化#AOF 日志]](Append Only File)\n\n### RDB\n\n分为两个阶段，RDB 文件生成阶段和加载阶段\n\n#### RDB 文件生成阶段\n\n从内存状态持久化成 RDB 文件时，会对 key 做过期检查，过期的键不会被保存到新的 RDB 文件中，因此 Redis 中的过期键不会对生成新的 RDB 文件产生任何影响\n\n#### RDB 加载阶段\n\n1. 如果 Redis 是 **主服务器** 运行模式，在载入 RDB 文件时，会对文件中保存的键进行检查，过期键不会被载入数据库中。所以过期键不会对载入 RDB 文件的主服务器造成影响\n2. 如果 Redis 是 **从服务器** 运行模式，在载入 RDB 文件时，无论键是否过期都会被载入数据库。但由于主从服务器在进行数据同步时，从服务器的数据会被清空。所以一般来说，过期键对载入 RDB 文件的从服务器也不会造成影响\n\n### AOF\n\n分为两个阶段，AOF 文件写入阶段和 AOF 重写阶段\n\n#### AOF 文件写入阶段\n\n当 Redis 以 AOF 模式持久化时，如果数据库某个过期键还没被删除，那么 AOF 文件会保留此过期键，当此过期键被删除后，Redis 会向 AOF 文件追加一条 DEL 命令来显式地删除该键值\n\n#### AOF 重写阶段\n\n执行 AOF 重写时，会对 Redis 中的键值对进行检查，已过期的键不会被保存到重写后的 AOF 文件中，因此不会对 AOF 重写造成任何影响\n\n## Redis [主从模式](主从架构)中，对过期键会怎么处理\n\n当 Redis 运行在主从模式下时，从库不会进行过期扫描，从库对过期的处理是被动的，即使从库中的 key 过期了，如果有客户端访问从库，仍然可以得到 key 对应的值，像未过期的键值对一样返回。从库的过期键处理依靠主库控制，主库在 key 到期时，会在 AOF 文件里添加一条 del 命令，同步到所有从库，从库通过执行这条 del 指令来删除过期的 key"]],"type":"string"},"embeddingModel":{"docs":{"1":0,"2":1,"3":2,"4":3,"5":4,"6":5,"7":6,"8":7,"9":8,"10":9,"11":10,"12":11,"13":12,"14":13,"15":14,"16":15,"17":16,"18":17,"19":18,"20":19,"21":20},"orderedDocs":[[1,"bge-m3"],[2,"bge-m3"],[3,"bge-m3"],[4,"bge-m3"],[5,"bge-m3"],[6,"bge-m3"],[7,"bge-m3"],[8,"bge-m3"],[9,"bge-m3"],[10,"bge-m3"],[11,"bge-m3"],[12,"bge-m3"],[13,"bge-m3"],[14,"bge-m3"],[15,"bge-m3"],[16,"bge-m3"],[17,"bge-m3"],[18,"bge-m3"],[19,"bge-m3"],[20,"bge-m3"],[21,"bge-m3"]],"type":"string"},"created_at":{"docs":{"1":0,"2":1,"3":2,"4":3,"5":4,"6":5,"7":6,"8":7,"9":8,"10":9,"11":10,"12":11,"13":12,"14":13,"15":14,"16":15,"17":16,"18":17,"19":18,"20":19,"21":20},"orderedDocs":[[1,1746088925201],[2,1746088925206],[3,1746088925210],[4,1746088925213],[5,1746088925217],[6,1746088925220],[7,1746088925222],[8,1746088925226],[9,1746088925232],[10,1746088925236],[11,1746088925240],[12,1746088925245],[13,1746088925249],[14,1746088925255],[15,1746088925258],[16,1746088925259],[17,1746088925261],[18,1746088925264],[19,1746088925267],[20,1746088925268],[21,1746088925969]],"type":"number"},"ctime":{"docs":{"1":20,"2":19,"3":18,"4":17,"5":16,"6":15,"7":14,"8":13,"9":11,"10":12,"11":7,"12":8,"13":9,"14":10,"15":6,"16":5,"17":4,"18":3,"19":2,"20":1,"21":0},"orderedDocs":[[21,1745723756064],[20,1745729705916],[19,1745731012764],[18,1745744649506],[17,1745932172820],[16,1745932172854],[15,1745932172865],[11,1745932172879],[12,1745932172879],[13,1745932172879],[14,1745932172879],[9,1745932172896],[10,1745932172896],[8,1745938517337],[7,1746035239686],[6,1746035239710],[5,1746035239726],[4,1746035239741],[3,1746035239755],[2,1746035239768],[1,1746088605221]],"type":"number"},"mtime":{"docs":{"1":20,"2":18,"3":17,"4":16,"5":15,"6":14,"7":13,"8":19,"9":11,"10":12,"11":7,"12":8,"13":9,"14":10,"15":6,"16":5,"17":3,"18":4,"19":2,"20":0,"21":1},"orderedDocs":[[20,1745730868647],[21,1745730958792],[19,1745744373394],[17,1745932172827],[18,1745932172841],[16,1745932172855],[15,1745932172865],[11,1745932172880],[12,1745932172880],[13,1745932172880],[14,1745932172880],[9,1745932172896],[10,1745932172896],[7,1746035239686],[6,1746035239711],[5,1746035239727],[4,1746035239741],[3,1746035239756],[2,1746035239768],[8,1746088574718],[1,1746088804966]],"type":"number"},"extension":{"docs":{"1":0,"2":1,"3":2,"4":3,"5":4,"6":5,"7":6,"8":7,"9":8,"10":9,"11":10,"12":11,"13":12,"14":13,"15":14,"16":15,"17":16,"18":17,"19":18,"20":19,"21":20},"orderedDocs":[[1,"md"],[2,"md"],[3,"md"],[4,"md"],[5,"md"],[6,"md"],[7,"md"],[8,"md"],[9,"md"],[10,"md"],[11,"md"],[12,"md"],[13,"md"],[14,"md"],[15,"md"],[16,"md"],[17,"md"],[18,"md"],[19,"md"],[20,"md"],[21,"md"]],"type":"string"}},"enabled":true,"isSorted":true},"language":"english"}